
nios2_camera_sdram_lcd.elf:     file format elf32-littlenios2
nios2_camera_sdram_lcd.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000e504 memsz 0x0000e504 flags r-x
    LOAD off    0x0000f524 vaddr 0x0000e524 paddr 0x0000ff88 align 2**12
         filesz 0x00001a64 memsz 0x00001a64 flags rw-
    LOAD off    0x000119ec vaddr 0x000119ec paddr 0x000119ec align 2**12
         filesz 0x00000000 memsz 0x0007faf8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dec0  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004b0  0000e074  0000e074  0000f074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a64  0000e524  0000ff88  0000f524  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0007fda5  000119ec  000119ec  000119ec  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00010f88  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000cd8  00000000  00000000  00010fb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000013d9  00000000  00000000  00011c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023236  00000000  00000000  00013061  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a31  00000000  00000000  00036297  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001444f  00000000  00000000  0003dcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000019f0  00000000  00000000  00052118  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000225a  00000000  00000000  00053b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bfcb  00000000  00000000  00055d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00061d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00061d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006587f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00065882  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00065885  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00065886  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00065887  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006588b  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006588f  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00065893  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006589c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000658a5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000016  00000000  00000000  000658ae  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  000658c4  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0005f5ae  00000000  00000000  000658f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000e074 l    d  .rodata	00000000 .rodata
0000e524 l    d  .rwdata	00000000 .rwdata
000119ec l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 avalon_isp_algo_2a.c
0000ff40 l     O .rwdata	00000004 cmos_gain.2183
0000ff44 l     O .rwdata	00000004 cmos_exposure.2182
00000000 l    df *ABS*	00000000 hello_world.c
000119ec l     O .bss	00000004 vi_frame_int
00000578 l     F .text	00000038 dvp_vi_isr
000119f0 l     O .bss	00000004 isp_frame_int
000005b0 l     F .text	00000060 isp_isr
000119f4 l     O .bss	00000004 vip_frame_int
00000610 l     F .text	00000038 vip_isr
00000648 l     F .text	000002dc init_vi_isp_vip_wch
0005162c l     O .bss	0003fc00 cap_fb
00011a2c l     O .bss	0003fc00 lcd_fb
00000000 l    df *ABS*	00000000 ov5640_drv.c
00000c08 l     F .text	00000114 cmos_poweron
00000d1c l     F .text	000000b8 cmos_poweroff
00000dd4 l     F .text	000000c4 i2c_init
00000e98 l     F .text	0000051c i2c_write_byte
000013b4 l     F .text	00000078 ov_wr_reg
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001b54 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001e78 l     F .text	00000058 __sprint_r
0000e25a l     O .rodata	00000010 blanks.3452
0000e24a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003ef4 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000591c l     F .text	00000058 std
00005a28 l     F .text	00000008 __fp_lock
00005a30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000e524 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000ff54 l     O .rwdata	00000004 charset
0000e290 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000e3d8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00009ddc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b6c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b720 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b824 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000bc14 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000bcf4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000be54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000c084 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ff7c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000c36c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000eee0 l     O .rwdata	00001060 jtag_uart
0000c444 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c684 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c8ac l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000d2a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000d3ec l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000d53c l     F .text	000000f8 alt_file_locked
0000d7c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000de5c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000e010 l     F .text	00000040 alt_sim_halt
0000770c g     F .text	00000094 _mprec_log10
000077f8 g     F .text	00000088 __any_on
00008fb0 g     F .text	00000070 _isatty_r
0000e3b0 g     O .rodata	00000028 __mprec_tinytens
0000beb4 g     F .text	0000006c alt_main
00001d50 g     F .text	000000a0 _puts_r
00091254 g     O .bss	00000100 alt_irq
00009020 g     F .text	00000078 _lseek_r
0000ff88 g       *ABS*	00000000 __flash_rwdata_start
0000a8fc g     F .text	00000088 __eqdf2
000914e4 g       *ABS*	00000000 __alt_heap_start
00001cd8 g     F .text	00000044 printf
00008a68 g     F .text	00000068 __sseek
00005984 g     F .text	000000a4 __sinit
00006690 g     F .text	00000084 _setlocale_r
00005a84 g     F .text	0000009c __sfmoreglue
0000bf40 g     F .text	00000020 __malloc_unlock
00007188 g     F .text	000000e0 memmove
000001f0 g     F .text	000002c4 isp_ae_handler
00005a74 g     F .text	00000010 _cleanup
00007880 g     F .text	000000bc _Balloc
0000aa0c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008f3c g     F .text	00000074 _fstat_r
00011a10 g     O .bss	00000004 errno
00011a1c g     O .bss	00000004 alt_argv
00017f40 g       *ABS*	00000000 _gp
0000c218 g     F .text	00000030 usleep
0000ed60 g     O .rwdata	00000180 alt_fd_list
0000d9e4 g     F .text	00000094 alt_find_dev
000070e8 g     F .text	000000a0 memcpy
00005a68 g     F .text	0000000c _cleanup_r
0000aba4 g     F .text	000000f8 __floatsidf
0000d4c4 g     F .text	00000078 alt_io_redirect
0000ab1c g     F .text	00000088 __ltdf2
0000e074 g       *ABS*	00000000 __DTOR_END__
00001df0 g     F .text	00000014 puts
0000765c g     F .text	000000b0 __ratio
0000cac4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00001d1c g     F .text	00000034 _printf_r
00001c90 g     F .text	00000008 __udivsi3
0000bb50 g     F .text	000000c4 isatty
0000e2c0 g     O .rodata	000000c8 __mprec_tens
0000666c g     F .text	00000008 __locale_charset
00011a04 g     O .bss	00000004 __malloc_top_pad
0000ff50 g     O .rwdata	00000004 __mb_cur_max
00006674 g     F .text	0000000c _localeconv_r
00007fe4 g     F .text	0000003c __i2b
00006050 g     F .text	0000049c __sfvwrite_r
000089f0 g     F .text	00000070 _sbrk_r
00009098 g     F .text	00000078 _read_r
0000e924 g     O .rwdata	0000000c __lc_ctype
0000ff70 g     O .rwdata	00000004 alt_max_fd
0000b3c0 g     F .text	00000138 __unpack_d
00001b04 g     F .text	00000050 cmos_set_gain
00008e18 g     F .text	00000110 _fclose_r
000058e8 g     F .text	00000034 fflush
00011a08 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a26c g     F .text	00000074 __adddf3
0000753c g     F .text	00000120 __b2d
0000977c g     F .text	00000660 __umoddi3
0000bd60 g     F .text	000000f4 lseek
0000ff4c g     O .rwdata	00000004 _global_impure_ptr
0000838c g     F .text	000005f4 _realloc_r
000914e4 g       *ABS*	00000000 __bss_end
0000ba58 g     F .text	000000f8 alt_iic_isr_register
0000d8b8 g     F .text	0000010c alt_tick
00009110 g     F .text	0000066c __udivdi3
0000e388 g     O .rodata	00000028 __mprec_bigtens
0000826c g     F .text	00000120 __s2b
0000ad74 g     F .text	00000194 __floatunsidf
0000745c g     F .text	00000060 __mcmp
00005a50 g     F .text	00000018 __fp_lock_all
0000ba10 g     F .text	00000048 alt_ic_irq_enabled
0000d820 g     F .text	00000098 alt_alarm_stop
00011a14 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000ed38 g     O .rwdata	00000028 alt_dev_null
0000d1d8 g     F .text	0000001c alt_dcache_flush_all
00007328 g     F .text	00000070 __hi0bits
0000ac9c g     F .text	000000d8 __fixdfsi
0000ff88 g       *ABS*	00000000 __ram_rwdata_end
0000ff68 g     O .rwdata	00000008 alt_dev_list
0000c248 g     F .text	00000124 write
000004b4 g     F .text	000000c4 isp_awb_handler
0000e524 g       *ABS*	00000000 __ram_rodata_end
0000b74c g     F .text	000000d8 fstat
0000814c g     F .text	00000120 __pow5mult
000119f8 g     O .bss	00000004 __nlocale_changed
00001c98 g     F .text	00000008 __umodsi3
000914e4 g       *ABS*	00000000 end
0000c5c4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000e070 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000b02c g     F .text	00000080 __clzsi2
0000cce8 g     F .text	00000240 altera_avalon_jtag_uart_write
00005974 g     F .text	00000004 __sfp_lock_acquire
00007004 g     F .text	000000e4 memchr
00001ed0 g     F .text	00001ec4 ___vfprintf_internal_r
00005d3c g     F .text	00000314 _free_r
0000de60 g     F .text	000001b0 __call_exitprocs
000119fc g     O .bss	00000004 __mlocale_changed
0000ff5c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00001aa0 g     F .text	00000064 cmos_set_exposure
00011a24 g     O .bss	00000004 _alt_tick_rate
00007c44 g     F .text	0000014c __lshift
00011a28 g     O .bss	00000004 _alt_nticks
0000bf60 g     F .text	00000124 read
0000c400 g     F .text	00000044 alt_sys_init
0000dd28 g     F .text	00000134 __register_exitproc
0000142c g     F .text	00000674 ov5640_init_raw_1280_960_30fps_crop_960_544
00007d90 g     F .text	00000254 __multiply
0000c95c g     F .text	00000074 altera_avalon_jtag_uart_close
00001ca0 g     F .text	00000038 __mulsi3
0000e524 g       *ABS*	00000000 __ram_rwdata_start
0000e074 g       *ABS*	00000000 __ram_rodata_start
0009122c g     O .bss	00000028 __malloc_current_mallinfo
0000793c g     F .text	0000017c __d2b
0000c47c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000db98 g     F .text	000000d0 alt_get_fd
0000d07c g     F .text	0000015c alt_busy_sleep
0000b4f8 g     F .text	000000c8 __fpcmp_parts_d
00008da8 g     F .text	00000070 _close_r
0000dcb4 g     F .text	00000074 memcmp
0000c52c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000914e4 g       *ABS*	00000000 __alt_stack_base
0000c574 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003db8 g     F .text	0000013c __swsetup_r
0000a6a4 g     F .text	00000258 __divdf3
00005b20 g     F .text	000000f0 __sfp
000077a0 g     F .text	00000058 __copybits
0000e930 g     O .rwdata	00000408 __malloc_av_
00005980 g     F .text	00000004 __sinit_lock_release
0000a2e0 g     F .text	000003c4 __muldf3
00008b4c g     F .text	00000060 __sread
0000da78 g     F .text	00000120 alt_find_file
0000d1f4 g     F .text	000000b4 alt_dev_llist_insert
0000bf20 g     F .text	00000020 __malloc_lock
0000c15c g     F .text	000000bc sbrk
000056ec g     F .text	000001fc _fflush_r
00008ce0 g     F .text	000000c8 _calloc_r
000119ec g       *ABS*	00000000 __bss_start
00007268 g     F .text	00000098 memset
00000924 g     F .text	000002e4 main
00011a20 g     O .bss	00000004 alt_envp
00011a0c g     O .bss	00000004 __malloc_max_total_mem
0000c4d4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00008a60 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00008f28 g     F .text	00000014 fclose
00091354 g     O .bss	00000190 _atexit0
00004138 g     F .text	000015b4 _dtoa_r
000068c4 g     F .text	00000740 _malloc_r
0000ff74 g     O .rwdata	00000004 alt_errno
000065b4 g     F .text	000000b8 _fwalk
00001bd0 g     F .text	00000060 __divsi3
0000e3e4 g     O .rodata	00000014 __thenan_df
00005c10 g     F .text	0000012c _malloc_trim_r
0000e074 g       *ABS*	00000000 __CTOR_END__
00008bac g     F .text	000000bc strcmp
0000e074 g       *ABS*	00000000 __flash_rodata_start
0000e074 g       *ABS*	00000000 __DTOR_LIST__
0000a984 g     F .text	00000088 __nedf2
0000c3cc g     F .text	00000034 alt_irq_init
0000c0e4 g     F .text	00000078 alt_release_fd
0000e3f8 g     O .rodata	00000100 __clz_tab
00011a00 g     O .bss	00000004 _PathLocale
0000dc68 g     F .text	00000014 atexit
00008c68 g     F .text	00000078 _write_r
00006714 g     F .text	0000001c setlocale
0000ff48 g     O .rwdata	00000004 _impure_ptr
00011a18 g     O .bss	00000004 alt_argc
0000d36c g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000074bc g     F .text	00000080 __ulp
00008980 g     F .text	00000040 __isinfd
00005a38 g     F .text	00000018 __fp_unlock_all
0000ff60 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006680 g     F .text	00000010 localeconv
0000b884 g     F .text	00000050 alt_ic_isr_register
0000ff88 g       *ABS*	00000000 _edata
000914e4 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c9d0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000b970 g     F .text	000000a0 alt_ic_irq_disable
00008ad0 g     F .text	0000007c __swrite
0000ff58 g     O .rwdata	00000004 __malloc_trim_threshold
0000d9c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0000dc7c g     F .text	00000038 exit
000064ec g     F .text	000000c8 _fwalk_reent
00007ab8 g     F .text	0000018c __mdiff
00001c30 g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005978 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000e050 g     F .text	00000020 _exit
000089c0 g     F .text	00000030 __isnand
0000cf28 g     F .text	00000154 alt_alarm_start
0000af08 g     F .text	00000124 __muldi3
00006730 g     F .text	00000194 __smakebuf_r
00001e04 g     F .text	00000074 strlen
0000d634 g     F .text	0000018c open
0000aa94 g     F .text	00000088 __gedf2
0000d3d0 g     F .text	0000001c alt_icache_flush_all
0000ff78 g     O .rwdata	00000004 alt_priority_mask
0000b8d4 g     F .text	0000009c alt_ic_irq_enable
00003d94 g     F .text	00000024 __vfprintf_internal
0000a1ec g     F .text	00000080 __subdf3
00007398 g     F .text	000000c4 __lo0bits
0000ff80 g     O .rwdata	00000008 alt_alarm_list
0000d308 g     F .text	00000064 _do_ctors
0000b5c0 g     F .text	00000100 close
0000bc74 g     F .text	00000080 alt_load
0000b0ac g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
0000597c g     F .text	00000004 __sinit_lock_acquire
00008020 g     F .text	0000012c __multadd
00007300 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00274 	movhi	r3,9
 134:	18c49504 	addi	r3,r3,4692
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00274 	movhi	r3,9
 14c:	18c49504 	addi	r3,r3,4692
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69fd014 	ori	gp,gp,32576
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10867b14 	ori	r2,r2,6636

    movhi r3, %hi(__bss_end)
     1cc:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
     1d0:	18c53914 	ori	r3,r3,5348

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000bc740 	call	bc74 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000beb40 	call	beb4 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <isp_ae_handler>:

extern int cmos_set_exposure(unsigned exposure);
extern int cmos_set_gain(unsigned gain);

void isp_ae_handler(void* base)
{
     1f0:	defff204 	addi	sp,sp,-56
     1f4:	dfc00d15 	stw	ra,52(sp)
     1f8:	df000c15 	stw	fp,48(sp)
     1fc:	dc000b15 	stw	r16,44(sp)
     200:	df000b04 	addi	fp,sp,44
     204:	e13ffb15 	stw	r4,-20(fp)
	static unsigned cmos_exposure = 0x080;
	static unsigned cmos_gain = 0x010;
	const unsigned target_val = 65;
     208:	00801044 	movi	r2,65
     20c:	e0bffa15 	stw	r2,-24(fp)
	unsigned pix_cnt = IORD(base, ISP_REG_STAT_AE_PIX_CNT);
     210:	e0bffb17 	ldw	r2,-20(fp)
     214:	10801504 	addi	r2,r2,84
     218:	10800037 	ldwio	r2,0(r2)
     21c:	e0bff915 	stw	r2,-28(fp)
	unsigned sum = IORD(base, ISP_REG_STAT_AE_SUM);
     220:	e0bffb17 	ldw	r2,-20(fp)
     224:	10801604 	addi	r2,r2,88
     228:	10800037 	ldwio	r2,0(r2)
     22c:	e0bff815 	stw	r2,-32(fp)
	unsigned gain0 = pix_cnt * target_val / (sum >> 4);
     230:	e13ff917 	ldw	r4,-28(fp)
     234:	e17ffa17 	ldw	r5,-24(fp)
     238:	0001ca00 	call	1ca0 <__mulsi3>
     23c:	1009883a 	mov	r4,r2
     240:	e0bff817 	ldw	r2,-32(fp)
     244:	100ad13a 	srli	r5,r2,4
     248:	0001c900 	call	1c90 <__udivsi3>
     24c:	e0bff715 	stw	r2,-36(fp)

	unsigned expo_diff, gain_diff;
	if (gain0 > 20) {
     250:	e0bff717 	ldw	r2,-36(fp)
     254:	10800570 	cmpltui	r2,r2,21
     258:	1000481e 	bne	r2,zero,37c <isp_ae_handler+0x18c>
		expo_diff = (((cmos_exposure * gain0) >> 4) - cmos_exposure) >> 1;
     25c:	d1200117 	ldw	r4,-32764(gp)
     260:	e17ff717 	ldw	r5,-36(fp)
     264:	0001ca00 	call	1ca0 <__mulsi3>
     268:	1006d13a 	srli	r3,r2,4
     26c:	d0a00117 	ldw	r2,-32764(gp)
     270:	1885c83a 	sub	r2,r3,r2
     274:	1004d07a 	srli	r2,r2,1
     278:	e0bff615 	stw	r2,-40(fp)
		expo_diff = expo_diff > 0 ? expo_diff : 1;
     27c:	e0bff617 	ldw	r2,-40(fp)
     280:	1005003a 	cmpeq	r2,r2,zero
     284:	1000031e 	bne	r2,zero,294 <isp_ae_handler+0xa4>
     288:	e0bff617 	ldw	r2,-40(fp)
     28c:	e0bfff15 	stw	r2,-4(fp)
     290:	00000206 	br	29c <isp_ae_handler+0xac>
     294:	00800044 	movi	r2,1
     298:	e0bfff15 	stw	r2,-4(fp)
     29c:	e0bfff17 	ldw	r2,-4(fp)
     2a0:	e0bff615 	stw	r2,-40(fp)
		gain_diff = (((cmos_gain * gain0) >> 4) - cmos_gain) >> 1;
     2a4:	d1200017 	ldw	r4,-32768(gp)
     2a8:	e17ff717 	ldw	r5,-36(fp)
     2ac:	0001ca00 	call	1ca0 <__mulsi3>
     2b0:	1006d13a 	srli	r3,r2,4
     2b4:	d0a00017 	ldw	r2,-32768(gp)
     2b8:	1885c83a 	sub	r2,r3,r2
     2bc:	1004d07a 	srli	r2,r2,1
     2c0:	e0bff515 	stw	r2,-44(fp)
		gain_diff = gain_diff > 0 ? gain_diff : 1;
     2c4:	e0bff517 	ldw	r2,-44(fp)
     2c8:	1005003a 	cmpeq	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <isp_ae_handler+0xec>
     2d0:	e0bff517 	ldw	r2,-44(fp)
     2d4:	e0bffe15 	stw	r2,-8(fp)
     2d8:	00000206 	br	2e4 <isp_ae_handler+0xf4>
     2dc:	00800044 	movi	r2,1
     2e0:	e0bffe15 	stw	r2,-8(fp)
     2e4:	e0bffe17 	ldw	r2,-8(fp)
     2e8:	e0bff515 	stw	r2,-44(fp)
		if (cmos_exposure < 0x3ff) {
     2ec:	d0a00117 	ldw	r2,-32764(gp)
     2f0:	1080ffe8 	cmpgeui	r2,r2,1023
     2f4:	10000d1e 	bne	r2,zero,32c <isp_ae_handler+0x13c>
			if (cmos_exposure + expo_diff > 0x3ff)
     2f8:	d0e00117 	ldw	r3,-32764(gp)
     2fc:	e0bff617 	ldw	r2,-40(fp)
     300:	1885883a 	add	r2,r3,r2
     304:	10810030 	cmpltui	r2,r2,1024
     308:	1000031e 	bne	r2,zero,318 <isp_ae_handler+0x128>
				cmos_exposure = 0x3ff;
     30c:	0080ffc4 	movi	r2,1023
     310:	d0a00115 	stw	r2,-32764(gp)
     314:	00001406 	br	368 <isp_ae_handler+0x178>
			else
				cmos_exposure = cmos_exposure + expo_diff;
     318:	d0a00117 	ldw	r2,-32764(gp)
     31c:	e0fff617 	ldw	r3,-40(fp)
     320:	10c5883a 	add	r2,r2,r3
     324:	d0a00115 	stw	r2,-32764(gp)
     328:	00000f06 	br	368 <isp_ae_handler+0x178>
		}
		else if (cmos_gain < 0x3ff) {
     32c:	d0a00017 	ldw	r2,-32768(gp)
     330:	1080ffe8 	cmpgeui	r2,r2,1023
     334:	10000c1e 	bne	r2,zero,368 <isp_ae_handler+0x178>
			if (cmos_gain + gain_diff > 0x3ff)
     338:	d0e00017 	ldw	r3,-32768(gp)
     33c:	e0bff517 	ldw	r2,-44(fp)
     340:	1885883a 	add	r2,r3,r2
     344:	10810030 	cmpltui	r2,r2,1024
     348:	1000031e 	bne	r2,zero,358 <isp_ae_handler+0x168>
				cmos_gain = 0x3ff;
     34c:	0080ffc4 	movi	r2,1023
     350:	d0a00015 	stw	r2,-32768(gp)
     354:	00000406 	br	368 <isp_ae_handler+0x178>
			else
				cmos_gain = cmos_gain + gain_diff;
     358:	d0a00017 	ldw	r2,-32768(gp)
     35c:	e0fff517 	ldw	r3,-44(fp)
     360:	10c5883a 	add	r2,r2,r3
     364:	d0a00015 	stw	r2,-32768(gp)
		}
		cmos_set_exposure(cmos_exposure);
     368:	d1200117 	ldw	r4,-32764(gp)
     36c:	0001aa00 	call	1aa0 <cmos_set_exposure>
		cmos_set_gain(cmos_gain);
     370:	d1200017 	ldw	r4,-32768(gp)
     374:	0001b040 	call	1b04 <cmos_set_gain>
     378:	00004806 	br	49c <isp_ae_handler+0x2ac>
	}
	else if (gain0 < 12) {
     37c:	e0bff717 	ldw	r2,-36(fp)
     380:	10800328 	cmpgeui	r2,r2,12
     384:	1000451e 	bne	r2,zero,49c <isp_ae_handler+0x2ac>
		expo_diff = (cmos_exposure - ((cmos_exposure * gain0) >> 4)) >> 1;
     388:	d4200117 	ldw	r16,-32764(gp)
     38c:	d1200117 	ldw	r4,-32764(gp)
     390:	e17ff717 	ldw	r5,-36(fp)
     394:	0001ca00 	call	1ca0 <__mulsi3>
     398:	1004d13a 	srli	r2,r2,4
     39c:	8085c83a 	sub	r2,r16,r2
     3a0:	1004d07a 	srli	r2,r2,1
     3a4:	e0bff615 	stw	r2,-40(fp)
		expo_diff = expo_diff > 0 ? expo_diff : 1;
     3a8:	e0bff617 	ldw	r2,-40(fp)
     3ac:	1005003a 	cmpeq	r2,r2,zero
     3b0:	1000031e 	bne	r2,zero,3c0 <isp_ae_handler+0x1d0>
     3b4:	e0bff617 	ldw	r2,-40(fp)
     3b8:	e0bffd15 	stw	r2,-12(fp)
     3bc:	00000206 	br	3c8 <isp_ae_handler+0x1d8>
     3c0:	00800044 	movi	r2,1
     3c4:	e0bffd15 	stw	r2,-12(fp)
     3c8:	e0bffd17 	ldw	r2,-12(fp)
     3cc:	e0bff615 	stw	r2,-40(fp)
		gain_diff = (cmos_gain - ((cmos_gain * gain0) >> 4)) >> 1;
     3d0:	d4200017 	ldw	r16,-32768(gp)
     3d4:	d1200017 	ldw	r4,-32768(gp)
     3d8:	e17ff717 	ldw	r5,-36(fp)
     3dc:	0001ca00 	call	1ca0 <__mulsi3>
     3e0:	1004d13a 	srli	r2,r2,4
     3e4:	8085c83a 	sub	r2,r16,r2
     3e8:	1004d07a 	srli	r2,r2,1
     3ec:	e0bff515 	stw	r2,-44(fp)
		gain_diff = gain_diff > 0 ? gain_diff : 1;
     3f0:	e0bff517 	ldw	r2,-44(fp)
     3f4:	1005003a 	cmpeq	r2,r2,zero
     3f8:	1000031e 	bne	r2,zero,408 <isp_ae_handler+0x218>
     3fc:	e0bff517 	ldw	r2,-44(fp)
     400:	e0bffc15 	stw	r2,-16(fp)
     404:	00000206 	br	410 <isp_ae_handler+0x220>
     408:	00800044 	movi	r2,1
     40c:	e0bffc15 	stw	r2,-16(fp)
     410:	e0bffc17 	ldw	r2,-16(fp)
     414:	e0bff515 	stw	r2,-44(fp)
		if (cmos_gain > 16) {
     418:	d0a00017 	ldw	r2,-32768(gp)
     41c:	10800470 	cmpltui	r2,r2,17
     420:	10000c1e 	bne	r2,zero,454 <isp_ae_handler+0x264>
			if (cmos_gain < 16 + gain_diff)
     424:	e0bff517 	ldw	r2,-44(fp)
     428:	10c00404 	addi	r3,r2,16
     42c:	d0a00017 	ldw	r2,-32768(gp)
     430:	10c0032e 	bgeu	r2,r3,440 <isp_ae_handler+0x250>
				cmos_gain = 16;
     434:	00800404 	movi	r2,16
     438:	d0a00015 	stw	r2,-32768(gp)
     43c:	00001306 	br	48c <isp_ae_handler+0x29c>
			else
				cmos_gain = cmos_gain - gain_diff;
     440:	d0a00017 	ldw	r2,-32768(gp)
     444:	e0fff517 	ldw	r3,-44(fp)
     448:	10c5c83a 	sub	r2,r2,r3
     44c:	d0a00015 	stw	r2,-32768(gp)
     450:	00000e06 	br	48c <isp_ae_handler+0x29c>
		}
		else if (cmos_exposure > 1) {
     454:	d0a00117 	ldw	r2,-32764(gp)
     458:	108000b0 	cmpltui	r2,r2,2
     45c:	10000b1e 	bne	r2,zero,48c <isp_ae_handler+0x29c>
			if (cmos_exposure < 1 + expo_diff)
     460:	e0bff617 	ldw	r2,-40(fp)
     464:	10c00044 	addi	r3,r2,1
     468:	d0a00117 	ldw	r2,-32764(gp)
     46c:	10c0032e 	bgeu	r2,r3,47c <isp_ae_handler+0x28c>
				cmos_exposure = 1;
     470:	00800044 	movi	r2,1
     474:	d0a00115 	stw	r2,-32764(gp)
     478:	00000406 	br	48c <isp_ae_handler+0x29c>
			else
				cmos_exposure = cmos_exposure - expo_diff;
     47c:	d0a00117 	ldw	r2,-32764(gp)
     480:	e0fff617 	ldw	r3,-40(fp)
     484:	10c5c83a 	sub	r2,r2,r3
     488:	d0a00115 	stw	r2,-32764(gp)
		}
		cmos_set_exposure(cmos_exposure);
     48c:	d1200117 	ldw	r4,-32764(gp)
     490:	0001aa00 	call	1aa0 <cmos_set_exposure>
		cmos_set_gain(cmos_gain);
     494:	d1200017 	ldw	r4,-32768(gp)
     498:	0001b040 	call	1b04 <cmos_set_gain>
	}
}
     49c:	e037883a 	mov	sp,fp
     4a0:	dfc00217 	ldw	ra,8(sp)
     4a4:	df000117 	ldw	fp,4(sp)
     4a8:	dc000017 	ldw	r16,0(sp)
     4ac:	dec00304 	addi	sp,sp,12
     4b0:	f800283a 	ret

000004b4 <isp_awb_handler>:


void isp_awb_handler(void* base)
{
     4b4:	defff704 	addi	sp,sp,-36
     4b8:	dfc00815 	stw	ra,32(sp)
     4bc:	df000715 	stw	fp,28(sp)
     4c0:	df000704 	addi	fp,sp,28
     4c4:	e13fff15 	stw	r4,-4(fp)
	unsigned pix_cnt = IORD(base, ISP_REG_STAT_AWB_PIX_CNT);
     4c8:	e0bfff17 	ldw	r2,-4(fp)
     4cc:	10801704 	addi	r2,r2,92
     4d0:	10800037 	ldwio	r2,0(r2)
     4d4:	e0bffe15 	stw	r2,-8(fp)
	unsigned sum_r = IORD(base, ISP_REG_STAT_AWB_SUM_R);
     4d8:	e0bfff17 	ldw	r2,-4(fp)
     4dc:	10801804 	addi	r2,r2,96
     4e0:	10800037 	ldwio	r2,0(r2)
     4e4:	e0bffd15 	stw	r2,-12(fp)
	unsigned sum_g = IORD(base, ISP_REG_STAT_AWB_SUM_G);
     4e8:	e0bfff17 	ldw	r2,-4(fp)
     4ec:	10801904 	addi	r2,r2,100
     4f0:	10800037 	ldwio	r2,0(r2)
     4f4:	e0bffc15 	stw	r2,-16(fp)
	unsigned sum_b = IORD(base, ISP_REG_STAT_AWB_SUM_B);
     4f8:	e0bfff17 	ldw	r2,-4(fp)
     4fc:	10801a04 	addi	r2,r2,104
     500:	10800037 	ldwio	r2,0(r2)
     504:	e0bffb15 	stw	r2,-20(fp)

	unsigned r_gain0 = (sum_g << 4) / sum_r;
     508:	e0bffc17 	ldw	r2,-16(fp)
     50c:	1008913a 	slli	r4,r2,4
     510:	e17ffd17 	ldw	r5,-12(fp)
     514:	0001c900 	call	1c90 <__udivsi3>
     518:	e0bffa15 	stw	r2,-24(fp)
	unsigned b_gain0 = (sum_g << 4) / sum_b;
     51c:	e0bffc17 	ldw	r2,-16(fp)
     520:	1008913a 	slli	r4,r2,4
     524:	e17ffb17 	ldw	r5,-20(fp)
     528:	0001c900 	call	1c90 <__udivsi3>
     52c:	e0bff915 	stw	r2,-28(fp)

	IOWR(base, ISP_REG_WB_GGAIN, 0x10);
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10800804 	addi	r2,r2,32
     538:	1007883a 	mov	r3,r2
     53c:	00800404 	movi	r2,16
     540:	18800035 	stwio	r2,0(r3)
	IOWR(base, ISP_REG_WB_RGAIN, r_gain0);
     544:	e0bfff17 	ldw	r2,-4(fp)
     548:	10800704 	addi	r2,r2,28
     54c:	e0fffa17 	ldw	r3,-24(fp)
     550:	10c00035 	stwio	r3,0(r2)
	IOWR(base, ISP_REG_WB_BGAIN, b_gain0);
     554:	e0bfff17 	ldw	r2,-4(fp)
     558:	10800904 	addi	r2,r2,36
     55c:	e0fff917 	ldw	r3,-28(fp)
     560:	10c00035 	stwio	r3,0(r2)
}
     564:	e037883a 	mov	sp,fp
     568:	dfc00117 	ldw	ra,4(sp)
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00204 	addi	sp,sp,8
     574:	f800283a 	ret

00000578 <dvp_vi_isr>:
static unsigned char lcd_fb[480*272*2];
static unsigned char cap_fb[480*272*2];

static unsigned vi_frame_int = 0;
static void dvp_vi_isr(void* isr_context)
{
     578:	defffe04 	addi	sp,sp,-8
     57c:	df000115 	stw	fp,4(sp)
     580:	df000104 	addi	fp,sp,4
     584:	e13fff15 	stw	r4,-4(fp)
	IOWR(isr_context, VI_REG_INT_STATUS, 0);
     588:	e0bfff17 	ldw	r2,-4(fp)
     58c:	10800504 	addi	r2,r2,20
     590:	10000035 	stwio	zero,0(r2)
	vi_frame_int ++;
     594:	d0a6ab17 	ldw	r2,-25940(gp)
     598:	10800044 	addi	r2,r2,1
     59c:	d0a6ab15 	stw	r2,-25940(gp)
}
     5a0:	e037883a 	mov	sp,fp
     5a4:	df000017 	ldw	fp,0(sp)
     5a8:	dec00104 	addi	sp,sp,4
     5ac:	f800283a 	ret

000005b0 <isp_isr>:
extern void isp_ae_handler(void* base);

extern void isp_awb_handler(void* base);
static unsigned isp_frame_int = 0;
static void isp_isr(void* isr_context)
{
     5b0:	defffd04 	addi	sp,sp,-12
     5b4:	dfc00215 	stw	ra,8(sp)
     5b8:	df000115 	stw	fp,4(sp)
     5bc:	df000104 	addi	fp,sp,4
     5c0:	e13fff15 	stw	r4,-4(fp)
	IOWR(isr_context, ISP_REG_INT_STATUS, 0);
     5c4:	e0bfff17 	ldw	r2,-4(fp)
     5c8:	10801b04 	addi	r2,r2,108
     5cc:	10000035 	stwio	zero,0(r2)
	isp_frame_int ++;
     5d0:	d0a6ac17 	ldw	r2,-25936(gp)
     5d4:	10800044 	addi	r2,r2,1
     5d8:	d0a6ac15 	stw	r2,-25936(gp)
	if (0 == (isp_frame_int&1)) {
     5dc:	d0a6ac17 	ldw	r2,-25936(gp)
     5e0:	1080004c 	andi	r2,r2,1
     5e4:	1004c03a 	cmpne	r2,r2,zero
     5e8:	1000041e 	bne	r2,zero,5fc <isp_isr+0x4c>
		isp_ae_handler(isr_context);
     5ec:	e13fff17 	ldw	r4,-4(fp)
     5f0:	00001f00 	call	1f0 <isp_ae_handler>
		isp_awb_handler(isr_context);
     5f4:	e13fff17 	ldw	r4,-4(fp)
     5f8:	00004b40 	call	4b4 <isp_awb_handler>
	}
}
     5fc:	e037883a 	mov	sp,fp
     600:	dfc00117 	ldw	ra,4(sp)
     604:	df000017 	ldw	fp,0(sp)
     608:	dec00204 	addi	sp,sp,8
     60c:	f800283a 	ret

00000610 <vip_isr>:

static unsigned vip_frame_int = 0;
static void vip_isr(void* isr_context)
{
     610:	defffe04 	addi	sp,sp,-8
     614:	df000115 	stw	fp,4(sp)
     618:	df000104 	addi	fp,sp,4
     61c:	e13fff15 	stw	r4,-4(fp)
	IOWR(isr_context, VIP_REG_INT_STATUS, 0);
     620:	e0bfff17 	ldw	r2,-4(fp)
     624:	10800304 	addi	r2,r2,12
     628:	10000035 	stwio	zero,0(r2)
	vip_frame_int ++;
     62c:	d0a6ad17 	ldw	r2,-25932(gp)
     630:	10800044 	addi	r2,r2,1
     634:	d0a6ad15 	stw	r2,-25932(gp)
}
     638:	e037883a 	mov	sp,fp
     63c:	df000017 	ldw	fp,0(sp)
     640:	dec00104 	addi	sp,sp,4
     644:	f800283a 	ret

00000648 <init_vi_isp_vip_wch>:

static void init_vi_isp_vip_wch()
{
     648:	defffb04 	addi	sp,sp,-20
     64c:	dfc00415 	stw	ra,16(sp)
     650:	df000315 	stw	fp,12(sp)
     654:	df000304 	addi	fp,sp,12
	IOWR(DVP_VI_BASE, VI_REG_RESET, 1);
     658:	00c08034 	movhi	r3,512
     65c:	18d40004 	addi	r3,r3,20480
     660:	00800044 	movi	r2,1
     664:	18800035 	stwio	r2,0(r3)
	IOWR(ISP_BASE, ISP_REG_RESET, 1);
     668:	00c08034 	movhi	r3,512
     66c:	00800044 	movi	r2,1
     670:	18800035 	stwio	r2,0(r3)
	IOWR(VIP_BASE, VIP_REG_RESET, 1);
     674:	00c08034 	movhi	r3,512
     678:	18d44004 	addi	r3,r3,20736
     67c:	00800044 	movi	r2,1
     680:	18800035 	stwio	r2,0(r3)
	IOWR(DVP_WCH_BASE, WCH_REG_RESET, 1);
     684:	00c08034 	movhi	r3,512
     688:	18d48404 	addi	r3,r3,21008
     68c:	00800044 	movi	r2,1
     690:	18800035 	stwio	r2,0(r3)

	IOWR(DVP_VI_BASE, VI_REG_INT_MASK, 0xffff);
     694:	00c08034 	movhi	r3,512
     698:	18d40604 	addi	r3,r3,20504
     69c:	00bfffd4 	movui	r2,65535
     6a0:	18800035 	stwio	r2,0(r3)
	IOWR(ISP_BASE, ISP_REG_INT_MASK, 0xffff);
     6a4:	00c08034 	movhi	r3,512
     6a8:	18c01c04 	addi	r3,r3,112
     6ac:	00bfffd4 	movui	r2,65535
     6b0:	18800035 	stwio	r2,0(r3)
	IOWR(VIP_BASE, VIP_REG_INT_MASK, 0xffff);
     6b4:	00c08034 	movhi	r3,512
     6b8:	18d44404 	addi	r3,r3,20752
     6bc:	00bfffd4 	movui	r2,65535
     6c0:	18800035 	stwio	r2,0(r3)
	usleep(100000);
     6c4:	010000b4 	movhi	r4,2
     6c8:	2121a804 	addi	r4,r4,-31072
     6cc:	000c2180 	call	c218 <usleep>

	IOWR(DVP_VI_BASE, VI_REG_COLORBAR_EN, 0);
     6d0:	00808034 	movhi	r2,512
     6d4:	10940404 	addi	r2,r2,20496
     6d8:	10000035 	stwio	zero,0(r2)

	IOWR(DVP_WCH_BASE, WCH_REG_BUFF_ADDR, cap_fb);
     6dc:	00c00174 	movhi	r3,5
     6e0:	18c58b04 	addi	r3,r3,5676
     6e4:	00808034 	movhi	r2,512
     6e8:	10948504 	addi	r2,r2,21012
     6ec:	10c00035 	stwio	r3,0(r2)
	IOWR(DVP_WCH_BASE, WCH_REG_BUFF_SIZE, sizeof(cap_fb));
     6f0:	00c08034 	movhi	r3,512
     6f4:	18d48604 	addi	r3,r3,21016
     6f8:	00800134 	movhi	r2,4
     6fc:	10bf0004 	addi	r2,r2,-1024
     700:	18800035 	stwio	r2,0(r3)
	printf("cap_buf = %08X, dvp_reg1 = %08X\n", cap_fb, IORD(DVP_WCH_BASE, WCH_REG_BUFF_ADDR));
     704:	00808034 	movhi	r2,512
     708:	10948504 	addi	r2,r2,21012
     70c:	11800037 	ldwio	r6,0(r2)
     710:	01000074 	movhi	r4,1
     714:	21381d04 	addi	r4,r4,-8076
     718:	01400174 	movhi	r5,5
     71c:	29458b04 	addi	r5,r5,5676
     720:	0001cd80 	call	1cd8 <printf>
	printf("cap_siz = %08X, dvp_reg2 = %08X\n", sizeof(cap_fb), IORD(DVP_WCH_BASE, WCH_REG_BUFF_SIZE));
     724:	00808034 	movhi	r2,512
     728:	10948604 	addi	r2,r2,21016
     72c:	11800037 	ldwio	r6,0(r2)
     730:	01000074 	movhi	r4,1
     734:	21382604 	addi	r4,r4,-8040
     738:	01400134 	movhi	r5,4
     73c:	297f0004 	addi	r5,r5,-1024
     740:	0001cd80 	call	1cd8 <printf>

	unsigned int isp_top_en = 0;
     744:	e03fff15 	stw	zero,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_BLC_EN;
     748:	e0bfff17 	ldw	r2,-4(fp)
     74c:	10800054 	ori	r2,r2,1
     750:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_BNR_EN;
     754:	e0bfff17 	ldw	r2,-4(fp)
     758:	10800094 	ori	r2,r2,2
     75c:	e0bfff15 	stw	r2,-4(fp)
	//isp_top_en |= ISP_REG_TOP_EN_BIT_DGAIN_EN;
	isp_top_en |= ISP_REG_TOP_EN_BIT_DEMOSIC_EN;
     760:	e0bfff17 	ldw	r2,-4(fp)
     764:	10800214 	ori	r2,r2,8
     768:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_WB_EN;
     76c:	e0bfff17 	ldw	r2,-4(fp)
     770:	10800414 	ori	r2,r2,16
     774:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_CCM_EN;
     778:	e0bfff17 	ldw	r2,-4(fp)
     77c:	10800814 	ori	r2,r2,32
     780:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_CSC_EN;
     784:	e0bfff17 	ldw	r2,-4(fp)
     788:	10801014 	ori	r2,r2,64
     78c:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_GAMMA_EN;
     790:	e0bfff17 	ldw	r2,-4(fp)
     794:	10802014 	ori	r2,r2,128
     798:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_EE_EN;
     79c:	e0bfff17 	ldw	r2,-4(fp)
     7a0:	10804014 	ori	r2,r2,256
     7a4:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_STAT_AE_EN;
     7a8:	e0bfff17 	ldw	r2,-4(fp)
     7ac:	10808014 	ori	r2,r2,512
     7b0:	e0bfff15 	stw	r2,-4(fp)
	isp_top_en |= ISP_REG_TOP_EN_BIT_STAT_AWB_EN;
     7b4:	e0bfff17 	ldw	r2,-4(fp)
     7b8:	10810014 	ori	r2,r2,1024
     7bc:	e0bfff15 	stw	r2,-4(fp)
	IOWR(ISP_BASE, ISP_REG_TOP_EN, isp_top_en);
     7c0:	e0ffff17 	ldw	r3,-4(fp)
     7c4:	00808034 	movhi	r2,512
     7c8:	10800104 	addi	r2,r2,4
     7cc:	10c00035 	stwio	r3,0(r2)

	unsigned int vip_top_en = 0;
     7d0:	e03ffe15 	stw	zero,-8(fp)
	vip_top_en |= VIP_REG_TOP_EN_BIT_HIST_EQU_EN;
     7d4:	e0bffe17 	ldw	r2,-8(fp)
     7d8:	10800054 	ori	r2,r2,1
     7dc:	e0bffe15 	stw	r2,-8(fp)
	//vip_top_en |= VIP_REG_TOP_EN_BIT_SOBEL_EN;
	vip_top_en |= VIP_REG_TOP_EN_BIT_YUV2RGB_EN;
     7e0:	e0bffe17 	ldw	r2,-8(fp)
     7e4:	10800114 	ori	r2,r2,4
     7e8:	e0bffe15 	stw	r2,-8(fp)
	vip_top_en |= VIP_REG_TOP_EN_BIT_DSCALE_EN;
     7ec:	e0bffe17 	ldw	r2,-8(fp)
     7f0:	10800214 	ori	r2,r2,8
     7f4:	e0bffe15 	stw	r2,-8(fp)
	IOWR(VIP_BASE, VIP_REG_TOP_EN, vip_top_en);
     7f8:	e0fffe17 	ldw	r3,-8(fp)
     7fc:	00808034 	movhi	r2,512
     800:	10944104 	addi	r2,r2,20740
     804:	10c00035 	stwio	r3,0(r2)

	IOWR(DVP_VI_BASE, VI_REG_RESET, 0);
     808:	00808034 	movhi	r2,512
     80c:	10940004 	addi	r2,r2,20480
     810:	10000035 	stwio	zero,0(r2)
	IOWR(ISP_BASE, ISP_REG_RESET, 0);
     814:	00808034 	movhi	r2,512
     818:	10000035 	stwio	zero,0(r2)
	IOWR(VIP_BASE, VIP_REG_RESET, 0);
     81c:	00808034 	movhi	r2,512
     820:	10944004 	addi	r2,r2,20736
     824:	10000035 	stwio	zero,0(r2)
	IOWR(DVP_WCH_BASE, WCH_REG_RESET, 0);
     828:	00808034 	movhi	r2,512
     82c:	10948404 	addi	r2,r2,21008
     830:	10000035 	stwio	zero,0(r2)
	printf("vi_reset  = %08X\n", IORD(DVP_VI_BASE, VI_REG_RESET));
     834:	00808034 	movhi	r2,512
     838:	10940004 	addi	r2,r2,20480
     83c:	11400037 	ldwio	r5,0(r2)
     840:	01000074 	movhi	r4,1
     844:	21382f04 	addi	r4,r4,-8004
     848:	0001cd80 	call	1cd8 <printf>
	printf("isp_reset = %08X\n", IORD(ISP_BASE, ISP_REG_RESET));
     84c:	00808034 	movhi	r2,512
     850:	11400037 	ldwio	r5,0(r2)
     854:	01000074 	movhi	r4,1
     858:	21383404 	addi	r4,r4,-7984
     85c:	0001cd80 	call	1cd8 <printf>
	printf("vip_reset = %08X\n", IORD(VIP_BASE, VIP_REG_RESET));
     860:	00808034 	movhi	r2,512
     864:	10944004 	addi	r2,r2,20736
     868:	11400037 	ldwio	r5,0(r2)
     86c:	01000074 	movhi	r4,1
     870:	21383904 	addi	r4,r4,-7964
     874:	0001cd80 	call	1cd8 <printf>
	printf("wch_reset = %08X\n", IORD(DVP_WCH_BASE, WCH_REG_RESET));
     878:	00808034 	movhi	r2,512
     87c:	10948404 	addi	r2,r2,21008
     880:	11400037 	ldwio	r5,0(r2)
     884:	01000074 	movhi	r4,1
     888:	21383e04 	addi	r4,r4,-7944
     88c:	0001cd80 	call	1cd8 <printf>

	alt_ic_isr_register(DVP_VI_IRQ_INTERRUPT_CONTROLLER_ID, DVP_VI_IRQ, dvp_vi_isr, DVP_VI_BASE, 0x0);
     890:	d8000015 	stw	zero,0(sp)
     894:	0009883a 	mov	r4,zero
     898:	014000c4 	movi	r5,3
     89c:	01800034 	movhi	r6,0
     8a0:	31815e04 	addi	r6,r6,1400
     8a4:	01c08034 	movhi	r7,512
     8a8:	39d40004 	addi	r7,r7,20480
     8ac:	000b8840 	call	b884 <alt_ic_isr_register>
	alt_ic_isr_register(ISP_IRQ_INTERRUPT_CONTROLLER_ID, ISP_IRQ, isp_isr, ISP_BASE, 0x0);
     8b0:	d8000015 	stw	zero,0(sp)
     8b4:	0009883a 	mov	r4,zero
     8b8:	01400044 	movi	r5,1
     8bc:	01800034 	movhi	r6,0
     8c0:	31816c04 	addi	r6,r6,1456
     8c4:	01c08034 	movhi	r7,512
     8c8:	000b8840 	call	b884 <alt_ic_isr_register>
	alt_ic_isr_register(VIP_IRQ_INTERRUPT_CONTROLLER_ID, VIP_IRQ, vip_isr, VIP_BASE, 0x0);
     8cc:	d8000015 	stw	zero,0(sp)
     8d0:	0009883a 	mov	r4,zero
     8d4:	01400084 	movi	r5,2
     8d8:	01800034 	movhi	r6,0
     8dc:	31818404 	addi	r6,r6,1552
     8e0:	01c08034 	movhi	r7,512
     8e4:	39d44004 	addi	r7,r7,20736
     8e8:	000b8840 	call	b884 <alt_ic_isr_register>
	IOWR(DVP_VI_BASE, VI_REG_INT_MASK, 0x0);
     8ec:	00808034 	movhi	r2,512
     8f0:	10940604 	addi	r2,r2,20504
     8f4:	10000035 	stwio	zero,0(r2)
	IOWR(ISP_BASE, ISP_REG_INT_MASK, 0x0);
     8f8:	00808034 	movhi	r2,512
     8fc:	10801c04 	addi	r2,r2,112
     900:	10000035 	stwio	zero,0(r2)
	IOWR(VIP_BASE, VIP_REG_INT_MASK, 0x0);
     904:	00808034 	movhi	r2,512
     908:	10944404 	addi	r2,r2,20752
     90c:	10000035 	stwio	zero,0(r2)
}
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <main>:

extern int ov5640_init_raw_1280_960_30fps_crop_960_544();


int main(){
     924:	defff504 	addi	sp,sp,-44
     928:	dfc00a15 	stw	ra,40(sp)
     92c:	df000915 	stw	fp,36(sp)
     930:	df000904 	addi	fp,sp,36

	printf("Hello Nios2\n");
     934:	01000074 	movhi	r4,1
     938:	21384304 	addi	r4,r4,-7924
     93c:	0001df00 	call	1df0 <puts>
	IOWR(LCD_CONTROLLER_BASE, LCD_REG_RESET, 1);
     940:	00808034 	movhi	r2,512
     944:	10948804 	addi	r2,r2,21024
     948:	00c00044 	movi	r3,1
     94c:	10c00035 	stwio	r3,0(r2)
	ov5640_init_raw_1280_960_30fps_crop_960_544();
     950:	000142c0 	call	142c <ov5640_init_raw_1280_960_30fps_crop_960_544>
	usleep(100000);
     954:	010000b4 	movhi	r4,2
     958:	2121a804 	addi	r4,r4,-31072
     95c:	000c2180 	call	c218 <usleep>

	unsigned short* ptr = lcd_fb;
     960:	00800074 	movhi	r2,1
     964:	10868b04 	addi	r2,r2,6700
     968:	e0bfff15 	stw	r2,-4(fp)
	unsigned x,y;
	for (y = 0; y < 272; y ++)
     96c:	e03ffd15 	stw	zero,-12(fp)
     970:	00004106 	br	a78 <main+0x154>
		for (x = 0; x < 480; x++) {
     974:	e03ffe15 	stw	zero,-8(fp)
     978:	00003906 	br	a60 <main+0x13c>
			if (x < 480 * 1 / 8)
     97c:	e0bffe17 	ldw	r2,-8(fp)
     980:	10800f28 	cmpgeui	r2,r2,60
     984:	1000041e 	bne	r2,zero,998 <main+0x74>
				*ptr = 0xffff;
     988:	e0ffff17 	ldw	r3,-4(fp)
     98c:	00bfffc4 	movi	r2,-1
     990:	1880000d 	sth	r2,0(r3)
     994:	00002c06 	br	a48 <main+0x124>
			else if (x < 480 * 2 / 8)
     998:	e0bffe17 	ldw	r2,-8(fp)
     99c:	10801e28 	cmpgeui	r2,r2,120
     9a0:	1000041e 	bne	r2,zero,9b4 <main+0x90>
				*ptr = 0xffe0;
     9a4:	e0ffff17 	ldw	r3,-4(fp)
     9a8:	00bff804 	movi	r2,-32
     9ac:	1880000d 	sth	r2,0(r3)
     9b0:	00002506 	br	a48 <main+0x124>
			else if (x < 480 * 3 / 8)
     9b4:	e0bffe17 	ldw	r2,-8(fp)
     9b8:	10802d28 	cmpgeui	r2,r2,180
     9bc:	1000041e 	bne	r2,zero,9d0 <main+0xac>
				*ptr = 0xf81f;
     9c0:	e0ffff17 	ldw	r3,-4(fp)
     9c4:	00be07c4 	movi	r2,-2017
     9c8:	1880000d 	sth	r2,0(r3)
     9cc:	00001e06 	br	a48 <main+0x124>
			else if (x < 480 * 4 / 8)
     9d0:	e0bffe17 	ldw	r2,-8(fp)
     9d4:	10803c28 	cmpgeui	r2,r2,240
     9d8:	1000041e 	bne	r2,zero,9ec <main+0xc8>
				*ptr = 0xf800;
     9dc:	e0ffff17 	ldw	r3,-4(fp)
     9e0:	00be0004 	movi	r2,-2048
     9e4:	1880000d 	sth	r2,0(r3)
     9e8:	00001706 	br	a48 <main+0x124>
			else if (x < 480 * 5 / 8)
     9ec:	e0bffe17 	ldw	r2,-8(fp)
     9f0:	10804b28 	cmpgeui	r2,r2,300
     9f4:	1000041e 	bne	r2,zero,a08 <main+0xe4>
				*ptr = 0x07ff;
     9f8:	e0ffff17 	ldw	r3,-4(fp)
     9fc:	0081ffc4 	movi	r2,2047
     a00:	1880000d 	sth	r2,0(r3)
     a04:	00001006 	br	a48 <main+0x124>
			else if (x < 480 * 6 / 8)
     a08:	e0bffe17 	ldw	r2,-8(fp)
     a0c:	10805a28 	cmpgeui	r2,r2,360
     a10:	1000041e 	bne	r2,zero,a24 <main+0x100>
				*ptr = 0x07e0;
     a14:	e0ffff17 	ldw	r3,-4(fp)
     a18:	0081f804 	movi	r2,2016
     a1c:	1880000d 	sth	r2,0(r3)
     a20:	00000906 	br	a48 <main+0x124>
			else if (x < 480 * 7 / 8)
     a24:	e0bffe17 	ldw	r2,-8(fp)
     a28:	10806928 	cmpgeui	r2,r2,420
     a2c:	1000041e 	bne	r2,zero,a40 <main+0x11c>
				*ptr = 0x001f;
     a30:	e0ffff17 	ldw	r3,-4(fp)
     a34:	008007c4 	movi	r2,31
     a38:	1880000d 	sth	r2,0(r3)
     a3c:	00000206 	br	a48 <main+0x124>
			else
				*ptr = 0x0000;
     a40:	e0bfff17 	ldw	r2,-4(fp)
     a44:	1000000d 	sth	zero,0(r2)
			ptr++;
     a48:	e0bfff17 	ldw	r2,-4(fp)
     a4c:	10800084 	addi	r2,r2,2
     a50:	e0bfff15 	stw	r2,-4(fp)
	usleep(100000);

	unsigned short* ptr = lcd_fb;
	unsigned x,y;
	for (y = 0; y < 272; y ++)
		for (x = 0; x < 480; x++) {
     a54:	e0bffe17 	ldw	r2,-8(fp)
     a58:	10800044 	addi	r2,r2,1
     a5c:	e0bffe15 	stw	r2,-8(fp)
     a60:	e0bffe17 	ldw	r2,-8(fp)
     a64:	10807830 	cmpltui	r2,r2,480
     a68:	103fc41e 	bne	r2,zero,97c <main+0x58>
	ov5640_init_raw_1280_960_30fps_crop_960_544();
	usleep(100000);

	unsigned short* ptr = lcd_fb;
	unsigned x,y;
	for (y = 0; y < 272; y ++)
     a6c:	e0bffd17 	ldw	r2,-12(fp)
     a70:	10800044 	addi	r2,r2,1
     a74:	e0bffd15 	stw	r2,-12(fp)
     a78:	e0bffd17 	ldw	r2,-12(fp)
     a7c:	10804430 	cmpltui	r2,r2,272
     a80:	103fbc1e 	bne	r2,zero,974 <main+0x50>
			else
				*ptr = 0x0000;
			ptr++;
		}

	IOWR(LCD_CONTROLLER_BASE, LCD_REG_FB_ADDR, cap_fb);
     a84:	00c00174 	movhi	r3,5
     a88:	18c58b04 	addi	r3,r3,5676
     a8c:	00808034 	movhi	r2,512
     a90:	10948904 	addi	r2,r2,21028
     a94:	10c00035 	stwio	r3,0(r2)
	IOWR(LCD_CONTROLLER_BASE, LCD_REG_RESET, 0);
     a98:	00808034 	movhi	r2,512
     a9c:	10948804 	addi	r2,r2,21024
     aa0:	10000035 	stwio	zero,0(r2)
	printf("lcd_fb = %08X, lcd_reg1 = %08X\n", cap_fb, IORD(LCD_CONTROLLER_BASE, LCD_REG_FB_ADDR));
     aa4:	00808034 	movhi	r2,512
     aa8:	10948904 	addi	r2,r2,21028
     aac:	11800037 	ldwio	r6,0(r2)
     ab0:	01000074 	movhi	r4,1
     ab4:	21384604 	addi	r4,r4,-7912
     ab8:	01400174 	movhi	r5,5
     abc:	29458b04 	addi	r5,r5,5676
     ac0:	0001cd80 	call	1cd8 <printf>
	printf("lcd_reset = %08X(lcd_reg0)\n", IORD(LCD_CONTROLLER_BASE, LCD_REG_RESET));
     ac4:	00808034 	movhi	r2,512
     ac8:	10948804 	addi	r2,r2,21024
     acc:	11400037 	ldwio	r5,0(r2)
     ad0:	01000074 	movhi	r4,1
     ad4:	21384e04 	addi	r4,r4,-7880
     ad8:	0001cd80 	call	1cd8 <printf>

	init_vi_isp_vip_wch();
     adc:	00006480 	call	648 <init_vi_isp_vip_wch>

	while(1) {
		usleep(1000000);
     ae0:	010003f4 	movhi	r4,15
     ae4:	21109004 	addi	r4,r4,16960
     ae8:	000c2180 	call	c218 <usleep>
		IOWR(LCD_CONTROLLER_BASE, LCD_REG_FB_ADDR, lcd_fb);
     aec:	00c00074 	movhi	r3,1
     af0:	18c68b04 	addi	r3,r3,6700
     af4:	00808034 	movhi	r2,512
     af8:	10948904 	addi	r2,r2,21028
     afc:	10c00035 	stwio	r3,0(r2)
		usleep(100000);
     b00:	010000b4 	movhi	r4,2
     b04:	2121a804 	addi	r4,r4,-31072
     b08:	000c2180 	call	c218 <usleep>
		IOWR(LCD_CONTROLLER_BASE, LCD_REG_FB_ADDR, cap_fb);
     b0c:	00c00174 	movhi	r3,5
     b10:	18c58b04 	addi	r3,r3,5676
     b14:	00808034 	movhi	r2,512
     b18:	10948904 	addi	r2,r2,21028
     b1c:	10c00035 	stwio	r3,0(r2)
		printf("%u x %u, frame %u, interrupt vi %u, isp %u, vip %u\n",
     b20:	00808034 	movhi	r2,512
     b24:	10940104 	addi	r2,r2,20484
     b28:	11400037 	ldwio	r5,0(r2)
     b2c:	00808034 	movhi	r2,512
     b30:	10940204 	addi	r2,r2,20488
     b34:	11800037 	ldwio	r6,0(r2)
     b38:	00808034 	movhi	r2,512
     b3c:	10940304 	addi	r2,r2,20492
     b40:	11c00037 	ldwio	r7,0(r2)
     b44:	d0a6ab17 	ldw	r2,-25940(gp)
     b48:	d0e6ac17 	ldw	r3,-25936(gp)
     b4c:	d126ad17 	ldw	r4,-25932(gp)
     b50:	d8800015 	stw	r2,0(sp)
     b54:	d8c00115 	stw	r3,4(sp)
     b58:	d9000215 	stw	r4,8(sp)
     b5c:	01000074 	movhi	r4,1
     b60:	21385504 	addi	r4,r4,-7852
     b64:	0001cd80 	call	1cd8 <printf>
				IORD(DVP_VI_BASE, VI_REG_WIDTH),
				IORD(DVP_VI_BASE, VI_REG_HEIGHT),
				IORD(DVP_VI_BASE, VI_REG_FRAME_CNT),
				vi_frame_int, isp_frame_int, vip_frame_int);
		printf("AE HIST [");
     b68:	01000074 	movhi	r4,1
     b6c:	21386204 	addi	r4,r4,-7800
     b70:	0001cd80 	call	1cd8 <printf>
		int i;
		unsigned sum = 0;
     b74:	e03ffb15 	stw	zero,-20(fp)
		for (i = 0; i < ISP_REG_STAT_AE_HIST_SIZE; i++) {
     b78:	e03ffc15 	stw	zero,-16(fp)
     b7c:	00001a06 	br	be8 <main+0x2c4>
			unsigned data = IORD(ISP_BASE, ISP_REG_STAT_AE_HIST_ADDR+i);
     b80:	e0bffc17 	ldw	r2,-16(fp)
     b84:	1085883a 	add	r2,r2,r2
     b88:	1085883a 	add	r2,r2,r2
     b8c:	1007883a 	mov	r3,r2
     b90:	00808034 	movhi	r2,512
     b94:	10840004 	addi	r2,r2,4096
     b98:	1885883a 	add	r2,r3,r2
     b9c:	10800037 	ldwio	r2,0(r2)
     ba0:	e0bffa15 	stw	r2,-24(fp)
			sum += data;
     ba4:	e0fffb17 	ldw	r3,-20(fp)
     ba8:	e0bffa17 	ldw	r2,-24(fp)
     bac:	1885883a 	add	r2,r3,r2
     bb0:	e0bffb15 	stw	r2,-20(fp)
			if (i >= 48 && i < 48 + 32)
     bb4:	e0bffc17 	ldw	r2,-16(fp)
     bb8:	10800c10 	cmplti	r2,r2,48
     bbc:	1000071e 	bne	r2,zero,bdc <main+0x2b8>
     bc0:	e0bffc17 	ldw	r2,-16(fp)
     bc4:	10801408 	cmpgei	r2,r2,80
     bc8:	1000041e 	bne	r2,zero,bdc <main+0x2b8>
				printf("%u, ", data);
     bcc:	01000074 	movhi	r4,1
     bd0:	21386504 	addi	r4,r4,-7788
     bd4:	e17ffa17 	ldw	r5,-24(fp)
     bd8:	0001cd80 	call	1cd8 <printf>
				IORD(DVP_VI_BASE, VI_REG_FRAME_CNT),
				vi_frame_int, isp_frame_int, vip_frame_int);
		printf("AE HIST [");
		int i;
		unsigned sum = 0;
		for (i = 0; i < ISP_REG_STAT_AE_HIST_SIZE; i++) {
     bdc:	e0bffc17 	ldw	r2,-16(fp)
     be0:	10800044 	addi	r2,r2,1
     be4:	e0bffc15 	stw	r2,-16(fp)
     be8:	e0bffc17 	ldw	r2,-16(fp)
     bec:	10810010 	cmplti	r2,r2,1024
     bf0:	103fe31e 	bne	r2,zero,b80 <main+0x25c>
			unsigned data = IORD(ISP_BASE, ISP_REG_STAT_AE_HIST_ADDR+i);
			sum += data;
			if (i >= 48 && i < 48 + 32)
				printf("%u, ", data);
		}
		printf("] total %u\n", sum);//sum may be error, because of reading hist in vsync time
     bf4:	01000074 	movhi	r4,1
     bf8:	21386704 	addi	r4,r4,-7780
     bfc:	e17ffb17 	ldw	r5,-20(fp)
     c00:	0001cd80 	call	1cd8 <printf>
	}
     c04:	003fb606 	br	ae0 <main+0x1bc>

00000c08 <cmos_poweron>:
#define CMOS_RSTN_OUT() (IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_BASE, IORD_ALTERA_AVALON_PIO_DIRECTION(PIO_BASE)|(1u<<CMOS_RSTN_PIO)))
#define CMOS_RSTN_SET(x) (IOWR_ALTERA_AVALON_PIO_DATA(PIO_BASE, IORD_ALTERA_AVALON_PIO_DATA(PIO_BASE)&~(1u<<CMOS_RSTN_PIO)|(!!(x)<<CMOS_RSTN_PIO)))
#define MDELAY(x) usleep(x*1000)

static void cmos_poweron()
{
     c08:	defffe04 	addi	sp,sp,-8
     c0c:	dfc00115 	stw	ra,4(sp)
     c10:	df000015 	stw	fp,0(sp)
     c14:	d839883a 	mov	fp,sp
	CMOS_PWDN_SET(1);
     c18:	00808034 	movhi	r2,512
     c1c:	10948c04 	addi	r2,r2,21040
     c20:	10800037 	ldwio	r2,0(r2)
     c24:	1007883a 	mov	r3,r2
     c28:	00bffec4 	movi	r2,-5
     c2c:	1884703a 	and	r2,r3,r2
     c30:	10800114 	ori	r2,r2,4
     c34:	1007883a 	mov	r3,r2
     c38:	00808034 	movhi	r2,512
     c3c:	10948c04 	addi	r2,r2,21040
     c40:	10c00035 	stwio	r3,0(r2)
	CMOS_RSTN_SET(0);
     c44:	00808034 	movhi	r2,512
     c48:	10948c04 	addi	r2,r2,21040
     c4c:	10c00037 	ldwio	r3,0(r2)
     c50:	00bffdc4 	movi	r2,-9
     c54:	1886703a 	and	r3,r3,r2
     c58:	00808034 	movhi	r2,512
     c5c:	10948c04 	addi	r2,r2,21040
     c60:	10c00035 	stwio	r3,0(r2)
	CMOS_PWDN_OUT();
     c64:	00808034 	movhi	r2,512
     c68:	10948d04 	addi	r2,r2,21044
     c6c:	10800037 	ldwio	r2,0(r2)
     c70:	10800114 	ori	r2,r2,4
     c74:	1007883a 	mov	r3,r2
     c78:	00808034 	movhi	r2,512
     c7c:	10948d04 	addi	r2,r2,21044
     c80:	10c00035 	stwio	r3,0(r2)
	CMOS_RSTN_OUT();
     c84:	00808034 	movhi	r2,512
     c88:	10948d04 	addi	r2,r2,21044
     c8c:	10800037 	ldwio	r2,0(r2)
     c90:	10800214 	ori	r2,r2,8
     c94:	1007883a 	mov	r3,r2
     c98:	00808034 	movhi	r2,512
     c9c:	10948d04 	addi	r2,r2,21044
     ca0:	10c00035 	stwio	r3,0(r2)
	MDELAY(5);
     ca4:	0104e204 	movi	r4,5000
     ca8:	000c2180 	call	c218 <usleep>
	
	CMOS_PWDN_SET(0);
     cac:	00808034 	movhi	r2,512
     cb0:	10948c04 	addi	r2,r2,21040
     cb4:	10c00037 	ldwio	r3,0(r2)
     cb8:	00bffec4 	movi	r2,-5
     cbc:	1886703a 	and	r3,r3,r2
     cc0:	00808034 	movhi	r2,512
     cc4:	10948c04 	addi	r2,r2,21040
     cc8:	10c00035 	stwio	r3,0(r2)
	MDELAY(2);
     ccc:	0101f404 	movi	r4,2000
     cd0:	000c2180 	call	c218 <usleep>

	CMOS_RSTN_SET(1);
     cd4:	00808034 	movhi	r2,512
     cd8:	10948c04 	addi	r2,r2,21040
     cdc:	10800037 	ldwio	r2,0(r2)
     ce0:	1007883a 	mov	r3,r2
     ce4:	00bffdc4 	movi	r2,-9
     ce8:	1884703a 	and	r2,r3,r2
     cec:	10800214 	ori	r2,r2,8
     cf0:	1007883a 	mov	r3,r2
     cf4:	00808034 	movhi	r2,512
     cf8:	10948c04 	addi	r2,r2,21040
     cfc:	10c00035 	stwio	r3,0(r2)
	MDELAY(21);
     d00:	01148204 	movi	r4,21000
     d04:	000c2180 	call	c218 <usleep>
}
     d08:	e037883a 	mov	sp,fp
     d0c:	dfc00117 	ldw	ra,4(sp)
     d10:	df000017 	ldw	fp,0(sp)
     d14:	dec00204 	addi	sp,sp,8
     d18:	f800283a 	ret

00000d1c <cmos_poweroff>:

static void cmos_poweroff()
{
     d1c:	defffe04 	addi	sp,sp,-8
     d20:	dfc00115 	stw	ra,4(sp)
     d24:	df000015 	stw	fp,0(sp)
     d28:	d839883a 	mov	fp,sp
	CMOS_PWDN_SET(1);
     d2c:	00808034 	movhi	r2,512
     d30:	10948c04 	addi	r2,r2,21040
     d34:	10800037 	ldwio	r2,0(r2)
     d38:	1007883a 	mov	r3,r2
     d3c:	00bffec4 	movi	r2,-5
     d40:	1884703a 	and	r2,r3,r2
     d44:	10800114 	ori	r2,r2,4
     d48:	1007883a 	mov	r3,r2
     d4c:	00808034 	movhi	r2,512
     d50:	10948c04 	addi	r2,r2,21040
     d54:	10c00035 	stwio	r3,0(r2)
	CMOS_RSTN_SET(0);
     d58:	00808034 	movhi	r2,512
     d5c:	10948c04 	addi	r2,r2,21040
     d60:	10c00037 	ldwio	r3,0(r2)
     d64:	00bffdc4 	movi	r2,-9
     d68:	1886703a 	and	r3,r3,r2
     d6c:	00808034 	movhi	r2,512
     d70:	10948c04 	addi	r2,r2,21040
     d74:	10c00035 	stwio	r3,0(r2)
	CMOS_PWDN_OUT();
     d78:	00808034 	movhi	r2,512
     d7c:	10948d04 	addi	r2,r2,21044
     d80:	10800037 	ldwio	r2,0(r2)
     d84:	10800114 	ori	r2,r2,4
     d88:	1007883a 	mov	r3,r2
     d8c:	00808034 	movhi	r2,512
     d90:	10948d04 	addi	r2,r2,21044
     d94:	10c00035 	stwio	r3,0(r2)
	CMOS_RSTN_OUT();
     d98:	00808034 	movhi	r2,512
     d9c:	10948d04 	addi	r2,r2,21044
     da0:	10800037 	ldwio	r2,0(r2)
     da4:	10800214 	ori	r2,r2,8
     da8:	1007883a 	mov	r3,r2
     dac:	00808034 	movhi	r2,512
     db0:	10948d04 	addi	r2,r2,21044
     db4:	10c00035 	stwio	r3,0(r2)
	MDELAY(5);
     db8:	0104e204 	movi	r4,5000
     dbc:	000c2180 	call	c218 <usleep>
}
     dc0:	e037883a 	mov	sp,fp
     dc4:	dfc00117 	ldw	ra,4(sp)
     dc8:	df000017 	ldw	fp,0(sp)
     dcc:	dec00204 	addi	sp,sp,8
     dd0:	f800283a 	ret

00000dd4 <i2c_init>:
#define I2C_SDA_SET(x) (IOWR_ALTERA_AVALON_PIO_DATA(PIO_BASE, IORD_ALTERA_AVALON_PIO_DATA(PIO_BASE)&~(1u<<CMOS_SDA_PIO)|(!!(x)<<CMOS_SDA_PIO)))
#define I2C_SDA_GET() ((IORD_ALTERA_AVALON_PIO_DATA(PIO_BASE)>>CMOS_SDA_PIO)&1)
#define I2C_DELAY() usleep(5)

static void i2c_init()
{
     dd4:	defffe04 	addi	sp,sp,-8
     dd8:	dfc00115 	stw	ra,4(sp)
     ddc:	df000015 	stw	fp,0(sp)
     de0:	d839883a 	mov	fp,sp
	I2C_SCL_SET(1);
     de4:	00808034 	movhi	r2,512
     de8:	10948c04 	addi	r2,r2,21040
     dec:	10800037 	ldwio	r2,0(r2)
     df0:	1007883a 	mov	r3,r2
     df4:	00bfff84 	movi	r2,-2
     df8:	1884703a 	and	r2,r3,r2
     dfc:	10800054 	ori	r2,r2,1
     e00:	1007883a 	mov	r3,r2
     e04:	00808034 	movhi	r2,512
     e08:	10948c04 	addi	r2,r2,21040
     e0c:	10c00035 	stwio	r3,0(r2)
	I2C_SDA_SET(1);
     e10:	00808034 	movhi	r2,512
     e14:	10948c04 	addi	r2,r2,21040
     e18:	10800037 	ldwio	r2,0(r2)
     e1c:	1007883a 	mov	r3,r2
     e20:	00bfff44 	movi	r2,-3
     e24:	1884703a 	and	r2,r3,r2
     e28:	10800094 	ori	r2,r2,2
     e2c:	1007883a 	mov	r3,r2
     e30:	00808034 	movhi	r2,512
     e34:	10948c04 	addi	r2,r2,21040
     e38:	10c00035 	stwio	r3,0(r2)
	I2C_SCL_OUT();
     e3c:	00808034 	movhi	r2,512
     e40:	10948d04 	addi	r2,r2,21044
     e44:	10800037 	ldwio	r2,0(r2)
     e48:	10800054 	ori	r2,r2,1
     e4c:	1007883a 	mov	r3,r2
     e50:	00808034 	movhi	r2,512
     e54:	10948d04 	addi	r2,r2,21044
     e58:	10c00035 	stwio	r3,0(r2)
	I2C_SDA_OUT();
     e5c:	00808034 	movhi	r2,512
     e60:	10948d04 	addi	r2,r2,21044
     e64:	10800037 	ldwio	r2,0(r2)
     e68:	10800094 	ori	r2,r2,2
     e6c:	1007883a 	mov	r3,r2
     e70:	00808034 	movhi	r2,512
     e74:	10948d04 	addi	r2,r2,21044
     e78:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
     e7c:	01000144 	movi	r4,5
     e80:	000c2180 	call	c218 <usleep>
}
     e84:	e037883a 	mov	sp,fp
     e88:	dfc00117 	ldw	ra,4(sp)
     e8c:	df000017 	ldw	fp,0(sp)
     e90:	dec00204 	addi	sp,sp,8
     e94:	f800283a 	ret

00000e98 <i2c_write_byte>:

static int i2c_write_byte(unsigned char slave_addr, const unsigned char* data, unsigned len)
{
     e98:	defff304 	addi	sp,sp,-52
     e9c:	dfc00c15 	stw	ra,48(sp)
     ea0:	df000b15 	stw	fp,44(sp)
     ea4:	df000b04 	addi	fp,sp,44
     ea8:	e17ffa15 	stw	r5,-24(fp)
     eac:	e1bffb15 	stw	r6,-20(fp)
     eb0:	e13ff905 	stb	r4,-28(fp)
	int i, j;
	int ret = 0;
     eb4:	e03ff615 	stw	zero,-40(fp)
	//start
	I2C_SCL_SET(1);
     eb8:	00808034 	movhi	r2,512
     ebc:	10948c04 	addi	r2,r2,21040
     ec0:	10800037 	ldwio	r2,0(r2)
     ec4:	1007883a 	mov	r3,r2
     ec8:	00bfff84 	movi	r2,-2
     ecc:	1884703a 	and	r2,r3,r2
     ed0:	10800054 	ori	r2,r2,1
     ed4:	1007883a 	mov	r3,r2
     ed8:	00808034 	movhi	r2,512
     edc:	10948c04 	addi	r2,r2,21040
     ee0:	10c00035 	stwio	r3,0(r2)
	I2C_SDA_SET(1);
     ee4:	00808034 	movhi	r2,512
     ee8:	10948c04 	addi	r2,r2,21040
     eec:	10800037 	ldwio	r2,0(r2)
     ef0:	1007883a 	mov	r3,r2
     ef4:	00bfff44 	movi	r2,-3
     ef8:	1884703a 	and	r2,r3,r2
     efc:	10800094 	ori	r2,r2,2
     f00:	1007883a 	mov	r3,r2
     f04:	00808034 	movhi	r2,512
     f08:	10948c04 	addi	r2,r2,21040
     f0c:	10c00035 	stwio	r3,0(r2)
	I2C_SDA_OUT();
     f10:	00808034 	movhi	r2,512
     f14:	10948d04 	addi	r2,r2,21044
     f18:	10800037 	ldwio	r2,0(r2)
     f1c:	10800094 	ori	r2,r2,2
     f20:	1007883a 	mov	r3,r2
     f24:	00808034 	movhi	r2,512
     f28:	10948d04 	addi	r2,r2,21044
     f2c:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
     f30:	01000144 	movi	r4,5
     f34:	000c2180 	call	c218 <usleep>
	I2C_SDA_SET(0);
     f38:	00808034 	movhi	r2,512
     f3c:	10948c04 	addi	r2,r2,21040
     f40:	10c00037 	ldwio	r3,0(r2)
     f44:	00bfff44 	movi	r2,-3
     f48:	1886703a 	and	r3,r3,r2
     f4c:	00808034 	movhi	r2,512
     f50:	10948c04 	addi	r2,r2,21040
     f54:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
     f58:	01000144 	movi	r4,5
     f5c:	000c2180 	call	c218 <usleep>
	I2C_SCL_SET(0);
     f60:	00808034 	movhi	r2,512
     f64:	10948c04 	addi	r2,r2,21040
     f68:	10c00037 	ldwio	r3,0(r2)
     f6c:	00bfff84 	movi	r2,-2
     f70:	1886703a 	and	r3,r3,r2
     f74:	00808034 	movhi	r2,512
     f78:	10948c04 	addi	r2,r2,21040
     f7c:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
     f80:	01000144 	movi	r4,5
     f84:	000c2180 	call	c218 <usleep>

	//addr
	unsigned char addr = (slave_addr << 1) | 0; //W
     f88:	e0bff903 	ldbu	r2,-28(fp)
     f8c:	1085883a 	add	r2,r2,r2
     f90:	e0bff545 	stb	r2,-43(fp)
	for (i = 0; i < 8; i++) {
     f94:	e03ff815 	stw	zero,-32(fp)
     f98:	00003506 	br	1070 <i2c_write_byte+0x1d8>
		I2C_SDA_SET(addr&0x80);
     f9c:	00808034 	movhi	r2,512
     fa0:	10948c04 	addi	r2,r2,21040
     fa4:	10800037 	ldwio	r2,0(r2)
     fa8:	1007883a 	mov	r3,r2
     fac:	00bfff44 	movi	r2,-3
     fb0:	1886703a 	and	r3,r3,r2
     fb4:	e0ffff15 	stw	r3,-4(fp)
     fb8:	e0bff543 	ldbu	r2,-43(fp)
     fbc:	10803fcc 	andi	r2,r2,255
     fc0:	1080201c 	xori	r2,r2,128
     fc4:	10bfe004 	addi	r2,r2,-128
     fc8:	1004403a 	cmpge	r2,r2,zero
     fcc:	1000031e 	bne	r2,zero,fdc <i2c_write_byte+0x144>
     fd0:	00800084 	movi	r2,2
     fd4:	e0bffe15 	stw	r2,-8(fp)
     fd8:	00000106 	br	fe0 <i2c_write_byte+0x148>
     fdc:	e03ffe15 	stw	zero,-8(fp)
     fe0:	e0ffff17 	ldw	r3,-4(fp)
     fe4:	e13ffe17 	ldw	r4,-8(fp)
     fe8:	1904b03a 	or	r2,r3,r4
     fec:	1007883a 	mov	r3,r2
     ff0:	00808034 	movhi	r2,512
     ff4:	10948c04 	addi	r2,r2,21040
     ff8:	10c00035 	stwio	r3,0(r2)
		I2C_SCL_SET(1);
     ffc:	00808034 	movhi	r2,512
    1000:	10948c04 	addi	r2,r2,21040
    1004:	10800037 	ldwio	r2,0(r2)
    1008:	1007883a 	mov	r3,r2
    100c:	00bfff84 	movi	r2,-2
    1010:	1884703a 	and	r2,r3,r2
    1014:	10800054 	ori	r2,r2,1
    1018:	1007883a 	mov	r3,r2
    101c:	00808034 	movhi	r2,512
    1020:	10948c04 	addi	r2,r2,21040
    1024:	10c00035 	stwio	r3,0(r2)
		I2C_DELAY();
    1028:	01000144 	movi	r4,5
    102c:	000c2180 	call	c218 <usleep>
		I2C_SCL_SET(0);
    1030:	00808034 	movhi	r2,512
    1034:	10948c04 	addi	r2,r2,21040
    1038:	10c00037 	ldwio	r3,0(r2)
    103c:	00bfff84 	movi	r2,-2
    1040:	1886703a 	and	r3,r3,r2
    1044:	00808034 	movhi	r2,512
    1048:	10948c04 	addi	r2,r2,21040
    104c:	10c00035 	stwio	r3,0(r2)
		I2C_DELAY();
    1050:	01000144 	movi	r4,5
    1054:	000c2180 	call	c218 <usleep>
		addr <<= 1;
    1058:	e0bff543 	ldbu	r2,-43(fp)
    105c:	1085883a 	add	r2,r2,r2
    1060:	e0bff545 	stb	r2,-43(fp)
	I2C_SCL_SET(0);
	I2C_DELAY();

	//addr
	unsigned char addr = (slave_addr << 1) | 0; //W
	for (i = 0; i < 8; i++) {
    1064:	e0bff817 	ldw	r2,-32(fp)
    1068:	10800044 	addi	r2,r2,1
    106c:	e0bff815 	stw	r2,-32(fp)
    1070:	e0bff817 	ldw	r2,-32(fp)
    1074:	10800210 	cmplti	r2,r2,8
    1078:	103fc81e 	bne	r2,zero,f9c <i2c_write_byte+0x104>
		I2C_DELAY();
		I2C_SCL_SET(0);
		I2C_DELAY();
		addr <<= 1;
	}
	I2C_SDA_IN();
    107c:	00808034 	movhi	r2,512
    1080:	10948d04 	addi	r2,r2,21044
    1084:	10c00037 	ldwio	r3,0(r2)
    1088:	00bfff44 	movi	r2,-3
    108c:	1886703a 	and	r3,r3,r2
    1090:	00808034 	movhi	r2,512
    1094:	10948d04 	addi	r2,r2,21044
    1098:	10c00035 	stwio	r3,0(r2)
	I2C_SCL_SET(1);
    109c:	00808034 	movhi	r2,512
    10a0:	10948c04 	addi	r2,r2,21040
    10a4:	10800037 	ldwio	r2,0(r2)
    10a8:	1007883a 	mov	r3,r2
    10ac:	00bfff84 	movi	r2,-2
    10b0:	1884703a 	and	r2,r3,r2
    10b4:	10800054 	ori	r2,r2,1
    10b8:	1007883a 	mov	r3,r2
    10bc:	00808034 	movhi	r2,512
    10c0:	10948c04 	addi	r2,r2,21040
    10c4:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
    10c8:	01000144 	movi	r4,5
    10cc:	000c2180 	call	c218 <usleep>
	ret += I2C_SDA_GET();
    10d0:	00808034 	movhi	r2,512
    10d4:	10948c04 	addi	r2,r2,21040
    10d8:	10800037 	ldwio	r2,0(r2)
    10dc:	1005d07a 	srai	r2,r2,1
    10e0:	10c0004c 	andi	r3,r2,1
    10e4:	e0bff617 	ldw	r2,-40(fp)
    10e8:	10c5883a 	add	r2,r2,r3
    10ec:	e0bff615 	stw	r2,-40(fp)
	I2C_SCL_SET(0);
    10f0:	00808034 	movhi	r2,512
    10f4:	10948c04 	addi	r2,r2,21040
    10f8:	10c00037 	ldwio	r3,0(r2)
    10fc:	00bfff84 	movi	r2,-2
    1100:	1886703a 	and	r3,r3,r2
    1104:	00808034 	movhi	r2,512
    1108:	10948c04 	addi	r2,r2,21040
    110c:	10c00035 	stwio	r3,0(r2)
	I2C_SDA_OUT();
    1110:	00808034 	movhi	r2,512
    1114:	10948d04 	addi	r2,r2,21044
    1118:	10800037 	ldwio	r2,0(r2)
    111c:	10800094 	ori	r2,r2,2
    1120:	1007883a 	mov	r3,r2
    1124:	00808034 	movhi	r2,512
    1128:	10948d04 	addi	r2,r2,21044
    112c:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
    1130:	01000144 	movi	r4,5
    1134:	000c2180 	call	c218 <usleep>

	for (i = 0; i < len; i++) {
    1138:	e03ff815 	stw	zero,-32(fp)
    113c:	00007206 	br	1308 <i2c_write_byte+0x470>
		unsigned char d = data[i];
    1140:	e0bff817 	ldw	r2,-32(fp)
    1144:	1007883a 	mov	r3,r2
    1148:	e0bffa17 	ldw	r2,-24(fp)
    114c:	1885883a 	add	r2,r3,r2
    1150:	10800003 	ldbu	r2,0(r2)
    1154:	e0bff505 	stb	r2,-44(fp)
		for (j = 0; j < 8; j++) {
    1158:	e03ff715 	stw	zero,-36(fp)
    115c:	00003506 	br	1234 <i2c_write_byte+0x39c>
			I2C_SDA_SET(d&0x80);
    1160:	00808034 	movhi	r2,512
    1164:	10948c04 	addi	r2,r2,21040
    1168:	10800037 	ldwio	r2,0(r2)
    116c:	1007883a 	mov	r3,r2
    1170:	00bfff44 	movi	r2,-3
    1174:	1886703a 	and	r3,r3,r2
    1178:	e0fffd15 	stw	r3,-12(fp)
    117c:	e0bff503 	ldbu	r2,-44(fp)
    1180:	10803fcc 	andi	r2,r2,255
    1184:	1080201c 	xori	r2,r2,128
    1188:	10bfe004 	addi	r2,r2,-128
    118c:	1004403a 	cmpge	r2,r2,zero
    1190:	1000031e 	bne	r2,zero,11a0 <i2c_write_byte+0x308>
    1194:	00800084 	movi	r2,2
    1198:	e0bffc15 	stw	r2,-16(fp)
    119c:	00000106 	br	11a4 <i2c_write_byte+0x30c>
    11a0:	e03ffc15 	stw	zero,-16(fp)
    11a4:	e0fffd17 	ldw	r3,-12(fp)
    11a8:	e13ffc17 	ldw	r4,-16(fp)
    11ac:	1904b03a 	or	r2,r3,r4
    11b0:	1007883a 	mov	r3,r2
    11b4:	00808034 	movhi	r2,512
    11b8:	10948c04 	addi	r2,r2,21040
    11bc:	10c00035 	stwio	r3,0(r2)
			I2C_SCL_SET(1);
    11c0:	00808034 	movhi	r2,512
    11c4:	10948c04 	addi	r2,r2,21040
    11c8:	10800037 	ldwio	r2,0(r2)
    11cc:	1007883a 	mov	r3,r2
    11d0:	00bfff84 	movi	r2,-2
    11d4:	1884703a 	and	r2,r3,r2
    11d8:	10800054 	ori	r2,r2,1
    11dc:	1007883a 	mov	r3,r2
    11e0:	00808034 	movhi	r2,512
    11e4:	10948c04 	addi	r2,r2,21040
    11e8:	10c00035 	stwio	r3,0(r2)
			I2C_DELAY();
    11ec:	01000144 	movi	r4,5
    11f0:	000c2180 	call	c218 <usleep>
			I2C_SCL_SET(0);
    11f4:	00808034 	movhi	r2,512
    11f8:	10948c04 	addi	r2,r2,21040
    11fc:	10c00037 	ldwio	r3,0(r2)
    1200:	00bfff84 	movi	r2,-2
    1204:	1886703a 	and	r3,r3,r2
    1208:	00808034 	movhi	r2,512
    120c:	10948c04 	addi	r2,r2,21040
    1210:	10c00035 	stwio	r3,0(r2)
			I2C_DELAY();
    1214:	01000144 	movi	r4,5
    1218:	000c2180 	call	c218 <usleep>
			d <<= 1;
    121c:	e0bff503 	ldbu	r2,-44(fp)
    1220:	1085883a 	add	r2,r2,r2
    1224:	e0bff505 	stb	r2,-44(fp)
	I2C_SDA_OUT();
	I2C_DELAY();

	for (i = 0; i < len; i++) {
		unsigned char d = data[i];
		for (j = 0; j < 8; j++) {
    1228:	e0bff717 	ldw	r2,-36(fp)
    122c:	10800044 	addi	r2,r2,1
    1230:	e0bff715 	stw	r2,-36(fp)
    1234:	e0bff717 	ldw	r2,-36(fp)
    1238:	10800210 	cmplti	r2,r2,8
    123c:	103fc81e 	bne	r2,zero,1160 <i2c_write_byte+0x2c8>
			I2C_DELAY();
			I2C_SCL_SET(0);
			I2C_DELAY();
			d <<= 1;
		}
		I2C_SDA_IN();
    1240:	00808034 	movhi	r2,512
    1244:	10948d04 	addi	r2,r2,21044
    1248:	10c00037 	ldwio	r3,0(r2)
    124c:	00bfff44 	movi	r2,-3
    1250:	1886703a 	and	r3,r3,r2
    1254:	00808034 	movhi	r2,512
    1258:	10948d04 	addi	r2,r2,21044
    125c:	10c00035 	stwio	r3,0(r2)
		I2C_SCL_SET(1);
    1260:	00808034 	movhi	r2,512
    1264:	10948c04 	addi	r2,r2,21040
    1268:	10800037 	ldwio	r2,0(r2)
    126c:	1007883a 	mov	r3,r2
    1270:	00bfff84 	movi	r2,-2
    1274:	1884703a 	and	r2,r3,r2
    1278:	10800054 	ori	r2,r2,1
    127c:	1007883a 	mov	r3,r2
    1280:	00808034 	movhi	r2,512
    1284:	10948c04 	addi	r2,r2,21040
    1288:	10c00035 	stwio	r3,0(r2)
		I2C_DELAY();
    128c:	01000144 	movi	r4,5
    1290:	000c2180 	call	c218 <usleep>
		ret += I2C_SDA_GET();
    1294:	00808034 	movhi	r2,512
    1298:	10948c04 	addi	r2,r2,21040
    129c:	10800037 	ldwio	r2,0(r2)
    12a0:	1005d07a 	srai	r2,r2,1
    12a4:	10c0004c 	andi	r3,r2,1
    12a8:	e0bff617 	ldw	r2,-40(fp)
    12ac:	10c5883a 	add	r2,r2,r3
    12b0:	e0bff615 	stw	r2,-40(fp)
		I2C_SCL_SET(0);
    12b4:	00808034 	movhi	r2,512
    12b8:	10948c04 	addi	r2,r2,21040
    12bc:	10c00037 	ldwio	r3,0(r2)
    12c0:	00bfff84 	movi	r2,-2
    12c4:	1886703a 	and	r3,r3,r2
    12c8:	00808034 	movhi	r2,512
    12cc:	10948c04 	addi	r2,r2,21040
    12d0:	10c00035 	stwio	r3,0(r2)
		I2C_SDA_OUT();
    12d4:	00808034 	movhi	r2,512
    12d8:	10948d04 	addi	r2,r2,21044
    12dc:	10800037 	ldwio	r2,0(r2)
    12e0:	10800094 	ori	r2,r2,2
    12e4:	1007883a 	mov	r3,r2
    12e8:	00808034 	movhi	r2,512
    12ec:	10948d04 	addi	r2,r2,21044
    12f0:	10c00035 	stwio	r3,0(r2)
		I2C_DELAY();
    12f4:	01000144 	movi	r4,5
    12f8:	000c2180 	call	c218 <usleep>
	ret += I2C_SDA_GET();
	I2C_SCL_SET(0);
	I2C_SDA_OUT();
	I2C_DELAY();

	for (i = 0; i < len; i++) {
    12fc:	e0bff817 	ldw	r2,-32(fp)
    1300:	10800044 	addi	r2,r2,1
    1304:	e0bff815 	stw	r2,-32(fp)
    1308:	e0fff817 	ldw	r3,-32(fp)
    130c:	e0bffb17 	ldw	r2,-20(fp)
    1310:	18bf8b36 	bltu	r3,r2,1140 <i2c_write_byte+0x2a8>
		I2C_SDA_OUT();
		I2C_DELAY();
	}

	//stop
	I2C_SDA_SET(0);
    1314:	00808034 	movhi	r2,512
    1318:	10948c04 	addi	r2,r2,21040
    131c:	10c00037 	ldwio	r3,0(r2)
    1320:	00bfff44 	movi	r2,-3
    1324:	1886703a 	and	r3,r3,r2
    1328:	00808034 	movhi	r2,512
    132c:	10948c04 	addi	r2,r2,21040
    1330:	10c00035 	stwio	r3,0(r2)
	I2C_SCL_SET(1);
    1334:	00808034 	movhi	r2,512
    1338:	10948c04 	addi	r2,r2,21040
    133c:	10800037 	ldwio	r2,0(r2)
    1340:	1007883a 	mov	r3,r2
    1344:	00bfff84 	movi	r2,-2
    1348:	1884703a 	and	r2,r3,r2
    134c:	10800054 	ori	r2,r2,1
    1350:	1007883a 	mov	r3,r2
    1354:	00808034 	movhi	r2,512
    1358:	10948c04 	addi	r2,r2,21040
    135c:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
    1360:	01000144 	movi	r4,5
    1364:	000c2180 	call	c218 <usleep>
	I2C_SDA_SET(1);
    1368:	00808034 	movhi	r2,512
    136c:	10948c04 	addi	r2,r2,21040
    1370:	10800037 	ldwio	r2,0(r2)
    1374:	1007883a 	mov	r3,r2
    1378:	00bfff44 	movi	r2,-3
    137c:	1884703a 	and	r2,r3,r2
    1380:	10800094 	ori	r2,r2,2
    1384:	1007883a 	mov	r3,r2
    1388:	00808034 	movhi	r2,512
    138c:	10948c04 	addi	r2,r2,21040
    1390:	10c00035 	stwio	r3,0(r2)
	I2C_DELAY();
    1394:	01000144 	movi	r4,5
    1398:	000c2180 	call	c218 <usleep>

	return ret;
    139c:	e0bff617 	ldw	r2,-40(fp)
}
    13a0:	e037883a 	mov	sp,fp
    13a4:	dfc00117 	ldw	ra,4(sp)
    13a8:	df000017 	ldw	fp,0(sp)
    13ac:	dec00204 	addi	sp,sp,8
    13b0:	f800283a 	ret

000013b4 <ov_wr_reg>:


static int ov_wr_reg(unsigned short reg, unsigned char data)
{
    13b4:	defffb04 	addi	sp,sp,-20
    13b8:	dfc00415 	stw	ra,16(sp)
    13bc:	df000315 	stw	fp,12(sp)
    13c0:	df000304 	addi	fp,sp,12
    13c4:	e13ffe0d 	sth	r4,-8(fp)
    13c8:	e17fff05 	stb	r5,-4(fp)
	unsigned char slave = 0x78>>1;
    13cc:	00800f04 	movi	r2,60
    13d0:	e0bffd05 	stb	r2,-12(fp)
	unsigned char buff[3];
	buff[0] = (reg >> 8) & 0xff;
    13d4:	e0bffe0b 	ldhu	r2,-8(fp)
    13d8:	1004d23a 	srli	r2,r2,8
    13dc:	1007883a 	mov	r3,r2
    13e0:	00bfffc4 	movi	r2,-1
    13e4:	1884703a 	and	r2,r3,r2
    13e8:	e0bffd45 	stb	r2,-11(fp)
	buff[1] = (reg >> 0) & 0xff;
    13ec:	e0bffe0b 	ldhu	r2,-8(fp)
    13f0:	1007883a 	mov	r3,r2
    13f4:	00bfffc4 	movi	r2,-1
    13f8:	1884703a 	and	r2,r3,r2
    13fc:	e0bffd85 	stb	r2,-10(fp)
	buff[2] = data;
    1400:	e0bfff03 	ldbu	r2,-4(fp)
    1404:	e0bffdc5 	stb	r2,-9(fp)
	return i2c_write_byte(slave, buff, 3);
    1408:	e13ffd03 	ldbu	r4,-12(fp)
    140c:	e17ffd44 	addi	r5,fp,-11
    1410:	018000c4 	movi	r6,3
    1414:	0000e980 	call	e98 <i2c_write_byte>
}
    1418:	e037883a 	mov	sp,fp
    141c:	dfc00117 	ldw	ra,4(sp)
    1420:	df000017 	ldw	fp,0(sp)
    1424:	dec00204 	addi	sp,sp,8
    1428:	f800283a 	ret

0000142c <ov5640_init_raw_1280_960_30fps_crop_960_544>:

int ov5640_init_raw_1280_960_30fps_crop_960_544()
{
    142c:	defffc04 	addi	sp,sp,-16
    1430:	dfc00315 	stw	ra,12(sp)
    1434:	df000215 	stw	fp,8(sp)
    1438:	df000204 	addi	fp,sp,8
	i2c_init();
    143c:	0000dd40 	call	dd4 <i2c_init>
	cmos_poweron();
    1440:	0000c080 	call	c08 <cmos_poweron>
	ov_wr_reg(0x3103, 0x11);
    1444:	010c40c4 	movi	r4,12547
    1448:	01400444 	movi	r5,17
    144c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3008, 0x82);
    1450:	010c0204 	movi	r4,12296
    1454:	01402084 	movi	r5,130
    1458:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3008, 0x42);
    145c:	010c0204 	movi	r4,12296
    1460:	01401084 	movi	r5,66
    1464:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3103, 0x03);
    1468:	010c40c4 	movi	r4,12547
    146c:	014000c4 	movi	r5,3
    1470:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3017, 0xff);
    1474:	010c05c4 	movi	r4,12311
    1478:	01403fc4 	movi	r5,255
    147c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3018, 0xff);
    1480:	010c0604 	movi	r4,12312
    1484:	01403fc4 	movi	r5,255
    1488:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3034, 0x1a);
    148c:	010c0d04 	movi	r4,12340
    1490:	01400684 	movi	r5,26
    1494:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3035, 0x11);
    1498:	010c0d44 	movi	r4,12341
    149c:	01400444 	movi	r5,17
    14a0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3036, 0x46);
    14a4:	010c0d84 	movi	r4,12342
    14a8:	01401184 	movi	r5,70
    14ac:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3037, 0x13);
    14b0:	010c0dc4 	movi	r4,12343
    14b4:	014004c4 	movi	r5,19
    14b8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3108, 0x01);
    14bc:	010c4204 	movi	r4,12552
    14c0:	01400044 	movi	r5,1
    14c4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3630, 0x36);
    14c8:	010d8c04 	movi	r4,13872
    14cc:	01400d84 	movi	r5,54
    14d0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3631, 0x0e);
    14d4:	010d8c44 	movi	r4,13873
    14d8:	01400384 	movi	r5,14
    14dc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3632, 0xe2);
    14e0:	010d8c84 	movi	r4,13874
    14e4:	01403884 	movi	r5,226
    14e8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3633, 0x12);
    14ec:	010d8cc4 	movi	r4,13875
    14f0:	01400484 	movi	r5,18
    14f4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3621, 0xe0);
    14f8:	010d8844 	movi	r4,13857
    14fc:	01403804 	movi	r5,224
    1500:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3704, 0xa0);
    1504:	010dc104 	movi	r4,14084
    1508:	01402804 	movi	r5,160
    150c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3703, 0x5a);
    1510:	010dc0c4 	movi	r4,14083
    1514:	01401684 	movi	r5,90
    1518:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3715, 0x78);
    151c:	010dc544 	movi	r4,14101
    1520:	01401e04 	movi	r5,120
    1524:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3717, 0x01);
    1528:	010dc5c4 	movi	r4,14103
    152c:	01400044 	movi	r5,1
    1530:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x370b, 0x60);
    1534:	010dc2c4 	movi	r4,14091
    1538:	01401804 	movi	r5,96
    153c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3705, 0x1a);
    1540:	010dc144 	movi	r4,14085
    1544:	01400684 	movi	r5,26
    1548:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3905, 0x02);
    154c:	010e4144 	movi	r4,14597
    1550:	01400084 	movi	r5,2
    1554:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3906, 0x10);
    1558:	010e4184 	movi	r4,14598
    155c:	01400404 	movi	r5,16
    1560:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3901, 0x0a);
    1564:	010e4044 	movi	r4,14593
    1568:	01400284 	movi	r5,10
    156c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3731, 0x12);
    1570:	010dcc44 	movi	r4,14129
    1574:	01400484 	movi	r5,18
    1578:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3600, 0x08);
    157c:	010d8004 	movi	r4,13824
    1580:	01400204 	movi	r5,8
    1584:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3601, 0x33);
    1588:	010d8044 	movi	r4,13825
    158c:	01400cc4 	movi	r5,51
    1590:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x302d, 0x60);
    1594:	010c0b44 	movi	r4,12333
    1598:	01401804 	movi	r5,96
    159c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3620, 0x52);
    15a0:	010d8804 	movi	r4,13856
    15a4:	01401484 	movi	r5,82
    15a8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x371b, 0x20);
    15ac:	010dc6c4 	movi	r4,14107
    15b0:	01400804 	movi	r5,32
    15b4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x471c, 0x50);
    15b8:	0111c704 	movi	r4,18204
    15bc:	01401404 	movi	r5,80
    15c0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a13, 0x43);
    15c4:	010e84c4 	movi	r4,14867
    15c8:	014010c4 	movi	r5,67
    15cc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a18, 0x00);
    15d0:	010e8604 	movi	r4,14872
    15d4:	000b883a 	mov	r5,zero
    15d8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a19, 0xf8);
    15dc:	010e8644 	movi	r4,14873
    15e0:	01403e04 	movi	r5,248
    15e4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3635, 0x13);
    15e8:	010d8d44 	movi	r4,13877
    15ec:	014004c4 	movi	r5,19
    15f0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3636, 0x03);
    15f4:	010d8d84 	movi	r4,13878
    15f8:	014000c4 	movi	r5,3
    15fc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3634, 0x40);
    1600:	010d8d04 	movi	r4,13876
    1604:	01401004 	movi	r5,64
    1608:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3622, 0x01);
    160c:	010d8884 	movi	r4,13858
    1610:	01400044 	movi	r5,1
    1614:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c01, 0x34);
    1618:	010f0044 	movi	r4,15361
    161c:	01400d04 	movi	r5,52
    1620:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c04, 0x28);
    1624:	010f0104 	movi	r4,15364
    1628:	01400a04 	movi	r5,40
    162c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c05, 0x98);
    1630:	010f0144 	movi	r4,15365
    1634:	01402604 	movi	r5,152
    1638:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c06, 0x00);
    163c:	010f0184 	movi	r4,15366
    1640:	000b883a 	mov	r5,zero
    1644:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c07, 0x07);
    1648:	010f01c4 	movi	r4,15367
    164c:	014001c4 	movi	r5,7
    1650:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c08, 0x00);
    1654:	010f0204 	movi	r4,15368
    1658:	000b883a 	mov	r5,zero
    165c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c09, 0x1c);
    1660:	010f0244 	movi	r4,15369
    1664:	01400704 	movi	r5,28
    1668:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c0a, 0x9c);
    166c:	010f0284 	movi	r4,15370
    1670:	01402704 	movi	r5,156
    1674:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3c0b, 0x40);
    1678:	010f02c4 	movi	r4,15371
    167c:	01401004 	movi	r5,64
    1680:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3820, 0x42);
    1684:	010e0804 	movi	r4,14368
    1688:	01401084 	movi	r5,66
    168c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3821, 0x01);
    1690:	010e0844 	movi	r4,14369
    1694:	01400044 	movi	r5,1
    1698:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3814, 0x31);
    169c:	010e0504 	movi	r4,14356
    16a0:	01400c44 	movi	r5,49
    16a4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3815, 0x31);
    16a8:	010e0544 	movi	r4,14357
    16ac:	01400c44 	movi	r5,49
    16b0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3800, 0x00);
    16b4:	010e0004 	movi	r4,14336
    16b8:	000b883a 	mov	r5,zero
    16bc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3801, 0x00);
    16c0:	010e0044 	movi	r4,14337
    16c4:	000b883a 	mov	r5,zero
    16c8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3802, 0x00);
    16cc:	010e0084 	movi	r4,14338
    16d0:	000b883a 	mov	r5,zero
    16d4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3803, 0x04);
    16d8:	010e00c4 	movi	r4,14339
    16dc:	01400104 	movi	r5,4
    16e0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3804, 0x0a);
    16e4:	010e0104 	movi	r4,14340
    16e8:	01400284 	movi	r5,10
    16ec:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3805, 0x3f);
    16f0:	010e0144 	movi	r4,14341
    16f4:	01400fc4 	movi	r5,63
    16f8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3806, 0x07);
    16fc:	010e0184 	movi	r4,14342
    1700:	014001c4 	movi	r5,7
    1704:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3807, 0x9b);
    1708:	010e01c4 	movi	r4,14343
    170c:	014026c4 	movi	r5,155
    1710:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3808, 0x03);
    1714:	010e0204 	movi	r4,14344
    1718:	014000c4 	movi	r5,3
    171c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3809, 0xc0);
    1720:	010e0244 	movi	r4,14345
    1724:	01403004 	movi	r5,192
    1728:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380a, 0x02);
    172c:	010e0284 	movi	r4,14346
    1730:	01400084 	movi	r5,2
    1734:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380b, 0x20);
    1738:	010e02c4 	movi	r4,14347
    173c:	01400804 	movi	r5,32
    1740:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380c, 0x07);
    1744:	010e0304 	movi	r4,14348
    1748:	014001c4 	movi	r5,7
    174c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380d, 0x68);
    1750:	010e0344 	movi	r4,14349
    1754:	01401a04 	movi	r5,104
    1758:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380e, 0x03);
    175c:	010e0384 	movi	r4,14350
    1760:	014000c4 	movi	r5,3
    1764:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x380f, 0xd8);
    1768:	010e03c4 	movi	r4,14351
    176c:	01403604 	movi	r5,216
    1770:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3810, 0x00);
    1774:	010e0404 	movi	r4,14352
    1778:	000b883a 	mov	r5,zero
    177c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3811, 0x10);
    1780:	010e0444 	movi	r4,14353
    1784:	01400404 	movi	r5,16
    1788:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3812, 0x00);
    178c:	010e0484 	movi	r4,14354
    1790:	000b883a 	mov	r5,zero
    1794:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3813, 0x07);
    1798:	010e04c4 	movi	r4,14355
    179c:	014001c4 	movi	r5,7
    17a0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3618, 0x00);
    17a4:	010d8604 	movi	r4,13848
    17a8:	000b883a 	mov	r5,zero
    17ac:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3612, 0x29);
    17b0:	010d8484 	movi	r4,13842
    17b4:	01400a44 	movi	r5,41
    17b8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3708, 0x64);
    17bc:	010dc204 	movi	r4,14088
    17c0:	01401904 	movi	r5,100
    17c4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3709, 0x52);
    17c8:	010dc244 	movi	r4,14089
    17cc:	01401484 	movi	r5,82
    17d0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x370c, 0x03);
    17d4:	010dc304 	movi	r4,14092
    17d8:	014000c4 	movi	r5,3
    17dc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a02, 0x03);
    17e0:	010e8084 	movi	r4,14850
    17e4:	014000c4 	movi	r5,3
    17e8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a03, 0xd8);
    17ec:	010e80c4 	movi	r4,14851
    17f0:	01403604 	movi	r5,216
    17f4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a08, 0x01);
    17f8:	010e8204 	movi	r4,14856
    17fc:	01400044 	movi	r5,1
    1800:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a09, 0x27);
    1804:	010e8244 	movi	r4,14857
    1808:	014009c4 	movi	r5,39
    180c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a0a, 0x00);
    1810:	010e8284 	movi	r4,14858
    1814:	000b883a 	mov	r5,zero
    1818:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a0b, 0xf6);
    181c:	010e82c4 	movi	r4,14859
    1820:	01403d84 	movi	r5,246
    1824:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a0e, 0x03);
    1828:	010e8384 	movi	r4,14862
    182c:	014000c4 	movi	r5,3
    1830:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a0d, 0x04);
    1834:	010e8344 	movi	r4,14861
    1838:	01400104 	movi	r5,4
    183c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a14, 0x03);
    1840:	010e8504 	movi	r4,14868
    1844:	014000c4 	movi	r5,3
    1848:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a15, 0xd8);
    184c:	010e8544 	movi	r4,14869
    1850:	01403604 	movi	r5,216
    1854:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4001, 0x02);
    1858:	01100044 	movi	r4,16385
    185c:	01400084 	movi	r5,2
    1860:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4004, 0x02);
    1864:	01100104 	movi	r4,16388
    1868:	01400084 	movi	r5,2
    186c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3000, 0x00);
    1870:	010c0004 	movi	r4,12288
    1874:	000b883a 	mov	r5,zero
    1878:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3002, 0x1c);
    187c:	010c0084 	movi	r4,12290
    1880:	01400704 	movi	r5,28
    1884:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3004, 0xff);
    1888:	010c0104 	movi	r4,12292
    188c:	01403fc4 	movi	r5,255
    1890:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3006, 0xc3);
    1894:	010c0184 	movi	r4,12294
    1898:	014030c4 	movi	r5,195
    189c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x300e, 0x58);
    18a0:	010c0384 	movi	r4,12302
    18a4:	01401604 	movi	r5,88
    18a8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x302e, 0x00);
    18ac:	010c0b84 	movi	r4,12334
    18b0:	000b883a 	mov	r5,zero
    18b4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4300, 0xf8);
    18b8:	0110c004 	movi	r4,17152
    18bc:	01403e04 	movi	r5,248
    18c0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x501f, 0x03);
    18c4:	011407c4 	movi	r4,20511
    18c8:	014000c4 	movi	r5,3
    18cc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4713, 0x03);
    18d0:	0111c4c4 	movi	r4,18195
    18d4:	014000c4 	movi	r5,3
    18d8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4407, 0x04);
    18dc:	011101c4 	movi	r4,17415
    18e0:	01400104 	movi	r5,4
    18e4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x440e, 0x00);
    18e8:	01110384 	movi	r4,17422
    18ec:	000b883a 	mov	r5,zero
    18f0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x460b, 0x37);
    18f4:	011182c4 	movi	r4,17931
    18f8:	01400dc4 	movi	r5,55
    18fc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x460c, 0x20);
    1900:	01118304 	movi	r4,17932
    1904:	01400804 	movi	r5,32
    1908:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4837, 0x16);
    190c:	01120dc4 	movi	r4,18487
    1910:	01400584 	movi	r5,22
    1914:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3824, 0x04);
    1918:	010e0904 	movi	r4,14372
    191c:	01400104 	movi	r5,4
    1920:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x5000, 0x00);
    1924:	01140004 	movi	r4,20480
    1928:	000b883a 	mov	r5,zero
    192c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x5001, 0x00);
    1930:	01140044 	movi	r4,20481
    1934:	000b883a 	mov	r5,zero
    1938:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a0f, 0x36);
    193c:	010e83c4 	movi	r4,14863
    1940:	01400d84 	movi	r5,54
    1944:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a10, 0x2e);
    1948:	010e8404 	movi	r4,14864
    194c:	01400b84 	movi	r5,46
    1950:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a1b, 0x38);
    1954:	010e86c4 	movi	r4,14875
    1958:	01400e04 	movi	r5,56
    195c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a1e, 0x2c);
    1960:	010e8784 	movi	r4,14878
    1964:	01400b04 	movi	r5,44
    1968:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a11, 0x70);
    196c:	010e8444 	movi	r4,14865
    1970:	01401c04 	movi	r5,112
    1974:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3a1f, 0x18);
    1978:	010e87c4 	movi	r4,14879
    197c:	01400604 	movi	r5,24
    1980:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3008, 0x02);
    1984:	010c0204 	movi	r4,12296
    1988:	01400084 	movi	r5,2
    198c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3035, 0x21);
    1990:	010c0d44 	movi	r4,12341
    1994:	01400844 	movi	r5,33
    1998:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3400, 0x04);
    199c:	010d0004 	movi	r4,13312
    19a0:	01400104 	movi	r5,4
    19a4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3401, 0x00);
    19a8:	010d0044 	movi	r4,13313
    19ac:	000b883a 	mov	r5,zero
    19b0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3402, 0x04);
    19b4:	010d0084 	movi	r4,13314
    19b8:	01400104 	movi	r5,4
    19bc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3403, 0x00);
    19c0:	010d00c4 	movi	r4,13315
    19c4:	000b883a 	mov	r5,zero
    19c8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3404, 0x04);
    19cc:	010d0104 	movi	r4,13316
    19d0:	01400104 	movi	r5,4
    19d4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3405, 0x00);
    19d8:	010d0144 	movi	r4,13317
    19dc:	000b883a 	mov	r5,zero
    19e0:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3406, 0x01);
    19e4:	010d0184 	movi	r4,13318
    19e8:	01400044 	movi	r5,1
    19ec:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x4000, 0x88);
    19f0:	01100004 	movi	r4,16384
    19f4:	01402204 	movi	r5,136
    19f8:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3503, 0x03);
    19fc:	010d40c4 	movi	r4,13571
    1a00:	014000c4 	movi	r5,3
    1a04:	00013b40 	call	13b4 <ov_wr_reg>

	unsigned int cmos_exposure = 0x300;
    1a08:	0080c004 	movi	r2,768
    1a0c:	e0bfff15 	stw	r2,-4(fp)
	unsigned int cmos_gain = 0x40;
    1a10:	00801004 	movi	r2,64
    1a14:	e0bffe15 	stw	r2,-8(fp)
    ov_wr_reg(0x3500, 0x00);// Exposure [19:16]
    1a18:	010d4004 	movi	r4,13568
    1a1c:	000b883a 	mov	r5,zero
    1a20:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3501, (cmos_exposure>>4)&0x3f);// Exposure [15:8]
    1a24:	e0bfff17 	ldw	r2,-4(fp)
    1a28:	1004d13a 	srli	r2,r2,4
    1a2c:	10803fcc 	andi	r2,r2,255
    1a30:	11400fcc 	andi	r5,r2,63
    1a34:	010d4044 	movi	r4,13569
    1a38:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3502, (cmos_exposure&0x0f)<<4);// Exposure [7:0]
    1a3c:	e0bfff17 	ldw	r2,-4(fp)
    1a40:	108003cc 	andi	r2,r2,15
    1a44:	1004913a 	slli	r2,r2,4
    1a48:	11403fcc 	andi	r5,r2,255
    1a4c:	010d4084 	movi	r4,13570
    1a50:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x350a, (cmos_gain>>8)&0x3);// Real gain[9:8]
    1a54:	e0bffe17 	ldw	r2,-8(fp)
    1a58:	1004d23a 	srli	r2,r2,8
    1a5c:	10803fcc 	andi	r2,r2,255
    1a60:	114000cc 	andi	r5,r2,3
    1a64:	010d4284 	movi	r4,13578
    1a68:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x350b, cmos_gain&0x0ff);// Real gain[7:0]
    1a6c:	e0bffe17 	ldw	r2,-8(fp)
    1a70:	11403fcc 	andi	r5,r2,255
    1a74:	010d42c4 	movi	r4,13579
    1a78:	00013b40 	call	13b4 <ov_wr_reg>

	printf("=== ov5640_init_raw_1280_960_30fps_crop_960_544 initialize OK!\n");
    1a7c:	01000074 	movhi	r4,1
    1a80:	21386a04 	addi	r4,r4,-7768
    1a84:	0001df00 	call	1df0 <puts>
	return 0;
    1a88:	0005883a 	mov	r2,zero
}
    1a8c:	e037883a 	mov	sp,fp
    1a90:	dfc00117 	ldw	ra,4(sp)
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00204 	addi	sp,sp,8
    1a9c:	f800283a 	ret

00001aa0 <cmos_set_exposure>:

int cmos_set_exposure(unsigned exposure)
{
    1aa0:	defffd04 	addi	sp,sp,-12
    1aa4:	dfc00215 	stw	ra,8(sp)
    1aa8:	df000115 	stw	fp,4(sp)
    1aac:	df000104 	addi	fp,sp,4
    1ab0:	e13fff15 	stw	r4,-4(fp)
    ov_wr_reg(0x3500, 0x00);// Exposure [19:16]
    1ab4:	010d4004 	movi	r4,13568
    1ab8:	000b883a 	mov	r5,zero
    1abc:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3501, (exposure>>4)&0x3f);// Exposure [15:8]
    1ac0:	e0bfff17 	ldw	r2,-4(fp)
    1ac4:	1004d13a 	srli	r2,r2,4
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	11400fcc 	andi	r5,r2,63
    1ad0:	010d4044 	movi	r4,13569
    1ad4:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x3502, (exposure&0x0f)<<4);// Exposure [7:0]
    1ad8:	e0bfff17 	ldw	r2,-4(fp)
    1adc:	108003cc 	andi	r2,r2,15
    1ae0:	1004913a 	slli	r2,r2,4
    1ae4:	11403fcc 	andi	r5,r2,255
    1ae8:	010d4084 	movi	r4,13570
    1aec:	00013b40 	call	13b4 <ov_wr_reg>
}
    1af0:	e037883a 	mov	sp,fp
    1af4:	dfc00117 	ldw	ra,4(sp)
    1af8:	df000017 	ldw	fp,0(sp)
    1afc:	dec00204 	addi	sp,sp,8
    1b00:	f800283a 	ret

00001b04 <cmos_set_gain>:

int cmos_set_gain(unsigned gain)
{
    1b04:	defffd04 	addi	sp,sp,-12
    1b08:	dfc00215 	stw	ra,8(sp)
    1b0c:	df000115 	stw	fp,4(sp)
    1b10:	df000104 	addi	fp,sp,4
    1b14:	e13fff15 	stw	r4,-4(fp)
	ov_wr_reg(0x350a, (gain>>8)&0x3);// Real gain[9:8]
    1b18:	e0bfff17 	ldw	r2,-4(fp)
    1b1c:	1004d23a 	srli	r2,r2,8
    1b20:	10803fcc 	andi	r2,r2,255
    1b24:	114000cc 	andi	r5,r2,3
    1b28:	010d4284 	movi	r4,13578
    1b2c:	00013b40 	call	13b4 <ov_wr_reg>
	ov_wr_reg(0x350b, gain&0x0ff);// Real gain[7:0]
    1b30:	e0bfff17 	ldw	r2,-4(fp)
    1b34:	11403fcc 	andi	r5,r2,255
    1b38:	010d42c4 	movi	r4,13579
    1b3c:	00013b40 	call	13b4 <ov_wr_reg>
}
    1b40:	e037883a 	mov	sp,fp
    1b44:	dfc00117 	ldw	ra,4(sp)
    1b48:	df000017 	ldw	fp,0(sp)
    1b4c:	dec00204 	addi	sp,sp,8
    1b50:	f800283a 	ret

00001b54 <udivmodsi4>:
    1b54:	29001b2e 	bgeu	r5,r4,1bc4 <udivmodsi4+0x70>
    1b58:	28001a16 	blt	r5,zero,1bc4 <udivmodsi4+0x70>
    1b5c:	00800044 	movi	r2,1
    1b60:	0007883a 	mov	r3,zero
    1b64:	01c007c4 	movi	r7,31
    1b68:	00000306 	br	1b78 <udivmodsi4+0x24>
    1b6c:	19c01326 	beq	r3,r7,1bbc <udivmodsi4+0x68>
    1b70:	18c00044 	addi	r3,r3,1
    1b74:	28000416 	blt	r5,zero,1b88 <udivmodsi4+0x34>
    1b78:	294b883a 	add	r5,r5,r5
    1b7c:	1085883a 	add	r2,r2,r2
    1b80:	293ffa36 	bltu	r5,r4,1b6c <udivmodsi4+0x18>
    1b84:	10000d26 	beq	r2,zero,1bbc <udivmodsi4+0x68>
    1b88:	0007883a 	mov	r3,zero
    1b8c:	21400236 	bltu	r4,r5,1b98 <udivmodsi4+0x44>
    1b90:	2149c83a 	sub	r4,r4,r5
    1b94:	1886b03a 	or	r3,r3,r2
    1b98:	1004d07a 	srli	r2,r2,1
    1b9c:	280ad07a 	srli	r5,r5,1
    1ba0:	103ffa1e 	bne	r2,zero,1b8c <udivmodsi4+0x38>
    1ba4:	30000226 	beq	r6,zero,1bb0 <udivmodsi4+0x5c>
    1ba8:	2005883a 	mov	r2,r4
    1bac:	f800283a 	ret
    1bb0:	1809883a 	mov	r4,r3
    1bb4:	2005883a 	mov	r2,r4
    1bb8:	f800283a 	ret
    1bbc:	0007883a 	mov	r3,zero
    1bc0:	003ff806 	br	1ba4 <udivmodsi4+0x50>
    1bc4:	00800044 	movi	r2,1
    1bc8:	0007883a 	mov	r3,zero
    1bcc:	003fef06 	br	1b8c <udivmodsi4+0x38>

00001bd0 <__divsi3>:
    1bd0:	defffe04 	addi	sp,sp,-8
    1bd4:	dc000015 	stw	r16,0(sp)
    1bd8:	dfc00115 	stw	ra,4(sp)
    1bdc:	0021883a 	mov	r16,zero
    1be0:	20000c16 	blt	r4,zero,1c14 <__divsi3+0x44>
    1be4:	000d883a 	mov	r6,zero
    1be8:	28000e16 	blt	r5,zero,1c24 <__divsi3+0x54>
    1bec:	0001b540 	call	1b54 <udivmodsi4>
    1bf0:	1007883a 	mov	r3,r2
    1bf4:	8005003a 	cmpeq	r2,r16,zero
    1bf8:	1000011e 	bne	r2,zero,1c00 <__divsi3+0x30>
    1bfc:	00c7c83a 	sub	r3,zero,r3
    1c00:	1805883a 	mov	r2,r3
    1c04:	dfc00117 	ldw	ra,4(sp)
    1c08:	dc000017 	ldw	r16,0(sp)
    1c0c:	dec00204 	addi	sp,sp,8
    1c10:	f800283a 	ret
    1c14:	0109c83a 	sub	r4,zero,r4
    1c18:	04000044 	movi	r16,1
    1c1c:	000d883a 	mov	r6,zero
    1c20:	283ff20e 	bge	r5,zero,1bec <__divsi3+0x1c>
    1c24:	014bc83a 	sub	r5,zero,r5
    1c28:	8021003a 	cmpeq	r16,r16,zero
    1c2c:	003fef06 	br	1bec <__divsi3+0x1c>

00001c30 <__modsi3>:
    1c30:	deffff04 	addi	sp,sp,-4
    1c34:	dfc00015 	stw	ra,0(sp)
    1c38:	01800044 	movi	r6,1
    1c3c:	2807883a 	mov	r3,r5
    1c40:	20000416 	blt	r4,zero,1c54 <__modsi3+0x24>
    1c44:	28000c16 	blt	r5,zero,1c78 <__modsi3+0x48>
    1c48:	dfc00017 	ldw	ra,0(sp)
    1c4c:	dec00104 	addi	sp,sp,4
    1c50:	0001b541 	jmpi	1b54 <udivmodsi4>
    1c54:	0109c83a 	sub	r4,zero,r4
    1c58:	28000b16 	blt	r5,zero,1c88 <__modsi3+0x58>
    1c5c:	180b883a 	mov	r5,r3
    1c60:	01800044 	movi	r6,1
    1c64:	0001b540 	call	1b54 <udivmodsi4>
    1c68:	0085c83a 	sub	r2,zero,r2
    1c6c:	dfc00017 	ldw	ra,0(sp)
    1c70:	dec00104 	addi	sp,sp,4
    1c74:	f800283a 	ret
    1c78:	014bc83a 	sub	r5,zero,r5
    1c7c:	dfc00017 	ldw	ra,0(sp)
    1c80:	dec00104 	addi	sp,sp,4
    1c84:	0001b541 	jmpi	1b54 <udivmodsi4>
    1c88:	0147c83a 	sub	r3,zero,r5
    1c8c:	003ff306 	br	1c5c <__modsi3+0x2c>

00001c90 <__udivsi3>:
    1c90:	000d883a 	mov	r6,zero
    1c94:	0001b541 	jmpi	1b54 <udivmodsi4>

00001c98 <__umodsi3>:
    1c98:	01800044 	movi	r6,1
    1c9c:	0001b541 	jmpi	1b54 <udivmodsi4>

00001ca0 <__mulsi3>:
    1ca0:	20000a26 	beq	r4,zero,1ccc <__mulsi3+0x2c>
    1ca4:	0007883a 	mov	r3,zero
    1ca8:	2080004c 	andi	r2,r4,1
    1cac:	1005003a 	cmpeq	r2,r2,zero
    1cb0:	2008d07a 	srli	r4,r4,1
    1cb4:	1000011e 	bne	r2,zero,1cbc <__mulsi3+0x1c>
    1cb8:	1947883a 	add	r3,r3,r5
    1cbc:	294b883a 	add	r5,r5,r5
    1cc0:	203ff91e 	bne	r4,zero,1ca8 <__mulsi3+0x8>
    1cc4:	1805883a 	mov	r2,r3
    1cc8:	f800283a 	ret
    1ccc:	0007883a 	mov	r3,zero
    1cd0:	1805883a 	mov	r2,r3
    1cd4:	f800283a 	ret

00001cd8 <printf>:
    1cd8:	defffb04 	addi	sp,sp,-20
    1cdc:	dfc00115 	stw	ra,4(sp)
    1ce0:	d9400215 	stw	r5,8(sp)
    1ce4:	d9800315 	stw	r6,12(sp)
    1ce8:	d9c00415 	stw	r7,16(sp)
    1cec:	00800074 	movhi	r2,1
    1cf0:	10bfd204 	addi	r2,r2,-184
    1cf4:	10c00017 	ldw	r3,0(r2)
    1cf8:	200b883a 	mov	r5,r4
    1cfc:	d8800204 	addi	r2,sp,8
    1d00:	19000217 	ldw	r4,8(r3)
    1d04:	100d883a 	mov	r6,r2
    1d08:	d8800015 	stw	r2,0(sp)
    1d0c:	0003d940 	call	3d94 <__vfprintf_internal>
    1d10:	dfc00117 	ldw	ra,4(sp)
    1d14:	dec00504 	addi	sp,sp,20
    1d18:	f800283a 	ret

00001d1c <_printf_r>:
    1d1c:	defffc04 	addi	sp,sp,-16
    1d20:	dfc00115 	stw	ra,4(sp)
    1d24:	d9800215 	stw	r6,8(sp)
    1d28:	d9c00315 	stw	r7,12(sp)
    1d2c:	280d883a 	mov	r6,r5
    1d30:	21400217 	ldw	r5,8(r4)
    1d34:	d8c00204 	addi	r3,sp,8
    1d38:	180f883a 	mov	r7,r3
    1d3c:	d8c00015 	stw	r3,0(sp)
    1d40:	0001ed00 	call	1ed0 <___vfprintf_internal_r>
    1d44:	dfc00117 	ldw	ra,4(sp)
    1d48:	dec00404 	addi	sp,sp,16
    1d4c:	f800283a 	ret

00001d50 <_puts_r>:
    1d50:	defff604 	addi	sp,sp,-40
    1d54:	dc400715 	stw	r17,28(sp)
    1d58:	2023883a 	mov	r17,r4
    1d5c:	2809883a 	mov	r4,r5
    1d60:	dfc00915 	stw	ra,36(sp)
    1d64:	dcc00815 	stw	r19,32(sp)
    1d68:	2827883a 	mov	r19,r5
    1d6c:	0001e040 	call	1e04 <strlen>
    1d70:	89400217 	ldw	r5,8(r17)
    1d74:	00c00074 	movhi	r3,1
    1d78:	18f87a04 	addi	r3,r3,-7704
    1d7c:	01c00044 	movi	r7,1
    1d80:	12000044 	addi	r8,r2,1
    1d84:	d8c00515 	stw	r3,20(sp)
    1d88:	d9c00615 	stw	r7,24(sp)
    1d8c:	d8c00304 	addi	r3,sp,12
    1d90:	01c00084 	movi	r7,2
    1d94:	8809883a 	mov	r4,r17
    1d98:	d80d883a 	mov	r6,sp
    1d9c:	d8c00015 	stw	r3,0(sp)
    1da0:	dcc00315 	stw	r19,12(sp)
    1da4:	da000215 	stw	r8,8(sp)
    1da8:	d9c00115 	stw	r7,4(sp)
    1dac:	d8800415 	stw	r2,16(sp)
    1db0:	00060500 	call	6050 <__sfvwrite_r>
    1db4:	00ffffc4 	movi	r3,-1
    1db8:	10000626 	beq	r2,zero,1dd4 <_puts_r+0x84>
    1dbc:	1805883a 	mov	r2,r3
    1dc0:	dfc00917 	ldw	ra,36(sp)
    1dc4:	dcc00817 	ldw	r19,32(sp)
    1dc8:	dc400717 	ldw	r17,28(sp)
    1dcc:	dec00a04 	addi	sp,sp,40
    1dd0:	f800283a 	ret
    1dd4:	00c00284 	movi	r3,10
    1dd8:	1805883a 	mov	r2,r3
    1ddc:	dfc00917 	ldw	ra,36(sp)
    1de0:	dcc00817 	ldw	r19,32(sp)
    1de4:	dc400717 	ldw	r17,28(sp)
    1de8:	dec00a04 	addi	sp,sp,40
    1dec:	f800283a 	ret

00001df0 <puts>:
    1df0:	00800074 	movhi	r2,1
    1df4:	10bfd204 	addi	r2,r2,-184
    1df8:	200b883a 	mov	r5,r4
    1dfc:	11000017 	ldw	r4,0(r2)
    1e00:	0001d501 	jmpi	1d50 <_puts_r>

00001e04 <strlen>:
    1e04:	208000cc 	andi	r2,r4,3
    1e08:	2011883a 	mov	r8,r4
    1e0c:	1000161e 	bne	r2,zero,1e68 <strlen+0x64>
    1e10:	20c00017 	ldw	r3,0(r4)
    1e14:	017fbff4 	movhi	r5,65279
    1e18:	297fbfc4 	addi	r5,r5,-257
    1e1c:	01e02074 	movhi	r7,32897
    1e20:	39e02004 	addi	r7,r7,-32640
    1e24:	1945883a 	add	r2,r3,r5
    1e28:	11c4703a 	and	r2,r2,r7
    1e2c:	00c6303a 	nor	r3,zero,r3
    1e30:	1886703a 	and	r3,r3,r2
    1e34:	18000c1e 	bne	r3,zero,1e68 <strlen+0x64>
    1e38:	280d883a 	mov	r6,r5
    1e3c:	380b883a 	mov	r5,r7
    1e40:	21000104 	addi	r4,r4,4
    1e44:	20800017 	ldw	r2,0(r4)
    1e48:	1187883a 	add	r3,r2,r6
    1e4c:	1946703a 	and	r3,r3,r5
    1e50:	0084303a 	nor	r2,zero,r2
    1e54:	10c4703a 	and	r2,r2,r3
    1e58:	103ff926 	beq	r2,zero,1e40 <strlen+0x3c>
    1e5c:	20800007 	ldb	r2,0(r4)
    1e60:	10000326 	beq	r2,zero,1e70 <strlen+0x6c>
    1e64:	21000044 	addi	r4,r4,1
    1e68:	20800007 	ldb	r2,0(r4)
    1e6c:	103ffd1e 	bne	r2,zero,1e64 <strlen+0x60>
    1e70:	2205c83a 	sub	r2,r4,r8
    1e74:	f800283a 	ret

00001e78 <__sprint_r>:
    1e78:	30800217 	ldw	r2,8(r6)
    1e7c:	defffe04 	addi	sp,sp,-8
    1e80:	dc000015 	stw	r16,0(sp)
    1e84:	dfc00115 	stw	ra,4(sp)
    1e88:	3021883a 	mov	r16,r6
    1e8c:	0007883a 	mov	r3,zero
    1e90:	1000061e 	bne	r2,zero,1eac <__sprint_r+0x34>
    1e94:	1805883a 	mov	r2,r3
    1e98:	30000115 	stw	zero,4(r6)
    1e9c:	dfc00117 	ldw	ra,4(sp)
    1ea0:	dc000017 	ldw	r16,0(sp)
    1ea4:	dec00204 	addi	sp,sp,8
    1ea8:	f800283a 	ret
    1eac:	00060500 	call	6050 <__sfvwrite_r>
    1eb0:	1007883a 	mov	r3,r2
    1eb4:	1805883a 	mov	r2,r3
    1eb8:	80000115 	stw	zero,4(r16)
    1ebc:	80000215 	stw	zero,8(r16)
    1ec0:	dfc00117 	ldw	ra,4(sp)
    1ec4:	dc000017 	ldw	r16,0(sp)
    1ec8:	dec00204 	addi	sp,sp,8
    1ecc:	f800283a 	ret

00001ed0 <___vfprintf_internal_r>:
    1ed0:	defea404 	addi	sp,sp,-1392
    1ed4:	dd815815 	stw	r22,1376(sp)
    1ed8:	dc015215 	stw	r16,1352(sp)
    1edc:	d9c15115 	stw	r7,1348(sp)
    1ee0:	dfc15b15 	stw	ra,1388(sp)
    1ee4:	df015a15 	stw	fp,1384(sp)
    1ee8:	ddc15915 	stw	r23,1380(sp)
    1eec:	dd415715 	stw	r21,1372(sp)
    1ef0:	dd015615 	stw	r20,1368(sp)
    1ef4:	dcc15515 	stw	r19,1364(sp)
    1ef8:	dc815415 	stw	r18,1360(sp)
    1efc:	dc415315 	stw	r17,1356(sp)
    1f00:	282d883a 	mov	r22,r5
    1f04:	3021883a 	mov	r16,r6
    1f08:	d9014f15 	stw	r4,1340(sp)
    1f0c:	00066740 	call	6674 <_localeconv_r>
    1f10:	10800017 	ldw	r2,0(r2)
    1f14:	d9c15117 	ldw	r7,1348(sp)
    1f18:	d8814915 	stw	r2,1316(sp)
    1f1c:	d8814f17 	ldw	r2,1340(sp)
    1f20:	10000226 	beq	r2,zero,1f2c <___vfprintf_internal_r+0x5c>
    1f24:	10800e17 	ldw	r2,56(r2)
    1f28:	10020d26 	beq	r2,zero,2760 <___vfprintf_internal_r+0x890>
    1f2c:	b080030b 	ldhu	r2,12(r22)
    1f30:	1080020c 	andi	r2,r2,8
    1f34:	10020e26 	beq	r2,zero,2770 <___vfprintf_internal_r+0x8a0>
    1f38:	b0800417 	ldw	r2,16(r22)
    1f3c:	10020c26 	beq	r2,zero,2770 <___vfprintf_internal_r+0x8a0>
    1f40:	b200030b 	ldhu	r8,12(r22)
    1f44:	00800284 	movi	r2,10
    1f48:	40c0068c 	andi	r3,r8,26
    1f4c:	18802f1e 	bne	r3,r2,200c <___vfprintf_internal_r+0x13c>
    1f50:	b080038f 	ldh	r2,14(r22)
    1f54:	10002d16 	blt	r2,zero,200c <___vfprintf_internal_r+0x13c>
    1f58:	b240038b 	ldhu	r9,14(r22)
    1f5c:	b2800717 	ldw	r10,28(r22)
    1f60:	b2c00917 	ldw	r11,36(r22)
    1f64:	d9014f17 	ldw	r4,1340(sp)
    1f68:	dc402904 	addi	r17,sp,164
    1f6c:	d8804004 	addi	r2,sp,256
    1f70:	00c10004 	movi	r3,1024
    1f74:	423fff4c 	andi	r8,r8,65533
    1f78:	800d883a 	mov	r6,r16
    1f7c:	880b883a 	mov	r5,r17
    1f80:	da002c0d 	sth	r8,176(sp)
    1f84:	da402c8d 	sth	r9,178(sp)
    1f88:	da803015 	stw	r10,192(sp)
    1f8c:	dac03215 	stw	r11,200(sp)
    1f90:	d8802d15 	stw	r2,180(sp)
    1f94:	d8c02e15 	stw	r3,184(sp)
    1f98:	d8802915 	stw	r2,164(sp)
    1f9c:	d8c02b15 	stw	r3,172(sp)
    1fa0:	d8002f15 	stw	zero,188(sp)
    1fa4:	0001ed00 	call	1ed0 <___vfprintf_internal_r>
    1fa8:	d8814b15 	stw	r2,1324(sp)
    1fac:	10000416 	blt	r2,zero,1fc0 <___vfprintf_internal_r+0xf0>
    1fb0:	d9014f17 	ldw	r4,1340(sp)
    1fb4:	880b883a 	mov	r5,r17
    1fb8:	00056ec0 	call	56ec <_fflush_r>
    1fbc:	1002321e 	bne	r2,zero,2888 <___vfprintf_internal_r+0x9b8>
    1fc0:	d8802c0b 	ldhu	r2,176(sp)
    1fc4:	1080100c 	andi	r2,r2,64
    1fc8:	10000326 	beq	r2,zero,1fd8 <___vfprintf_internal_r+0x108>
    1fcc:	b080030b 	ldhu	r2,12(r22)
    1fd0:	10801014 	ori	r2,r2,64
    1fd4:	b080030d 	sth	r2,12(r22)
    1fd8:	d8814b17 	ldw	r2,1324(sp)
    1fdc:	dfc15b17 	ldw	ra,1388(sp)
    1fe0:	df015a17 	ldw	fp,1384(sp)
    1fe4:	ddc15917 	ldw	r23,1380(sp)
    1fe8:	dd815817 	ldw	r22,1376(sp)
    1fec:	dd415717 	ldw	r21,1372(sp)
    1ff0:	dd015617 	ldw	r20,1368(sp)
    1ff4:	dcc15517 	ldw	r19,1364(sp)
    1ff8:	dc815417 	ldw	r18,1360(sp)
    1ffc:	dc415317 	ldw	r17,1356(sp)
    2000:	dc015217 	ldw	r16,1352(sp)
    2004:	dec15c04 	addi	sp,sp,1392
    2008:	f800283a 	ret
    200c:	0005883a 	mov	r2,zero
    2010:	0007883a 	mov	r3,zero
    2014:	dd401904 	addi	r21,sp,100
    2018:	d8814215 	stw	r2,1288(sp)
    201c:	802f883a 	mov	r23,r16
    2020:	d8c14315 	stw	r3,1292(sp)
    2024:	d8014b15 	stw	zero,1324(sp)
    2028:	d8014815 	stw	zero,1312(sp)
    202c:	d8014415 	stw	zero,1296(sp)
    2030:	d8014715 	stw	zero,1308(sp)
    2034:	dd400c15 	stw	r21,48(sp)
    2038:	d8000e15 	stw	zero,56(sp)
    203c:	d8000d15 	stw	zero,52(sp)
    2040:	b8800007 	ldb	r2,0(r23)
    2044:	10001926 	beq	r2,zero,20ac <___vfprintf_internal_r+0x1dc>
    2048:	00c00944 	movi	r3,37
    204c:	10c01726 	beq	r2,r3,20ac <___vfprintf_internal_r+0x1dc>
    2050:	b821883a 	mov	r16,r23
    2054:	00000106 	br	205c <___vfprintf_internal_r+0x18c>
    2058:	10c00326 	beq	r2,r3,2068 <___vfprintf_internal_r+0x198>
    205c:	84000044 	addi	r16,r16,1
    2060:	80800007 	ldb	r2,0(r16)
    2064:	103ffc1e 	bne	r2,zero,2058 <___vfprintf_internal_r+0x188>
    2068:	85e7c83a 	sub	r19,r16,r23
    206c:	98000e26 	beq	r19,zero,20a8 <___vfprintf_internal_r+0x1d8>
    2070:	dc800e17 	ldw	r18,56(sp)
    2074:	dc400d17 	ldw	r17,52(sp)
    2078:	008001c4 	movi	r2,7
    207c:	94e5883a 	add	r18,r18,r19
    2080:	8c400044 	addi	r17,r17,1
    2084:	adc00015 	stw	r23,0(r21)
    2088:	dc800e15 	stw	r18,56(sp)
    208c:	acc00115 	stw	r19,4(r21)
    2090:	dc400d15 	stw	r17,52(sp)
    2094:	14428b16 	blt	r2,r17,2ac4 <___vfprintf_internal_r+0xbf4>
    2098:	ad400204 	addi	r21,r21,8
    209c:	d9014b17 	ldw	r4,1324(sp)
    20a0:	24c9883a 	add	r4,r4,r19
    20a4:	d9014b15 	stw	r4,1324(sp)
    20a8:	802f883a 	mov	r23,r16
    20ac:	b8800007 	ldb	r2,0(r23)
    20b0:	10013c26 	beq	r2,zero,25a4 <___vfprintf_internal_r+0x6d4>
    20b4:	bdc00044 	addi	r23,r23,1
    20b8:	d8000405 	stb	zero,16(sp)
    20bc:	b8c00007 	ldb	r3,0(r23)
    20c0:	04ffffc4 	movi	r19,-1
    20c4:	d8014c15 	stw	zero,1328(sp)
    20c8:	d8014a15 	stw	zero,1320(sp)
    20cc:	d8c14d15 	stw	r3,1332(sp)
    20d0:	bdc00044 	addi	r23,r23,1
    20d4:	d9414d17 	ldw	r5,1332(sp)
    20d8:	00801604 	movi	r2,88
    20dc:	28fff804 	addi	r3,r5,-32
    20e0:	10c06036 	bltu	r2,r3,2264 <___vfprintf_internal_r+0x394>
    20e4:	18c5883a 	add	r2,r3,r3
    20e8:	1085883a 	add	r2,r2,r2
    20ec:	00c00034 	movhi	r3,0
    20f0:	18c84004 	addi	r3,r3,8448
    20f4:	10c5883a 	add	r2,r2,r3
    20f8:	11000017 	ldw	r4,0(r2)
    20fc:	2000683a 	jmp	r4
    2100:	00003074 	movhi	zero,193
    2104:	00002264 	muli	zero,zero,137
    2108:	00002264 	muli	zero,zero,137
    210c:	00003060 	cmpeqi	zero,zero,193
    2110:	00002264 	muli	zero,zero,137
    2114:	00002264 	muli	zero,zero,137
    2118:	00002264 	muli	zero,zero,137
    211c:	00002264 	muli	zero,zero,137
    2120:	00002264 	muli	zero,zero,137
    2124:	00002264 	muli	zero,zero,137
    2128:	00002e40 	call	2e4 <isp_ae_handler+0xf4>
    212c:	00003050 	cmplti	zero,zero,193
    2130:	00002264 	muli	zero,zero,137
    2134:	00002e58 	cmpnei	zero,zero,185
    2138:	000030f8 	rdprs	zero,zero,195
    213c:	00002264 	muli	zero,zero,137
    2140:	000030e4 	muli	zero,zero,195
    2144:	000030a0 	cmpeqi	zero,zero,194
    2148:	000030a0 	cmpeqi	zero,zero,194
    214c:	000030a0 	cmpeqi	zero,zero,194
    2150:	000030a0 	cmpeqi	zero,zero,194
    2154:	000030a0 	cmpeqi	zero,zero,194
    2158:	000030a0 	cmpeqi	zero,zero,194
    215c:	000030a0 	cmpeqi	zero,zero,194
    2160:	000030a0 	cmpeqi	zero,zero,194
    2164:	000030a0 	cmpeqi	zero,zero,194
    2168:	00002264 	muli	zero,zero,137
    216c:	00002264 	muli	zero,zero,137
    2170:	00002264 	muli	zero,zero,137
    2174:	00002264 	muli	zero,zero,137
    2178:	00002264 	muli	zero,zero,137
    217c:	00002264 	muli	zero,zero,137
    2180:	00002264 	muli	zero,zero,137
    2184:	00002264 	muli	zero,zero,137
    2188:	00002264 	muli	zero,zero,137
    218c:	00002264 	muli	zero,zero,137
    2190:	000028bc 	xorhi	zero,zero,162
    2194:	00002f28 	cmpgeui	zero,zero,188
    2198:	00002264 	muli	zero,zero,137
    219c:	00002f28 	cmpgeui	zero,zero,188
    21a0:	00002264 	muli	zero,zero,137
    21a4:	00002264 	muli	zero,zero,137
    21a8:	00002264 	muli	zero,zero,137
    21ac:	00002264 	muli	zero,zero,137
    21b0:	0000308c 	andi	zero,zero,194
    21b4:	00002264 	muli	zero,zero,137
    21b8:	00002264 	muli	zero,zero,137
    21bc:	00002970 	cmpltui	zero,zero,165
    21c0:	00002264 	muli	zero,zero,137
    21c4:	00002264 	muli	zero,zero,137
    21c8:	00002264 	muli	zero,zero,137
    21cc:	00002264 	muli	zero,zero,137
    21d0:	00002264 	muli	zero,zero,137
    21d4:	000029bc 	xorhi	zero,zero,166
    21d8:	00002264 	muli	zero,zero,137
    21dc:	00002264 	muli	zero,zero,137
    21e0:	00002fdc 	xori	zero,zero,191
    21e4:	00002264 	muli	zero,zero,137
    21e8:	00002264 	muli	zero,zero,137
    21ec:	00002264 	muli	zero,zero,137
    21f0:	00002264 	muli	zero,zero,137
    21f4:	00002264 	muli	zero,zero,137
    21f8:	00002264 	muli	zero,zero,137
    21fc:	00002264 	muli	zero,zero,137
    2200:	00002264 	muli	zero,zero,137
    2204:	00002264 	muli	zero,zero,137
    2208:	00002264 	muli	zero,zero,137
    220c:	00002fb0 	cmpltui	zero,zero,190
    2210:	000028c8 	cmpgei	zero,zero,163
    2214:	00002f28 	cmpgeui	zero,zero,188
    2218:	00002f28 	cmpgeui	zero,zero,188
    221c:	00002f28 	cmpgeui	zero,zero,188
    2220:	00002f14 	movui	zero,188
    2224:	000028c8 	cmpgei	zero,zero,163
    2228:	00002264 	muli	zero,zero,137
    222c:	00002264 	muli	zero,zero,137
    2230:	00002e9c 	xori	zero,zero,186
    2234:	00002264 	muli	zero,zero,137
    2238:	00002e6c 	andhi	zero,zero,185
    223c:	0000297c 	xorhi	zero,zero,165
    2240:	00002ecc 	andi	zero,zero,187
    2244:	00002eb8 	rdprs	zero,zero,186
    2248:	00002264 	muli	zero,zero,137
    224c:	00003160 	cmpeqi	zero,zero,197
    2250:	00002264 	muli	zero,zero,137
    2254:	000029c8 	cmpgei	zero,zero,167
    2258:	00002264 	muli	zero,zero,137
    225c:	00002264 	muli	zero,zero,137
    2260:	00003040 	call	304 <isp_ae_handler+0x114>
    2264:	d9014d17 	ldw	r4,1332(sp)
    2268:	2000ce26 	beq	r4,zero,25a4 <___vfprintf_internal_r+0x6d4>
    226c:	01400044 	movi	r5,1
    2270:	d9800f04 	addi	r6,sp,60
    2274:	d9c14015 	stw	r7,1280(sp)
    2278:	d9414515 	stw	r5,1300(sp)
    227c:	d9814115 	stw	r6,1284(sp)
    2280:	280f883a 	mov	r7,r5
    2284:	d9000f05 	stb	r4,60(sp)
    2288:	d8000405 	stb	zero,16(sp)
    228c:	d8014615 	stw	zero,1304(sp)
    2290:	d8c14c17 	ldw	r3,1328(sp)
    2294:	1880008c 	andi	r2,r3,2
    2298:	1005003a 	cmpeq	r2,r2,zero
    229c:	d8815015 	stw	r2,1344(sp)
    22a0:	1000031e 	bne	r2,zero,22b0 <___vfprintf_internal_r+0x3e0>
    22a4:	d9014517 	ldw	r4,1300(sp)
    22a8:	21000084 	addi	r4,r4,2
    22ac:	d9014515 	stw	r4,1300(sp)
    22b0:	d9414c17 	ldw	r5,1328(sp)
    22b4:	2940210c 	andi	r5,r5,132
    22b8:	d9414e15 	stw	r5,1336(sp)
    22bc:	28002d1e 	bne	r5,zero,2374 <___vfprintf_internal_r+0x4a4>
    22c0:	d9814a17 	ldw	r6,1320(sp)
    22c4:	d8814517 	ldw	r2,1300(sp)
    22c8:	30a1c83a 	sub	r16,r6,r2
    22cc:	0400290e 	bge	zero,r16,2374 <___vfprintf_internal_r+0x4a4>
    22d0:	00800404 	movi	r2,16
    22d4:	14045e0e 	bge	r2,r16,3450 <___vfprintf_internal_r+0x1580>
    22d8:	dc800e17 	ldw	r18,56(sp)
    22dc:	dc400d17 	ldw	r17,52(sp)
    22e0:	1027883a 	mov	r19,r2
    22e4:	07000074 	movhi	fp,1
    22e8:	e7389684 	addi	fp,fp,-7590
    22ec:	050001c4 	movi	r20,7
    22f0:	00000306 	br	2300 <___vfprintf_internal_r+0x430>
    22f4:	843ffc04 	addi	r16,r16,-16
    22f8:	ad400204 	addi	r21,r21,8
    22fc:	9c00130e 	bge	r19,r16,234c <___vfprintf_internal_r+0x47c>
    2300:	94800404 	addi	r18,r18,16
    2304:	8c400044 	addi	r17,r17,1
    2308:	af000015 	stw	fp,0(r21)
    230c:	acc00115 	stw	r19,4(r21)
    2310:	dc800e15 	stw	r18,56(sp)
    2314:	dc400d15 	stw	r17,52(sp)
    2318:	a47ff60e 	bge	r20,r17,22f4 <___vfprintf_internal_r+0x424>
    231c:	d9014f17 	ldw	r4,1340(sp)
    2320:	b00b883a 	mov	r5,r22
    2324:	d9800c04 	addi	r6,sp,48
    2328:	d9c15115 	stw	r7,1348(sp)
    232c:	0001e780 	call	1e78 <__sprint_r>
    2330:	d9c15117 	ldw	r7,1348(sp)
    2334:	10009e1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2338:	843ffc04 	addi	r16,r16,-16
    233c:	dc800e17 	ldw	r18,56(sp)
    2340:	dc400d17 	ldw	r17,52(sp)
    2344:	dd401904 	addi	r21,sp,100
    2348:	9c3fed16 	blt	r19,r16,2300 <___vfprintf_internal_r+0x430>
    234c:	9425883a 	add	r18,r18,r16
    2350:	8c400044 	addi	r17,r17,1
    2354:	008001c4 	movi	r2,7
    2358:	af000015 	stw	fp,0(r21)
    235c:	ac000115 	stw	r16,4(r21)
    2360:	dc800e15 	stw	r18,56(sp)
    2364:	dc400d15 	stw	r17,52(sp)
    2368:	1441f516 	blt	r2,r17,2b40 <___vfprintf_internal_r+0xc70>
    236c:	ad400204 	addi	r21,r21,8
    2370:	00000206 	br	237c <___vfprintf_internal_r+0x4ac>
    2374:	dc800e17 	ldw	r18,56(sp)
    2378:	dc400d17 	ldw	r17,52(sp)
    237c:	d8800407 	ldb	r2,16(sp)
    2380:	10000b26 	beq	r2,zero,23b0 <___vfprintf_internal_r+0x4e0>
    2384:	00800044 	movi	r2,1
    2388:	94800044 	addi	r18,r18,1
    238c:	8c400044 	addi	r17,r17,1
    2390:	a8800115 	stw	r2,4(r21)
    2394:	d8c00404 	addi	r3,sp,16
    2398:	008001c4 	movi	r2,7
    239c:	a8c00015 	stw	r3,0(r21)
    23a0:	dc800e15 	stw	r18,56(sp)
    23a4:	dc400d15 	stw	r17,52(sp)
    23a8:	1441da16 	blt	r2,r17,2b14 <___vfprintf_internal_r+0xc44>
    23ac:	ad400204 	addi	r21,r21,8
    23b0:	d9015017 	ldw	r4,1344(sp)
    23b4:	20000b1e 	bne	r4,zero,23e4 <___vfprintf_internal_r+0x514>
    23b8:	d8800444 	addi	r2,sp,17
    23bc:	94800084 	addi	r18,r18,2
    23c0:	8c400044 	addi	r17,r17,1
    23c4:	a8800015 	stw	r2,0(r21)
    23c8:	00c00084 	movi	r3,2
    23cc:	008001c4 	movi	r2,7
    23d0:	a8c00115 	stw	r3,4(r21)
    23d4:	dc800e15 	stw	r18,56(sp)
    23d8:	dc400d15 	stw	r17,52(sp)
    23dc:	1441c216 	blt	r2,r17,2ae8 <___vfprintf_internal_r+0xc18>
    23e0:	ad400204 	addi	r21,r21,8
    23e4:	d9414e17 	ldw	r5,1336(sp)
    23e8:	00802004 	movi	r2,128
    23ec:	2880b126 	beq	r5,r2,26b4 <___vfprintf_internal_r+0x7e4>
    23f0:	d8c14617 	ldw	r3,1304(sp)
    23f4:	19e1c83a 	sub	r16,r3,r7
    23f8:	0400260e 	bge	zero,r16,2494 <___vfprintf_internal_r+0x5c4>
    23fc:	00800404 	movi	r2,16
    2400:	1403cf0e 	bge	r2,r16,3340 <___vfprintf_internal_r+0x1470>
    2404:	1027883a 	mov	r19,r2
    2408:	07000074 	movhi	fp,1
    240c:	e7389284 	addi	fp,fp,-7606
    2410:	050001c4 	movi	r20,7
    2414:	00000306 	br	2424 <___vfprintf_internal_r+0x554>
    2418:	843ffc04 	addi	r16,r16,-16
    241c:	ad400204 	addi	r21,r21,8
    2420:	9c00130e 	bge	r19,r16,2470 <___vfprintf_internal_r+0x5a0>
    2424:	94800404 	addi	r18,r18,16
    2428:	8c400044 	addi	r17,r17,1
    242c:	af000015 	stw	fp,0(r21)
    2430:	acc00115 	stw	r19,4(r21)
    2434:	dc800e15 	stw	r18,56(sp)
    2438:	dc400d15 	stw	r17,52(sp)
    243c:	a47ff60e 	bge	r20,r17,2418 <___vfprintf_internal_r+0x548>
    2440:	d9014f17 	ldw	r4,1340(sp)
    2444:	b00b883a 	mov	r5,r22
    2448:	d9800c04 	addi	r6,sp,48
    244c:	d9c15115 	stw	r7,1348(sp)
    2450:	0001e780 	call	1e78 <__sprint_r>
    2454:	d9c15117 	ldw	r7,1348(sp)
    2458:	1000551e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    245c:	843ffc04 	addi	r16,r16,-16
    2460:	dc800e17 	ldw	r18,56(sp)
    2464:	dc400d17 	ldw	r17,52(sp)
    2468:	dd401904 	addi	r21,sp,100
    246c:	9c3fed16 	blt	r19,r16,2424 <___vfprintf_internal_r+0x554>
    2470:	9425883a 	add	r18,r18,r16
    2474:	8c400044 	addi	r17,r17,1
    2478:	008001c4 	movi	r2,7
    247c:	af000015 	stw	fp,0(r21)
    2480:	ac000115 	stw	r16,4(r21)
    2484:	dc800e15 	stw	r18,56(sp)
    2488:	dc400d15 	stw	r17,52(sp)
    248c:	14418216 	blt	r2,r17,2a98 <___vfprintf_internal_r+0xbc8>
    2490:	ad400204 	addi	r21,r21,8
    2494:	d9014c17 	ldw	r4,1328(sp)
    2498:	2080400c 	andi	r2,r4,256
    249c:	10004a1e 	bne	r2,zero,25c8 <___vfprintf_internal_r+0x6f8>
    24a0:	d9414117 	ldw	r5,1284(sp)
    24a4:	91e5883a 	add	r18,r18,r7
    24a8:	8c400044 	addi	r17,r17,1
    24ac:	008001c4 	movi	r2,7
    24b0:	a9400015 	stw	r5,0(r21)
    24b4:	a9c00115 	stw	r7,4(r21)
    24b8:	dc800e15 	stw	r18,56(sp)
    24bc:	dc400d15 	stw	r17,52(sp)
    24c0:	14416716 	blt	r2,r17,2a60 <___vfprintf_internal_r+0xb90>
    24c4:	a8c00204 	addi	r3,r21,8
    24c8:	d9814c17 	ldw	r6,1328(sp)
    24cc:	3080010c 	andi	r2,r6,4
    24d0:	10002826 	beq	r2,zero,2574 <___vfprintf_internal_r+0x6a4>
    24d4:	d8814a17 	ldw	r2,1320(sp)
    24d8:	d9014517 	ldw	r4,1300(sp)
    24dc:	1121c83a 	sub	r16,r2,r4
    24e0:	0400240e 	bge	zero,r16,2574 <___vfprintf_internal_r+0x6a4>
    24e4:	00800404 	movi	r2,16
    24e8:	1404550e 	bge	r2,r16,3640 <___vfprintf_internal_r+0x1770>
    24ec:	dc400d17 	ldw	r17,52(sp)
    24f0:	1027883a 	mov	r19,r2
    24f4:	07000074 	movhi	fp,1
    24f8:	e7389684 	addi	fp,fp,-7590
    24fc:	050001c4 	movi	r20,7
    2500:	00000306 	br	2510 <___vfprintf_internal_r+0x640>
    2504:	843ffc04 	addi	r16,r16,-16
    2508:	18c00204 	addi	r3,r3,8
    250c:	9c00110e 	bge	r19,r16,2554 <___vfprintf_internal_r+0x684>
    2510:	94800404 	addi	r18,r18,16
    2514:	8c400044 	addi	r17,r17,1
    2518:	1f000015 	stw	fp,0(r3)
    251c:	1cc00115 	stw	r19,4(r3)
    2520:	dc800e15 	stw	r18,56(sp)
    2524:	dc400d15 	stw	r17,52(sp)
    2528:	a47ff60e 	bge	r20,r17,2504 <___vfprintf_internal_r+0x634>
    252c:	d9014f17 	ldw	r4,1340(sp)
    2530:	b00b883a 	mov	r5,r22
    2534:	d9800c04 	addi	r6,sp,48
    2538:	0001e780 	call	1e78 <__sprint_r>
    253c:	10001c1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2540:	843ffc04 	addi	r16,r16,-16
    2544:	dc800e17 	ldw	r18,56(sp)
    2548:	dc400d17 	ldw	r17,52(sp)
    254c:	d8c01904 	addi	r3,sp,100
    2550:	9c3fef16 	blt	r19,r16,2510 <___vfprintf_internal_r+0x640>
    2554:	9425883a 	add	r18,r18,r16
    2558:	8c400044 	addi	r17,r17,1
    255c:	008001c4 	movi	r2,7
    2560:	1f000015 	stw	fp,0(r3)
    2564:	1c000115 	stw	r16,4(r3)
    2568:	dc800e15 	stw	r18,56(sp)
    256c:	dc400d15 	stw	r17,52(sp)
    2570:	1440cb16 	blt	r2,r17,28a0 <___vfprintf_internal_r+0x9d0>
    2574:	d8814a17 	ldw	r2,1320(sp)
    2578:	d9414517 	ldw	r5,1300(sp)
    257c:	1140010e 	bge	r2,r5,2584 <___vfprintf_internal_r+0x6b4>
    2580:	2805883a 	mov	r2,r5
    2584:	d9814b17 	ldw	r6,1324(sp)
    2588:	308d883a 	add	r6,r6,r2
    258c:	d9814b15 	stw	r6,1324(sp)
    2590:	90013b1e 	bne	r18,zero,2a80 <___vfprintf_internal_r+0xbb0>
    2594:	d9c14017 	ldw	r7,1280(sp)
    2598:	dd401904 	addi	r21,sp,100
    259c:	d8000d15 	stw	zero,52(sp)
    25a0:	003ea706 	br	2040 <___vfprintf_internal_r+0x170>
    25a4:	d8800e17 	ldw	r2,56(sp)
    25a8:	1005451e 	bne	r2,zero,3ac0 <___vfprintf_internal_r+0x1bf0>
    25ac:	d8000d15 	stw	zero,52(sp)
    25b0:	b080030b 	ldhu	r2,12(r22)
    25b4:	1080100c 	andi	r2,r2,64
    25b8:	103e8726 	beq	r2,zero,1fd8 <___vfprintf_internal_r+0x108>
    25bc:	00bfffc4 	movi	r2,-1
    25c0:	d8814b15 	stw	r2,1324(sp)
    25c4:	003e8406 	br	1fd8 <___vfprintf_internal_r+0x108>
    25c8:	d9814d17 	ldw	r6,1332(sp)
    25cc:	00801944 	movi	r2,101
    25d0:	11806e16 	blt	r2,r6,278c <___vfprintf_internal_r+0x8bc>
    25d4:	d9414717 	ldw	r5,1308(sp)
    25d8:	00c00044 	movi	r3,1
    25dc:	1943490e 	bge	r3,r5,3304 <___vfprintf_internal_r+0x1434>
    25e0:	d8814117 	ldw	r2,1284(sp)
    25e4:	94800044 	addi	r18,r18,1
    25e8:	8c400044 	addi	r17,r17,1
    25ec:	a8800015 	stw	r2,0(r21)
    25f0:	008001c4 	movi	r2,7
    25f4:	a8c00115 	stw	r3,4(r21)
    25f8:	dc800e15 	stw	r18,56(sp)
    25fc:	dc400d15 	stw	r17,52(sp)
    2600:	1441ca16 	blt	r2,r17,2d2c <___vfprintf_internal_r+0xe5c>
    2604:	a8c00204 	addi	r3,r21,8
    2608:	d9014917 	ldw	r4,1316(sp)
    260c:	00800044 	movi	r2,1
    2610:	94800044 	addi	r18,r18,1
    2614:	8c400044 	addi	r17,r17,1
    2618:	18800115 	stw	r2,4(r3)
    261c:	008001c4 	movi	r2,7
    2620:	19000015 	stw	r4,0(r3)
    2624:	dc800e15 	stw	r18,56(sp)
    2628:	dc400d15 	stw	r17,52(sp)
    262c:	1441b616 	blt	r2,r17,2d08 <___vfprintf_internal_r+0xe38>
    2630:	1cc00204 	addi	r19,r3,8
    2634:	d9014217 	ldw	r4,1288(sp)
    2638:	d9414317 	ldw	r5,1292(sp)
    263c:	000d883a 	mov	r6,zero
    2640:	000f883a 	mov	r7,zero
    2644:	000a9840 	call	a984 <__nedf2>
    2648:	10017426 	beq	r2,zero,2c1c <___vfprintf_internal_r+0xd4c>
    264c:	d9414717 	ldw	r5,1308(sp)
    2650:	d9814117 	ldw	r6,1284(sp)
    2654:	8c400044 	addi	r17,r17,1
    2658:	2c85883a 	add	r2,r5,r18
    265c:	14bfffc4 	addi	r18,r2,-1
    2660:	28bfffc4 	addi	r2,r5,-1
    2664:	30c00044 	addi	r3,r6,1
    2668:	98800115 	stw	r2,4(r19)
    266c:	008001c4 	movi	r2,7
    2670:	98c00015 	stw	r3,0(r19)
    2674:	dc800e15 	stw	r18,56(sp)
    2678:	dc400d15 	stw	r17,52(sp)
    267c:	14418e16 	blt	r2,r17,2cb8 <___vfprintf_internal_r+0xde8>
    2680:	9cc00204 	addi	r19,r19,8
    2684:	d9414817 	ldw	r5,1312(sp)
    2688:	d8800804 	addi	r2,sp,32
    268c:	8c400044 	addi	r17,r17,1
    2690:	9165883a 	add	r18,r18,r5
    2694:	98800015 	stw	r2,0(r19)
    2698:	008001c4 	movi	r2,7
    269c:	99400115 	stw	r5,4(r19)
    26a0:	dc800e15 	stw	r18,56(sp)
    26a4:	dc400d15 	stw	r17,52(sp)
    26a8:	1440ed16 	blt	r2,r17,2a60 <___vfprintf_internal_r+0xb90>
    26ac:	98c00204 	addi	r3,r19,8
    26b0:	003f8506 	br	24c8 <___vfprintf_internal_r+0x5f8>
    26b4:	d9814a17 	ldw	r6,1320(sp)
    26b8:	d8814517 	ldw	r2,1300(sp)
    26bc:	30a1c83a 	sub	r16,r6,r2
    26c0:	043f4b0e 	bge	zero,r16,23f0 <___vfprintf_internal_r+0x520>
    26c4:	00800404 	movi	r2,16
    26c8:	14043a0e 	bge	r2,r16,37b4 <___vfprintf_internal_r+0x18e4>
    26cc:	1027883a 	mov	r19,r2
    26d0:	07000074 	movhi	fp,1
    26d4:	e7389284 	addi	fp,fp,-7606
    26d8:	050001c4 	movi	r20,7
    26dc:	00000306 	br	26ec <___vfprintf_internal_r+0x81c>
    26e0:	843ffc04 	addi	r16,r16,-16
    26e4:	ad400204 	addi	r21,r21,8
    26e8:	9c00130e 	bge	r19,r16,2738 <___vfprintf_internal_r+0x868>
    26ec:	94800404 	addi	r18,r18,16
    26f0:	8c400044 	addi	r17,r17,1
    26f4:	af000015 	stw	fp,0(r21)
    26f8:	acc00115 	stw	r19,4(r21)
    26fc:	dc800e15 	stw	r18,56(sp)
    2700:	dc400d15 	stw	r17,52(sp)
    2704:	a47ff60e 	bge	r20,r17,26e0 <___vfprintf_internal_r+0x810>
    2708:	d9014f17 	ldw	r4,1340(sp)
    270c:	b00b883a 	mov	r5,r22
    2710:	d9800c04 	addi	r6,sp,48
    2714:	d9c15115 	stw	r7,1348(sp)
    2718:	0001e780 	call	1e78 <__sprint_r>
    271c:	d9c15117 	ldw	r7,1348(sp)
    2720:	103fa31e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2724:	843ffc04 	addi	r16,r16,-16
    2728:	dc800e17 	ldw	r18,56(sp)
    272c:	dc400d17 	ldw	r17,52(sp)
    2730:	dd401904 	addi	r21,sp,100
    2734:	9c3fed16 	blt	r19,r16,26ec <___vfprintf_internal_r+0x81c>
    2738:	9425883a 	add	r18,r18,r16
    273c:	8c400044 	addi	r17,r17,1
    2740:	008001c4 	movi	r2,7
    2744:	af000015 	stw	fp,0(r21)
    2748:	ac000115 	stw	r16,4(r21)
    274c:	dc800e15 	stw	r18,56(sp)
    2750:	dc400d15 	stw	r17,52(sp)
    2754:	14416116 	blt	r2,r17,2cdc <___vfprintf_internal_r+0xe0c>
    2758:	ad400204 	addi	r21,r21,8
    275c:	003f2406 	br	23f0 <___vfprintf_internal_r+0x520>
    2760:	d9014f17 	ldw	r4,1340(sp)
    2764:	00059840 	call	5984 <__sinit>
    2768:	d9c15117 	ldw	r7,1348(sp)
    276c:	003def06 	br	1f2c <___vfprintf_internal_r+0x5c>
    2770:	d9014f17 	ldw	r4,1340(sp)
    2774:	b00b883a 	mov	r5,r22
    2778:	d9c15115 	stw	r7,1348(sp)
    277c:	0003db80 	call	3db8 <__swsetup_r>
    2780:	d9c15117 	ldw	r7,1348(sp)
    2784:	103dee26 	beq	r2,zero,1f40 <___vfprintf_internal_r+0x70>
    2788:	003f8c06 	br	25bc <___vfprintf_internal_r+0x6ec>
    278c:	d9014217 	ldw	r4,1288(sp)
    2790:	d9414317 	ldw	r5,1292(sp)
    2794:	000d883a 	mov	r6,zero
    2798:	000f883a 	mov	r7,zero
    279c:	000a8fc0 	call	a8fc <__eqdf2>
    27a0:	1000f21e 	bne	r2,zero,2b6c <___vfprintf_internal_r+0xc9c>
    27a4:	00800074 	movhi	r2,1
    27a8:	10b89204 	addi	r2,r2,-7608
    27ac:	94800044 	addi	r18,r18,1
    27b0:	8c400044 	addi	r17,r17,1
    27b4:	a8800015 	stw	r2,0(r21)
    27b8:	00c00044 	movi	r3,1
    27bc:	008001c4 	movi	r2,7
    27c0:	a8c00115 	stw	r3,4(r21)
    27c4:	dc800e15 	stw	r18,56(sp)
    27c8:	dc400d15 	stw	r17,52(sp)
    27cc:	14430016 	blt	r2,r17,33d0 <___vfprintf_internal_r+0x1500>
    27d0:	a8c00204 	addi	r3,r21,8
    27d4:	d8800517 	ldw	r2,20(sp)
    27d8:	d9014717 	ldw	r4,1308(sp)
    27dc:	11015c0e 	bge	r2,r4,2d50 <___vfprintf_internal_r+0xe80>
    27e0:	dc400d17 	ldw	r17,52(sp)
    27e4:	d9814917 	ldw	r6,1316(sp)
    27e8:	00800044 	movi	r2,1
    27ec:	94800044 	addi	r18,r18,1
    27f0:	8c400044 	addi	r17,r17,1
    27f4:	18800115 	stw	r2,4(r3)
    27f8:	008001c4 	movi	r2,7
    27fc:	19800015 	stw	r6,0(r3)
    2800:	dc800e15 	stw	r18,56(sp)
    2804:	dc400d15 	stw	r17,52(sp)
    2808:	14431616 	blt	r2,r17,3464 <___vfprintf_internal_r+0x1594>
    280c:	18c00204 	addi	r3,r3,8
    2810:	d8814717 	ldw	r2,1308(sp)
    2814:	143fffc4 	addi	r16,r2,-1
    2818:	043f2b0e 	bge	zero,r16,24c8 <___vfprintf_internal_r+0x5f8>
    281c:	00800404 	movi	r2,16
    2820:	1402a80e 	bge	r2,r16,32c4 <___vfprintf_internal_r+0x13f4>
    2824:	dc400d17 	ldw	r17,52(sp)
    2828:	1027883a 	mov	r19,r2
    282c:	07000074 	movhi	fp,1
    2830:	e7389284 	addi	fp,fp,-7606
    2834:	050001c4 	movi	r20,7
    2838:	00000306 	br	2848 <___vfprintf_internal_r+0x978>
    283c:	18c00204 	addi	r3,r3,8
    2840:	843ffc04 	addi	r16,r16,-16
    2844:	9c02a20e 	bge	r19,r16,32d0 <___vfprintf_internal_r+0x1400>
    2848:	94800404 	addi	r18,r18,16
    284c:	8c400044 	addi	r17,r17,1
    2850:	1f000015 	stw	fp,0(r3)
    2854:	1cc00115 	stw	r19,4(r3)
    2858:	dc800e15 	stw	r18,56(sp)
    285c:	dc400d15 	stw	r17,52(sp)
    2860:	a47ff60e 	bge	r20,r17,283c <___vfprintf_internal_r+0x96c>
    2864:	d9014f17 	ldw	r4,1340(sp)
    2868:	b00b883a 	mov	r5,r22
    286c:	d9800c04 	addi	r6,sp,48
    2870:	0001e780 	call	1e78 <__sprint_r>
    2874:	103f4e1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2878:	dc800e17 	ldw	r18,56(sp)
    287c:	dc400d17 	ldw	r17,52(sp)
    2880:	d8c01904 	addi	r3,sp,100
    2884:	003fee06 	br	2840 <___vfprintf_internal_r+0x970>
    2888:	d8802c0b 	ldhu	r2,176(sp)
    288c:	00ffffc4 	movi	r3,-1
    2890:	d8c14b15 	stw	r3,1324(sp)
    2894:	1080100c 	andi	r2,r2,64
    2898:	103dcc1e 	bne	r2,zero,1fcc <___vfprintf_internal_r+0xfc>
    289c:	003dce06 	br	1fd8 <___vfprintf_internal_r+0x108>
    28a0:	d9014f17 	ldw	r4,1340(sp)
    28a4:	b00b883a 	mov	r5,r22
    28a8:	d9800c04 	addi	r6,sp,48
    28ac:	0001e780 	call	1e78 <__sprint_r>
    28b0:	103f3f1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    28b4:	dc800e17 	ldw	r18,56(sp)
    28b8:	003f2e06 	br	2574 <___vfprintf_internal_r+0x6a4>
    28bc:	d9414c17 	ldw	r5,1328(sp)
    28c0:	29400414 	ori	r5,r5,16
    28c4:	d9414c15 	stw	r5,1328(sp)
    28c8:	d9814c17 	ldw	r6,1328(sp)
    28cc:	3080080c 	andi	r2,r6,32
    28d0:	10014f1e 	bne	r2,zero,2e10 <___vfprintf_internal_r+0xf40>
    28d4:	d8c14c17 	ldw	r3,1328(sp)
    28d8:	1880040c 	andi	r2,r3,16
    28dc:	1002f01e 	bne	r2,zero,34a0 <___vfprintf_internal_r+0x15d0>
    28e0:	d9014c17 	ldw	r4,1328(sp)
    28e4:	2080100c 	andi	r2,r4,64
    28e8:	1002ed26 	beq	r2,zero,34a0 <___vfprintf_internal_r+0x15d0>
    28ec:	3880000f 	ldh	r2,0(r7)
    28f0:	39c00104 	addi	r7,r7,4
    28f4:	d9c14015 	stw	r7,1280(sp)
    28f8:	1023d7fa 	srai	r17,r2,31
    28fc:	1021883a 	mov	r16,r2
    2900:	88037816 	blt	r17,zero,36e4 <___vfprintf_internal_r+0x1814>
    2904:	01000044 	movi	r4,1
    2908:	98000416 	blt	r19,zero,291c <___vfprintf_internal_r+0xa4c>
    290c:	d8c14c17 	ldw	r3,1328(sp)
    2910:	00bfdfc4 	movi	r2,-129
    2914:	1886703a 	and	r3,r3,r2
    2918:	d8c14c15 	stw	r3,1328(sp)
    291c:	8444b03a 	or	r2,r16,r17
    2920:	10022c1e 	bne	r2,zero,31d4 <___vfprintf_internal_r+0x1304>
    2924:	98022b1e 	bne	r19,zero,31d4 <___vfprintf_internal_r+0x1304>
    2928:	20803fcc 	andi	r2,r4,255
    292c:	1002a126 	beq	r2,zero,33b4 <___vfprintf_internal_r+0x14e4>
    2930:	d8c01904 	addi	r3,sp,100
    2934:	dd000f04 	addi	r20,sp,60
    2938:	d8c14115 	stw	r3,1284(sp)
    293c:	d8c14117 	ldw	r3,1284(sp)
    2940:	dcc14515 	stw	r19,1300(sp)
    2944:	a0c5c83a 	sub	r2,r20,r3
    2948:	11c00a04 	addi	r7,r2,40
    294c:	99c0010e 	bge	r19,r7,2954 <___vfprintf_internal_r+0xa84>
    2950:	d9c14515 	stw	r7,1300(sp)
    2954:	dcc14615 	stw	r19,1304(sp)
    2958:	d8800407 	ldb	r2,16(sp)
    295c:	103e4c26 	beq	r2,zero,2290 <___vfprintf_internal_r+0x3c0>
    2960:	d8814517 	ldw	r2,1300(sp)
    2964:	10800044 	addi	r2,r2,1
    2968:	d8814515 	stw	r2,1300(sp)
    296c:	003e4806 	br	2290 <___vfprintf_internal_r+0x3c0>
    2970:	d9814c17 	ldw	r6,1328(sp)
    2974:	31800414 	ori	r6,r6,16
    2978:	d9814c15 	stw	r6,1328(sp)
    297c:	d8c14c17 	ldw	r3,1328(sp)
    2980:	1880080c 	andi	r2,r3,32
    2984:	1001271e 	bne	r2,zero,2e24 <___vfprintf_internal_r+0xf54>
    2988:	d9414c17 	ldw	r5,1328(sp)
    298c:	2880040c 	andi	r2,r5,16
    2990:	1002bc1e 	bne	r2,zero,3484 <___vfprintf_internal_r+0x15b4>
    2994:	d9814c17 	ldw	r6,1328(sp)
    2998:	3080100c 	andi	r2,r6,64
    299c:	1002b926 	beq	r2,zero,3484 <___vfprintf_internal_r+0x15b4>
    29a0:	3c00000b 	ldhu	r16,0(r7)
    29a4:	0009883a 	mov	r4,zero
    29a8:	39c00104 	addi	r7,r7,4
    29ac:	0023883a 	mov	r17,zero
    29b0:	d9c14015 	stw	r7,1280(sp)
    29b4:	d8000405 	stb	zero,16(sp)
    29b8:	003fd306 	br	2908 <___vfprintf_internal_r+0xa38>
    29bc:	d9014c17 	ldw	r4,1328(sp)
    29c0:	21000414 	ori	r4,r4,16
    29c4:	d9014c15 	stw	r4,1328(sp)
    29c8:	d9414c17 	ldw	r5,1328(sp)
    29cc:	2880080c 	andi	r2,r5,32
    29d0:	1001081e 	bne	r2,zero,2df4 <___vfprintf_internal_r+0xf24>
    29d4:	d8c14c17 	ldw	r3,1328(sp)
    29d8:	1880040c 	andi	r2,r3,16
    29dc:	1002b61e 	bne	r2,zero,34b8 <___vfprintf_internal_r+0x15e8>
    29e0:	d9014c17 	ldw	r4,1328(sp)
    29e4:	2080100c 	andi	r2,r4,64
    29e8:	1002b326 	beq	r2,zero,34b8 <___vfprintf_internal_r+0x15e8>
    29ec:	3c00000b 	ldhu	r16,0(r7)
    29f0:	01000044 	movi	r4,1
    29f4:	39c00104 	addi	r7,r7,4
    29f8:	0023883a 	mov	r17,zero
    29fc:	d9c14015 	stw	r7,1280(sp)
    2a00:	d8000405 	stb	zero,16(sp)
    2a04:	003fc006 	br	2908 <___vfprintf_internal_r+0xa38>
    2a08:	d9014f17 	ldw	r4,1340(sp)
    2a0c:	b00b883a 	mov	r5,r22
    2a10:	d9800c04 	addi	r6,sp,48
    2a14:	0001e780 	call	1e78 <__sprint_r>
    2a18:	103ee51e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2a1c:	dc800e17 	ldw	r18,56(sp)
    2a20:	d8c01904 	addi	r3,sp,100
    2a24:	d9814c17 	ldw	r6,1328(sp)
    2a28:	3080004c 	andi	r2,r6,1
    2a2c:	1005003a 	cmpeq	r2,r2,zero
    2a30:	103ea51e 	bne	r2,zero,24c8 <___vfprintf_internal_r+0x5f8>
    2a34:	00800044 	movi	r2,1
    2a38:	dc400d17 	ldw	r17,52(sp)
    2a3c:	18800115 	stw	r2,4(r3)
    2a40:	d8814917 	ldw	r2,1316(sp)
    2a44:	94800044 	addi	r18,r18,1
    2a48:	8c400044 	addi	r17,r17,1
    2a4c:	18800015 	stw	r2,0(r3)
    2a50:	008001c4 	movi	r2,7
    2a54:	dc800e15 	stw	r18,56(sp)
    2a58:	dc400d15 	stw	r17,52(sp)
    2a5c:	1442240e 	bge	r2,r17,32f0 <___vfprintf_internal_r+0x1420>
    2a60:	d9014f17 	ldw	r4,1340(sp)
    2a64:	b00b883a 	mov	r5,r22
    2a68:	d9800c04 	addi	r6,sp,48
    2a6c:	0001e780 	call	1e78 <__sprint_r>
    2a70:	103ecf1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2a74:	dc800e17 	ldw	r18,56(sp)
    2a78:	d8c01904 	addi	r3,sp,100
    2a7c:	003e9206 	br	24c8 <___vfprintf_internal_r+0x5f8>
    2a80:	d9014f17 	ldw	r4,1340(sp)
    2a84:	b00b883a 	mov	r5,r22
    2a88:	d9800c04 	addi	r6,sp,48
    2a8c:	0001e780 	call	1e78 <__sprint_r>
    2a90:	103ec026 	beq	r2,zero,2594 <___vfprintf_internal_r+0x6c4>
    2a94:	003ec606 	br	25b0 <___vfprintf_internal_r+0x6e0>
    2a98:	d9014f17 	ldw	r4,1340(sp)
    2a9c:	b00b883a 	mov	r5,r22
    2aa0:	d9800c04 	addi	r6,sp,48
    2aa4:	d9c15115 	stw	r7,1348(sp)
    2aa8:	0001e780 	call	1e78 <__sprint_r>
    2aac:	d9c15117 	ldw	r7,1348(sp)
    2ab0:	103ebf1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2ab4:	dc800e17 	ldw	r18,56(sp)
    2ab8:	dc400d17 	ldw	r17,52(sp)
    2abc:	dd401904 	addi	r21,sp,100
    2ac0:	003e7406 	br	2494 <___vfprintf_internal_r+0x5c4>
    2ac4:	d9014f17 	ldw	r4,1340(sp)
    2ac8:	b00b883a 	mov	r5,r22
    2acc:	d9800c04 	addi	r6,sp,48
    2ad0:	d9c15115 	stw	r7,1348(sp)
    2ad4:	0001e780 	call	1e78 <__sprint_r>
    2ad8:	d9c15117 	ldw	r7,1348(sp)
    2adc:	103eb41e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2ae0:	dd401904 	addi	r21,sp,100
    2ae4:	003d6d06 	br	209c <___vfprintf_internal_r+0x1cc>
    2ae8:	d9014f17 	ldw	r4,1340(sp)
    2aec:	b00b883a 	mov	r5,r22
    2af0:	d9800c04 	addi	r6,sp,48
    2af4:	d9c15115 	stw	r7,1348(sp)
    2af8:	0001e780 	call	1e78 <__sprint_r>
    2afc:	d9c15117 	ldw	r7,1348(sp)
    2b00:	103eab1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2b04:	dc800e17 	ldw	r18,56(sp)
    2b08:	dc400d17 	ldw	r17,52(sp)
    2b0c:	dd401904 	addi	r21,sp,100
    2b10:	003e3406 	br	23e4 <___vfprintf_internal_r+0x514>
    2b14:	d9014f17 	ldw	r4,1340(sp)
    2b18:	b00b883a 	mov	r5,r22
    2b1c:	d9800c04 	addi	r6,sp,48
    2b20:	d9c15115 	stw	r7,1348(sp)
    2b24:	0001e780 	call	1e78 <__sprint_r>
    2b28:	d9c15117 	ldw	r7,1348(sp)
    2b2c:	103ea01e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2b30:	dc800e17 	ldw	r18,56(sp)
    2b34:	dc400d17 	ldw	r17,52(sp)
    2b38:	dd401904 	addi	r21,sp,100
    2b3c:	003e1c06 	br	23b0 <___vfprintf_internal_r+0x4e0>
    2b40:	d9014f17 	ldw	r4,1340(sp)
    2b44:	b00b883a 	mov	r5,r22
    2b48:	d9800c04 	addi	r6,sp,48
    2b4c:	d9c15115 	stw	r7,1348(sp)
    2b50:	0001e780 	call	1e78 <__sprint_r>
    2b54:	d9c15117 	ldw	r7,1348(sp)
    2b58:	103e951e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2b5c:	dc800e17 	ldw	r18,56(sp)
    2b60:	dc400d17 	ldw	r17,52(sp)
    2b64:	dd401904 	addi	r21,sp,100
    2b68:	003e0406 	br	237c <___vfprintf_internal_r+0x4ac>
    2b6c:	d9000517 	ldw	r4,20(sp)
    2b70:	0102580e 	bge	zero,r4,34d4 <___vfprintf_internal_r+0x1604>
    2b74:	d9814717 	ldw	r6,1308(sp)
    2b78:	21807a16 	blt	r4,r6,2d64 <___vfprintf_internal_r+0xe94>
    2b7c:	d8814117 	ldw	r2,1284(sp)
    2b80:	91a5883a 	add	r18,r18,r6
    2b84:	8c400044 	addi	r17,r17,1
    2b88:	a8800015 	stw	r2,0(r21)
    2b8c:	008001c4 	movi	r2,7
    2b90:	a9800115 	stw	r6,4(r21)
    2b94:	dc800e15 	stw	r18,56(sp)
    2b98:	dc400d15 	stw	r17,52(sp)
    2b9c:	1442fc16 	blt	r2,r17,3790 <___vfprintf_internal_r+0x18c0>
    2ba0:	a8c00204 	addi	r3,r21,8
    2ba4:	d9414717 	ldw	r5,1308(sp)
    2ba8:	2161c83a 	sub	r16,r4,r5
    2bac:	043f9d0e 	bge	zero,r16,2a24 <___vfprintf_internal_r+0xb54>
    2bb0:	00800404 	movi	r2,16
    2bb4:	1402190e 	bge	r2,r16,341c <___vfprintf_internal_r+0x154c>
    2bb8:	dc400d17 	ldw	r17,52(sp)
    2bbc:	1027883a 	mov	r19,r2
    2bc0:	07000074 	movhi	fp,1
    2bc4:	e7389284 	addi	fp,fp,-7606
    2bc8:	050001c4 	movi	r20,7
    2bcc:	00000306 	br	2bdc <___vfprintf_internal_r+0xd0c>
    2bd0:	18c00204 	addi	r3,r3,8
    2bd4:	843ffc04 	addi	r16,r16,-16
    2bd8:	9c02130e 	bge	r19,r16,3428 <___vfprintf_internal_r+0x1558>
    2bdc:	94800404 	addi	r18,r18,16
    2be0:	8c400044 	addi	r17,r17,1
    2be4:	1f000015 	stw	fp,0(r3)
    2be8:	1cc00115 	stw	r19,4(r3)
    2bec:	dc800e15 	stw	r18,56(sp)
    2bf0:	dc400d15 	stw	r17,52(sp)
    2bf4:	a47ff60e 	bge	r20,r17,2bd0 <___vfprintf_internal_r+0xd00>
    2bf8:	d9014f17 	ldw	r4,1340(sp)
    2bfc:	b00b883a 	mov	r5,r22
    2c00:	d9800c04 	addi	r6,sp,48
    2c04:	0001e780 	call	1e78 <__sprint_r>
    2c08:	103e691e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2c0c:	dc800e17 	ldw	r18,56(sp)
    2c10:	dc400d17 	ldw	r17,52(sp)
    2c14:	d8c01904 	addi	r3,sp,100
    2c18:	003fee06 	br	2bd4 <___vfprintf_internal_r+0xd04>
    2c1c:	d8814717 	ldw	r2,1308(sp)
    2c20:	143fffc4 	addi	r16,r2,-1
    2c24:	043e970e 	bge	zero,r16,2684 <___vfprintf_internal_r+0x7b4>
    2c28:	00800404 	movi	r2,16
    2c2c:	1400180e 	bge	r2,r16,2c90 <___vfprintf_internal_r+0xdc0>
    2c30:	1029883a 	mov	r20,r2
    2c34:	07000074 	movhi	fp,1
    2c38:	e7389284 	addi	fp,fp,-7606
    2c3c:	054001c4 	movi	r21,7
    2c40:	00000306 	br	2c50 <___vfprintf_internal_r+0xd80>
    2c44:	9cc00204 	addi	r19,r19,8
    2c48:	843ffc04 	addi	r16,r16,-16
    2c4c:	a400120e 	bge	r20,r16,2c98 <___vfprintf_internal_r+0xdc8>
    2c50:	94800404 	addi	r18,r18,16
    2c54:	8c400044 	addi	r17,r17,1
    2c58:	9f000015 	stw	fp,0(r19)
    2c5c:	9d000115 	stw	r20,4(r19)
    2c60:	dc800e15 	stw	r18,56(sp)
    2c64:	dc400d15 	stw	r17,52(sp)
    2c68:	ac7ff60e 	bge	r21,r17,2c44 <___vfprintf_internal_r+0xd74>
    2c6c:	d9014f17 	ldw	r4,1340(sp)
    2c70:	b00b883a 	mov	r5,r22
    2c74:	d9800c04 	addi	r6,sp,48
    2c78:	0001e780 	call	1e78 <__sprint_r>
    2c7c:	103e4c1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2c80:	dc800e17 	ldw	r18,56(sp)
    2c84:	dc400d17 	ldw	r17,52(sp)
    2c88:	dcc01904 	addi	r19,sp,100
    2c8c:	003fee06 	br	2c48 <___vfprintf_internal_r+0xd78>
    2c90:	07000074 	movhi	fp,1
    2c94:	e7389284 	addi	fp,fp,-7606
    2c98:	9425883a 	add	r18,r18,r16
    2c9c:	8c400044 	addi	r17,r17,1
    2ca0:	008001c4 	movi	r2,7
    2ca4:	9f000015 	stw	fp,0(r19)
    2ca8:	9c000115 	stw	r16,4(r19)
    2cac:	dc800e15 	stw	r18,56(sp)
    2cb0:	dc400d15 	stw	r17,52(sp)
    2cb4:	147e720e 	bge	r2,r17,2680 <___vfprintf_internal_r+0x7b0>
    2cb8:	d9014f17 	ldw	r4,1340(sp)
    2cbc:	b00b883a 	mov	r5,r22
    2cc0:	d9800c04 	addi	r6,sp,48
    2cc4:	0001e780 	call	1e78 <__sprint_r>
    2cc8:	103e391e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2ccc:	dc800e17 	ldw	r18,56(sp)
    2cd0:	dc400d17 	ldw	r17,52(sp)
    2cd4:	dcc01904 	addi	r19,sp,100
    2cd8:	003e6a06 	br	2684 <___vfprintf_internal_r+0x7b4>
    2cdc:	d9014f17 	ldw	r4,1340(sp)
    2ce0:	b00b883a 	mov	r5,r22
    2ce4:	d9800c04 	addi	r6,sp,48
    2ce8:	d9c15115 	stw	r7,1348(sp)
    2cec:	0001e780 	call	1e78 <__sprint_r>
    2cf0:	d9c15117 	ldw	r7,1348(sp)
    2cf4:	103e2e1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2cf8:	dc800e17 	ldw	r18,56(sp)
    2cfc:	dc400d17 	ldw	r17,52(sp)
    2d00:	dd401904 	addi	r21,sp,100
    2d04:	003dba06 	br	23f0 <___vfprintf_internal_r+0x520>
    2d08:	d9014f17 	ldw	r4,1340(sp)
    2d0c:	b00b883a 	mov	r5,r22
    2d10:	d9800c04 	addi	r6,sp,48
    2d14:	0001e780 	call	1e78 <__sprint_r>
    2d18:	103e251e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2d1c:	dc800e17 	ldw	r18,56(sp)
    2d20:	dc400d17 	ldw	r17,52(sp)
    2d24:	dcc01904 	addi	r19,sp,100
    2d28:	003e4206 	br	2634 <___vfprintf_internal_r+0x764>
    2d2c:	d9014f17 	ldw	r4,1340(sp)
    2d30:	b00b883a 	mov	r5,r22
    2d34:	d9800c04 	addi	r6,sp,48
    2d38:	0001e780 	call	1e78 <__sprint_r>
    2d3c:	103e1c1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    2d40:	dc800e17 	ldw	r18,56(sp)
    2d44:	dc400d17 	ldw	r17,52(sp)
    2d48:	d8c01904 	addi	r3,sp,100
    2d4c:	003e2e06 	br	2608 <___vfprintf_internal_r+0x738>
    2d50:	d9414c17 	ldw	r5,1328(sp)
    2d54:	2880004c 	andi	r2,r5,1
    2d58:	1005003a 	cmpeq	r2,r2,zero
    2d5c:	103dda1e 	bne	r2,zero,24c8 <___vfprintf_internal_r+0x5f8>
    2d60:	003e9f06 	br	27e0 <___vfprintf_internal_r+0x910>
    2d64:	d8c14117 	ldw	r3,1284(sp)
    2d68:	9125883a 	add	r18,r18,r4
    2d6c:	8c400044 	addi	r17,r17,1
    2d70:	008001c4 	movi	r2,7
    2d74:	a8c00015 	stw	r3,0(r21)
    2d78:	a9000115 	stw	r4,4(r21)
    2d7c:	dc800e15 	stw	r18,56(sp)
    2d80:	dc400d15 	stw	r17,52(sp)
    2d84:	14426c16 	blt	r2,r17,3738 <___vfprintf_internal_r+0x1868>
    2d88:	a8c00204 	addi	r3,r21,8
    2d8c:	d9414917 	ldw	r5,1316(sp)
    2d90:	00800044 	movi	r2,1
    2d94:	94800044 	addi	r18,r18,1
    2d98:	8c400044 	addi	r17,r17,1
    2d9c:	18800115 	stw	r2,4(r3)
    2da0:	008001c4 	movi	r2,7
    2da4:	19400015 	stw	r5,0(r3)
    2da8:	dc800e15 	stw	r18,56(sp)
    2dac:	dc400d15 	stw	r17,52(sp)
    2db0:	2021883a 	mov	r16,r4
    2db4:	14425616 	blt	r2,r17,3710 <___vfprintf_internal_r+0x1840>
    2db8:	19400204 	addi	r5,r3,8
    2dbc:	d9814717 	ldw	r6,1308(sp)
    2dc0:	8c400044 	addi	r17,r17,1
    2dc4:	dc400d15 	stw	r17,52(sp)
    2dc8:	3107c83a 	sub	r3,r6,r4
    2dcc:	d9014117 	ldw	r4,1284(sp)
    2dd0:	90e5883a 	add	r18,r18,r3
    2dd4:	28c00115 	stw	r3,4(r5)
    2dd8:	8105883a 	add	r2,r16,r4
    2ddc:	28800015 	stw	r2,0(r5)
    2de0:	008001c4 	movi	r2,7
    2de4:	dc800e15 	stw	r18,56(sp)
    2de8:	147f1d16 	blt	r2,r17,2a60 <___vfprintf_internal_r+0xb90>
    2dec:	28c00204 	addi	r3,r5,8
    2df0:	003db506 	br	24c8 <___vfprintf_internal_r+0x5f8>
    2df4:	3c000017 	ldw	r16,0(r7)
    2df8:	3c400117 	ldw	r17,4(r7)
    2dfc:	39800204 	addi	r6,r7,8
    2e00:	01000044 	movi	r4,1
    2e04:	d9814015 	stw	r6,1280(sp)
    2e08:	d8000405 	stb	zero,16(sp)
    2e0c:	003ebe06 	br	2908 <___vfprintf_internal_r+0xa38>
    2e10:	3c000017 	ldw	r16,0(r7)
    2e14:	3c400117 	ldw	r17,4(r7)
    2e18:	38800204 	addi	r2,r7,8
    2e1c:	d8814015 	stw	r2,1280(sp)
    2e20:	003eb706 	br	2900 <___vfprintf_internal_r+0xa30>
    2e24:	3c000017 	ldw	r16,0(r7)
    2e28:	3c400117 	ldw	r17,4(r7)
    2e2c:	39000204 	addi	r4,r7,8
    2e30:	d9014015 	stw	r4,1280(sp)
    2e34:	0009883a 	mov	r4,zero
    2e38:	d8000405 	stb	zero,16(sp)
    2e3c:	003eb206 	br	2908 <___vfprintf_internal_r+0xa38>
    2e40:	38c00017 	ldw	r3,0(r7)
    2e44:	39c00104 	addi	r7,r7,4
    2e48:	d8c14a15 	stw	r3,1320(sp)
    2e4c:	1800d70e 	bge	r3,zero,31ac <___vfprintf_internal_r+0x12dc>
    2e50:	00c7c83a 	sub	r3,zero,r3
    2e54:	d8c14a15 	stw	r3,1320(sp)
    2e58:	d9014c17 	ldw	r4,1328(sp)
    2e5c:	b8c00007 	ldb	r3,0(r23)
    2e60:	21000114 	ori	r4,r4,4
    2e64:	d9014c15 	stw	r4,1328(sp)
    2e68:	003c9806 	br	20cc <___vfprintf_internal_r+0x1fc>
    2e6c:	d9814c17 	ldw	r6,1328(sp)
    2e70:	3080080c 	andi	r2,r6,32
    2e74:	1001f626 	beq	r2,zero,3650 <___vfprintf_internal_r+0x1780>
    2e78:	d9014b17 	ldw	r4,1324(sp)
    2e7c:	38800017 	ldw	r2,0(r7)
    2e80:	39c00104 	addi	r7,r7,4
    2e84:	d9c14015 	stw	r7,1280(sp)
    2e88:	2007d7fa 	srai	r3,r4,31
    2e8c:	d9c14017 	ldw	r7,1280(sp)
    2e90:	11000015 	stw	r4,0(r2)
    2e94:	10c00115 	stw	r3,4(r2)
    2e98:	003c6906 	br	2040 <___vfprintf_internal_r+0x170>
    2e9c:	b8c00007 	ldb	r3,0(r23)
    2ea0:	00801b04 	movi	r2,108
    2ea4:	18825526 	beq	r3,r2,37fc <___vfprintf_internal_r+0x192c>
    2ea8:	d9414c17 	ldw	r5,1328(sp)
    2eac:	29400414 	ori	r5,r5,16
    2eb0:	d9414c15 	stw	r5,1328(sp)
    2eb4:	003c8506 	br	20cc <___vfprintf_internal_r+0x1fc>
    2eb8:	d9814c17 	ldw	r6,1328(sp)
    2ebc:	b8c00007 	ldb	r3,0(r23)
    2ec0:	31800814 	ori	r6,r6,32
    2ec4:	d9814c15 	stw	r6,1328(sp)
    2ec8:	003c8006 	br	20cc <___vfprintf_internal_r+0x1fc>
    2ecc:	d8814c17 	ldw	r2,1328(sp)
    2ed0:	3c000017 	ldw	r16,0(r7)
    2ed4:	00c01e04 	movi	r3,120
    2ed8:	10800094 	ori	r2,r2,2
    2edc:	d8814c15 	stw	r2,1328(sp)
    2ee0:	39c00104 	addi	r7,r7,4
    2ee4:	01400074 	movhi	r5,1
    2ee8:	29787b04 	addi	r5,r5,-7700
    2eec:	00800c04 	movi	r2,48
    2ef0:	0023883a 	mov	r17,zero
    2ef4:	01000084 	movi	r4,2
    2ef8:	d9c14015 	stw	r7,1280(sp)
    2efc:	d8c14d15 	stw	r3,1332(sp)
    2f00:	d9414415 	stw	r5,1296(sp)
    2f04:	d8800445 	stb	r2,17(sp)
    2f08:	d8c00485 	stb	r3,18(sp)
    2f0c:	d8000405 	stb	zero,16(sp)
    2f10:	003e7d06 	br	2908 <___vfprintf_internal_r+0xa38>
    2f14:	d8814c17 	ldw	r2,1328(sp)
    2f18:	b8c00007 	ldb	r3,0(r23)
    2f1c:	10801014 	ori	r2,r2,64
    2f20:	d8814c15 	stw	r2,1328(sp)
    2f24:	003c6906 	br	20cc <___vfprintf_internal_r+0x1fc>
    2f28:	d9414c17 	ldw	r5,1328(sp)
    2f2c:	2880020c 	andi	r2,r5,8
    2f30:	1001e526 	beq	r2,zero,36c8 <___vfprintf_internal_r+0x17f8>
    2f34:	39800017 	ldw	r6,0(r7)
    2f38:	38800204 	addi	r2,r7,8
    2f3c:	d8814015 	stw	r2,1280(sp)
    2f40:	d9814215 	stw	r6,1288(sp)
    2f44:	39c00117 	ldw	r7,4(r7)
    2f48:	d9c14315 	stw	r7,1292(sp)
    2f4c:	d9014217 	ldw	r4,1288(sp)
    2f50:	d9414317 	ldw	r5,1292(sp)
    2f54:	00089800 	call	8980 <__isinfd>
    2f58:	10021d26 	beq	r2,zero,37d0 <___vfprintf_internal_r+0x1900>
    2f5c:	d9014217 	ldw	r4,1288(sp)
    2f60:	d9414317 	ldw	r5,1292(sp)
    2f64:	000d883a 	mov	r6,zero
    2f68:	000f883a 	mov	r7,zero
    2f6c:	000ab1c0 	call	ab1c <__ltdf2>
    2f70:	1002d016 	blt	r2,zero,3ab4 <___vfprintf_internal_r+0x1be4>
    2f74:	d9414d17 	ldw	r5,1332(sp)
    2f78:	008011c4 	movi	r2,71
    2f7c:	11421016 	blt	r2,r5,37c0 <___vfprintf_internal_r+0x18f0>
    2f80:	01800074 	movhi	r6,1
    2f84:	31b88004 	addi	r6,r6,-7680
    2f88:	d9814115 	stw	r6,1284(sp)
    2f8c:	d9014c17 	ldw	r4,1328(sp)
    2f90:	00c000c4 	movi	r3,3
    2f94:	00bfdfc4 	movi	r2,-129
    2f98:	2088703a 	and	r4,r4,r2
    2f9c:	180f883a 	mov	r7,r3
    2fa0:	d8c14515 	stw	r3,1300(sp)
    2fa4:	d9014c15 	stw	r4,1328(sp)
    2fa8:	d8014615 	stw	zero,1304(sp)
    2fac:	003e6a06 	br	2958 <___vfprintf_internal_r+0xa88>
    2fb0:	38800017 	ldw	r2,0(r7)
    2fb4:	00c00044 	movi	r3,1
    2fb8:	39c00104 	addi	r7,r7,4
    2fbc:	d9c14015 	stw	r7,1280(sp)
    2fc0:	d9000f04 	addi	r4,sp,60
    2fc4:	180f883a 	mov	r7,r3
    2fc8:	d8c14515 	stw	r3,1300(sp)
    2fcc:	d9014115 	stw	r4,1284(sp)
    2fd0:	d8800f05 	stb	r2,60(sp)
    2fd4:	d8000405 	stb	zero,16(sp)
    2fd8:	003cac06 	br	228c <___vfprintf_internal_r+0x3bc>
    2fdc:	01400074 	movhi	r5,1
    2fe0:	29788604 	addi	r5,r5,-7656
    2fe4:	d9414415 	stw	r5,1296(sp)
    2fe8:	d9814c17 	ldw	r6,1328(sp)
    2fec:	3080080c 	andi	r2,r6,32
    2ff0:	1000ff26 	beq	r2,zero,33f0 <___vfprintf_internal_r+0x1520>
    2ff4:	3c000017 	ldw	r16,0(r7)
    2ff8:	3c400117 	ldw	r17,4(r7)
    2ffc:	38800204 	addi	r2,r7,8
    3000:	d8814015 	stw	r2,1280(sp)
    3004:	d9414c17 	ldw	r5,1328(sp)
    3008:	2880004c 	andi	r2,r5,1
    300c:	1005003a 	cmpeq	r2,r2,zero
    3010:	1000b91e 	bne	r2,zero,32f8 <___vfprintf_internal_r+0x1428>
    3014:	8444b03a 	or	r2,r16,r17
    3018:	1000b726 	beq	r2,zero,32f8 <___vfprintf_internal_r+0x1428>
    301c:	d9814d17 	ldw	r6,1332(sp)
    3020:	29400094 	ori	r5,r5,2
    3024:	00800c04 	movi	r2,48
    3028:	01000084 	movi	r4,2
    302c:	d9414c15 	stw	r5,1328(sp)
    3030:	d8800445 	stb	r2,17(sp)
    3034:	d9800485 	stb	r6,18(sp)
    3038:	d8000405 	stb	zero,16(sp)
    303c:	003e3206 	br	2908 <___vfprintf_internal_r+0xa38>
    3040:	01800074 	movhi	r6,1
    3044:	31b87b04 	addi	r6,r6,-7700
    3048:	d9814415 	stw	r6,1296(sp)
    304c:	003fe606 	br	2fe8 <___vfprintf_internal_r+0x1118>
    3050:	00800ac4 	movi	r2,43
    3054:	d8800405 	stb	r2,16(sp)
    3058:	b8c00007 	ldb	r3,0(r23)
    305c:	003c1b06 	br	20cc <___vfprintf_internal_r+0x1fc>
    3060:	d8814c17 	ldw	r2,1328(sp)
    3064:	b8c00007 	ldb	r3,0(r23)
    3068:	10800054 	ori	r2,r2,1
    306c:	d8814c15 	stw	r2,1328(sp)
    3070:	003c1606 	br	20cc <___vfprintf_internal_r+0x1fc>
    3074:	d8800407 	ldb	r2,16(sp)
    3078:	10004c1e 	bne	r2,zero,31ac <___vfprintf_internal_r+0x12dc>
    307c:	00800804 	movi	r2,32
    3080:	d8800405 	stb	r2,16(sp)
    3084:	b8c00007 	ldb	r3,0(r23)
    3088:	003c1006 	br	20cc <___vfprintf_internal_r+0x1fc>
    308c:	d9814c17 	ldw	r6,1328(sp)
    3090:	b8c00007 	ldb	r3,0(r23)
    3094:	31800214 	ori	r6,r6,8
    3098:	d9814c15 	stw	r6,1328(sp)
    309c:	003c0b06 	br	20cc <___vfprintf_internal_r+0x1fc>
    30a0:	0009883a 	mov	r4,zero
    30a4:	04000244 	movi	r16,9
    30a8:	01400284 	movi	r5,10
    30ac:	d9c15115 	stw	r7,1348(sp)
    30b0:	0001ca00 	call	1ca0 <__mulsi3>
    30b4:	b9000007 	ldb	r4,0(r23)
    30b8:	d8c14d17 	ldw	r3,1332(sp)
    30bc:	bdc00044 	addi	r23,r23,1
    30c0:	d9014d15 	stw	r4,1332(sp)
    30c4:	d9414d17 	ldw	r5,1332(sp)
    30c8:	1885883a 	add	r2,r3,r2
    30cc:	113ff404 	addi	r4,r2,-48
    30d0:	28bff404 	addi	r2,r5,-48
    30d4:	d9c15117 	ldw	r7,1348(sp)
    30d8:	80bff32e 	bgeu	r16,r2,30a8 <___vfprintf_internal_r+0x11d8>
    30dc:	d9014a15 	stw	r4,1320(sp)
    30e0:	003bfc06 	br	20d4 <___vfprintf_internal_r+0x204>
    30e4:	d8814c17 	ldw	r2,1328(sp)
    30e8:	b8c00007 	ldb	r3,0(r23)
    30ec:	10802014 	ori	r2,r2,128
    30f0:	d8814c15 	stw	r2,1328(sp)
    30f4:	003bf506 	br	20cc <___vfprintf_internal_r+0x1fc>
    30f8:	b8c00007 	ldb	r3,0(r23)
    30fc:	00800a84 	movi	r2,42
    3100:	bdc00044 	addi	r23,r23,1
    3104:	18831826 	beq	r3,r2,3d68 <___vfprintf_internal_r+0x1e98>
    3108:	d8c14d15 	stw	r3,1332(sp)
    310c:	18bff404 	addi	r2,r3,-48
    3110:	00c00244 	movi	r3,9
    3114:	18827b36 	bltu	r3,r2,3b04 <___vfprintf_internal_r+0x1c34>
    3118:	1821883a 	mov	r16,r3
    311c:	0009883a 	mov	r4,zero
    3120:	01400284 	movi	r5,10
    3124:	d9c15115 	stw	r7,1348(sp)
    3128:	0001ca00 	call	1ca0 <__mulsi3>
    312c:	d9414d17 	ldw	r5,1332(sp)
    3130:	b9800007 	ldb	r6,0(r23)
    3134:	d9c15117 	ldw	r7,1348(sp)
    3138:	1145883a 	add	r2,r2,r5
    313c:	113ff404 	addi	r4,r2,-48
    3140:	30bff404 	addi	r2,r6,-48
    3144:	d9814d15 	stw	r6,1332(sp)
    3148:	bdc00044 	addi	r23,r23,1
    314c:	80bff42e 	bgeu	r16,r2,3120 <___vfprintf_internal_r+0x1250>
    3150:	2027883a 	mov	r19,r4
    3154:	203bdf0e 	bge	r4,zero,20d4 <___vfprintf_internal_r+0x204>
    3158:	04ffffc4 	movi	r19,-1
    315c:	003bdd06 	br	20d4 <___vfprintf_internal_r+0x204>
    3160:	d8000405 	stb	zero,16(sp)
    3164:	39800017 	ldw	r6,0(r7)
    3168:	39c00104 	addi	r7,r7,4
    316c:	d9c14015 	stw	r7,1280(sp)
    3170:	d9814115 	stw	r6,1284(sp)
    3174:	3001c926 	beq	r6,zero,389c <___vfprintf_internal_r+0x19cc>
    3178:	98000e16 	blt	r19,zero,31b4 <___vfprintf_internal_r+0x12e4>
    317c:	d9014117 	ldw	r4,1284(sp)
    3180:	000b883a 	mov	r5,zero
    3184:	980d883a 	mov	r6,r19
    3188:	00070040 	call	7004 <memchr>
    318c:	10025926 	beq	r2,zero,3af4 <___vfprintf_internal_r+0x1c24>
    3190:	d8c14117 	ldw	r3,1284(sp)
    3194:	10cfc83a 	sub	r7,r2,r3
    3198:	99c19e16 	blt	r19,r7,3814 <___vfprintf_internal_r+0x1944>
    319c:	d9c14515 	stw	r7,1300(sp)
    31a0:	38000916 	blt	r7,zero,31c8 <___vfprintf_internal_r+0x12f8>
    31a4:	d8014615 	stw	zero,1304(sp)
    31a8:	003deb06 	br	2958 <___vfprintf_internal_r+0xa88>
    31ac:	b8c00007 	ldb	r3,0(r23)
    31b0:	003bc606 	br	20cc <___vfprintf_internal_r+0x1fc>
    31b4:	d9014117 	ldw	r4,1284(sp)
    31b8:	0001e040 	call	1e04 <strlen>
    31bc:	d8814515 	stw	r2,1300(sp)
    31c0:	100f883a 	mov	r7,r2
    31c4:	103ff70e 	bge	r2,zero,31a4 <___vfprintf_internal_r+0x12d4>
    31c8:	d8014515 	stw	zero,1300(sp)
    31cc:	d8014615 	stw	zero,1304(sp)
    31d0:	003de106 	br	2958 <___vfprintf_internal_r+0xa88>
    31d4:	20c03fcc 	andi	r3,r4,255
    31d8:	00800044 	movi	r2,1
    31dc:	18802d26 	beq	r3,r2,3294 <___vfprintf_internal_r+0x13c4>
    31e0:	18800e36 	bltu	r3,r2,321c <___vfprintf_internal_r+0x134c>
    31e4:	00800084 	movi	r2,2
    31e8:	1880fa26 	beq	r3,r2,35d4 <___vfprintf_internal_r+0x1704>
    31ec:	01000074 	movhi	r4,1
    31f0:	21388b04 	addi	r4,r4,-7636
    31f4:	0001e040 	call	1e04 <strlen>
    31f8:	100f883a 	mov	r7,r2
    31fc:	dcc14515 	stw	r19,1300(sp)
    3200:	9880010e 	bge	r19,r2,3208 <___vfprintf_internal_r+0x1338>
    3204:	d8814515 	stw	r2,1300(sp)
    3208:	00800074 	movhi	r2,1
    320c:	10b88b04 	addi	r2,r2,-7636
    3210:	dcc14615 	stw	r19,1304(sp)
    3214:	d8814115 	stw	r2,1284(sp)
    3218:	003dcf06 	br	2958 <___vfprintf_internal_r+0xa88>
    321c:	d9401904 	addi	r5,sp,100
    3220:	dd000f04 	addi	r20,sp,60
    3224:	d9414115 	stw	r5,1284(sp)
    3228:	880a977a 	slli	r5,r17,29
    322c:	d9814117 	ldw	r6,1284(sp)
    3230:	8004d0fa 	srli	r2,r16,3
    3234:	8806d0fa 	srli	r3,r17,3
    3238:	810001cc 	andi	r4,r16,7
    323c:	2884b03a 	or	r2,r5,r2
    3240:	31bfffc4 	addi	r6,r6,-1
    3244:	21000c04 	addi	r4,r4,48
    3248:	d9814115 	stw	r6,1284(sp)
    324c:	10cab03a 	or	r5,r2,r3
    3250:	31000005 	stb	r4,0(r6)
    3254:	1021883a 	mov	r16,r2
    3258:	1823883a 	mov	r17,r3
    325c:	283ff21e 	bne	r5,zero,3228 <___vfprintf_internal_r+0x1358>
    3260:	d8c14c17 	ldw	r3,1328(sp)
    3264:	1880004c 	andi	r2,r3,1
    3268:	1005003a 	cmpeq	r2,r2,zero
    326c:	103db31e 	bne	r2,zero,293c <___vfprintf_internal_r+0xa6c>
    3270:	20803fcc 	andi	r2,r4,255
    3274:	1080201c 	xori	r2,r2,128
    3278:	10bfe004 	addi	r2,r2,-128
    327c:	00c00c04 	movi	r3,48
    3280:	10fdae26 	beq	r2,r3,293c <___vfprintf_internal_r+0xa6c>
    3284:	31bfffc4 	addi	r6,r6,-1
    3288:	d9814115 	stw	r6,1284(sp)
    328c:	30c00005 	stb	r3,0(r6)
    3290:	003daa06 	br	293c <___vfprintf_internal_r+0xa6c>
    3294:	88800068 	cmpgeui	r2,r17,1
    3298:	10002c1e 	bne	r2,zero,334c <___vfprintf_internal_r+0x147c>
    329c:	8800021e 	bne	r17,zero,32a8 <___vfprintf_internal_r+0x13d8>
    32a0:	00800244 	movi	r2,9
    32a4:	14002936 	bltu	r2,r16,334c <___vfprintf_internal_r+0x147c>
    32a8:	d90018c4 	addi	r4,sp,99
    32ac:	dd000f04 	addi	r20,sp,60
    32b0:	d9014115 	stw	r4,1284(sp)
    32b4:	d9014117 	ldw	r4,1284(sp)
    32b8:	80800c04 	addi	r2,r16,48
    32bc:	20800005 	stb	r2,0(r4)
    32c0:	003d9e06 	br	293c <___vfprintf_internal_r+0xa6c>
    32c4:	dc400d17 	ldw	r17,52(sp)
    32c8:	07000074 	movhi	fp,1
    32cc:	e7389284 	addi	fp,fp,-7606
    32d0:	9425883a 	add	r18,r18,r16
    32d4:	8c400044 	addi	r17,r17,1
    32d8:	008001c4 	movi	r2,7
    32dc:	1f000015 	stw	fp,0(r3)
    32e0:	1c000115 	stw	r16,4(r3)
    32e4:	dc800e15 	stw	r18,56(sp)
    32e8:	dc400d15 	stw	r17,52(sp)
    32ec:	147ddc16 	blt	r2,r17,2a60 <___vfprintf_internal_r+0xb90>
    32f0:	18c00204 	addi	r3,r3,8
    32f4:	003c7406 	br	24c8 <___vfprintf_internal_r+0x5f8>
    32f8:	01000084 	movi	r4,2
    32fc:	d8000405 	stb	zero,16(sp)
    3300:	003d8106 	br	2908 <___vfprintf_internal_r+0xa38>
    3304:	d9814c17 	ldw	r6,1328(sp)
    3308:	30c4703a 	and	r2,r6,r3
    330c:	1005003a 	cmpeq	r2,r2,zero
    3310:	103cb326 	beq	r2,zero,25e0 <___vfprintf_internal_r+0x710>
    3314:	d9014117 	ldw	r4,1284(sp)
    3318:	94800044 	addi	r18,r18,1
    331c:	8c400044 	addi	r17,r17,1
    3320:	008001c4 	movi	r2,7
    3324:	a9000015 	stw	r4,0(r21)
    3328:	a8c00115 	stw	r3,4(r21)
    332c:	dc800e15 	stw	r18,56(sp)
    3330:	dc400d15 	stw	r17,52(sp)
    3334:	147e6016 	blt	r2,r17,2cb8 <___vfprintf_internal_r+0xde8>
    3338:	acc00204 	addi	r19,r21,8
    333c:	003cd106 	br	2684 <___vfprintf_internal_r+0x7b4>
    3340:	07000074 	movhi	fp,1
    3344:	e7389284 	addi	fp,fp,-7606
    3348:	003c4906 	br	2470 <___vfprintf_internal_r+0x5a0>
    334c:	dd000f04 	addi	r20,sp,60
    3350:	dc801904 	addi	r18,sp,100
    3354:	8009883a 	mov	r4,r16
    3358:	880b883a 	mov	r5,r17
    335c:	01800284 	movi	r6,10
    3360:	000f883a 	mov	r7,zero
    3364:	000977c0 	call	977c <__umoddi3>
    3368:	12000c04 	addi	r8,r2,48
    336c:	94bfffc4 	addi	r18,r18,-1
    3370:	8009883a 	mov	r4,r16
    3374:	880b883a 	mov	r5,r17
    3378:	01800284 	movi	r6,10
    337c:	000f883a 	mov	r7,zero
    3380:	92000005 	stb	r8,0(r18)
    3384:	00091100 	call	9110 <__udivdi3>
    3388:	1009883a 	mov	r4,r2
    338c:	1021883a 	mov	r16,r2
    3390:	18800068 	cmpgeui	r2,r3,1
    3394:	1823883a 	mov	r17,r3
    3398:	103fee1e 	bne	r2,zero,3354 <___vfprintf_internal_r+0x1484>
    339c:	1800021e 	bne	r3,zero,33a8 <___vfprintf_internal_r+0x14d8>
    33a0:	00800244 	movi	r2,9
    33a4:	113feb36 	bltu	r2,r4,3354 <___vfprintf_internal_r+0x1484>
    33a8:	94bfffc4 	addi	r18,r18,-1
    33ac:	dc814115 	stw	r18,1284(sp)
    33b0:	003fc006 	br	32b4 <___vfprintf_internal_r+0x13e4>
    33b4:	d9014c17 	ldw	r4,1328(sp)
    33b8:	2080004c 	andi	r2,r4,1
    33bc:	10009a1e 	bne	r2,zero,3628 <___vfprintf_internal_r+0x1758>
    33c0:	d9401904 	addi	r5,sp,100
    33c4:	dd000f04 	addi	r20,sp,60
    33c8:	d9414115 	stw	r5,1284(sp)
    33cc:	003d5b06 	br	293c <___vfprintf_internal_r+0xa6c>
    33d0:	d9014f17 	ldw	r4,1340(sp)
    33d4:	b00b883a 	mov	r5,r22
    33d8:	d9800c04 	addi	r6,sp,48
    33dc:	0001e780 	call	1e78 <__sprint_r>
    33e0:	103c731e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    33e4:	dc800e17 	ldw	r18,56(sp)
    33e8:	d8c01904 	addi	r3,sp,100
    33ec:	003cf906 	br	27d4 <___vfprintf_internal_r+0x904>
    33f0:	d8c14c17 	ldw	r3,1328(sp)
    33f4:	1880040c 	andi	r2,r3,16
    33f8:	1000711e 	bne	r2,zero,35c0 <___vfprintf_internal_r+0x16f0>
    33fc:	d9014c17 	ldw	r4,1328(sp)
    3400:	2080100c 	andi	r2,r4,64
    3404:	10006e26 	beq	r2,zero,35c0 <___vfprintf_internal_r+0x16f0>
    3408:	3c00000b 	ldhu	r16,0(r7)
    340c:	0023883a 	mov	r17,zero
    3410:	39c00104 	addi	r7,r7,4
    3414:	d9c14015 	stw	r7,1280(sp)
    3418:	003efa06 	br	3004 <___vfprintf_internal_r+0x1134>
    341c:	dc400d17 	ldw	r17,52(sp)
    3420:	07000074 	movhi	fp,1
    3424:	e7389284 	addi	fp,fp,-7606
    3428:	9425883a 	add	r18,r18,r16
    342c:	8c400044 	addi	r17,r17,1
    3430:	008001c4 	movi	r2,7
    3434:	1f000015 	stw	fp,0(r3)
    3438:	1c000115 	stw	r16,4(r3)
    343c:	dc800e15 	stw	r18,56(sp)
    3440:	dc400d15 	stw	r17,52(sp)
    3444:	147d7016 	blt	r2,r17,2a08 <___vfprintf_internal_r+0xb38>
    3448:	18c00204 	addi	r3,r3,8
    344c:	003d7506 	br	2a24 <___vfprintf_internal_r+0xb54>
    3450:	dc800e17 	ldw	r18,56(sp)
    3454:	dc400d17 	ldw	r17,52(sp)
    3458:	07000074 	movhi	fp,1
    345c:	e7389684 	addi	fp,fp,-7590
    3460:	003bba06 	br	234c <___vfprintf_internal_r+0x47c>
    3464:	d9014f17 	ldw	r4,1340(sp)
    3468:	b00b883a 	mov	r5,r22
    346c:	d9800c04 	addi	r6,sp,48
    3470:	0001e780 	call	1e78 <__sprint_r>
    3474:	103c4e1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    3478:	dc800e17 	ldw	r18,56(sp)
    347c:	d8c01904 	addi	r3,sp,100
    3480:	003ce306 	br	2810 <___vfprintf_internal_r+0x940>
    3484:	3c000017 	ldw	r16,0(r7)
    3488:	0009883a 	mov	r4,zero
    348c:	39c00104 	addi	r7,r7,4
    3490:	0023883a 	mov	r17,zero
    3494:	d9c14015 	stw	r7,1280(sp)
    3498:	d8000405 	stb	zero,16(sp)
    349c:	003d1a06 	br	2908 <___vfprintf_internal_r+0xa38>
    34a0:	38800017 	ldw	r2,0(r7)
    34a4:	39c00104 	addi	r7,r7,4
    34a8:	d9c14015 	stw	r7,1280(sp)
    34ac:	1023d7fa 	srai	r17,r2,31
    34b0:	1021883a 	mov	r16,r2
    34b4:	003d1206 	br	2900 <___vfprintf_internal_r+0xa30>
    34b8:	3c000017 	ldw	r16,0(r7)
    34bc:	01000044 	movi	r4,1
    34c0:	39c00104 	addi	r7,r7,4
    34c4:	0023883a 	mov	r17,zero
    34c8:	d9c14015 	stw	r7,1280(sp)
    34cc:	d8000405 	stb	zero,16(sp)
    34d0:	003d0d06 	br	2908 <___vfprintf_internal_r+0xa38>
    34d4:	00800074 	movhi	r2,1
    34d8:	10b89204 	addi	r2,r2,-7608
    34dc:	94800044 	addi	r18,r18,1
    34e0:	8c400044 	addi	r17,r17,1
    34e4:	a8800015 	stw	r2,0(r21)
    34e8:	00c00044 	movi	r3,1
    34ec:	008001c4 	movi	r2,7
    34f0:	a8c00115 	stw	r3,4(r21)
    34f4:	dc800e15 	stw	r18,56(sp)
    34f8:	dc400d15 	stw	r17,52(sp)
    34fc:	1440ca16 	blt	r2,r17,3828 <___vfprintf_internal_r+0x1958>
    3500:	a8c00204 	addi	r3,r21,8
    3504:	2000061e 	bne	r4,zero,3520 <___vfprintf_internal_r+0x1650>
    3508:	d9414717 	ldw	r5,1308(sp)
    350c:	2800041e 	bne	r5,zero,3520 <___vfprintf_internal_r+0x1650>
    3510:	d9814c17 	ldw	r6,1328(sp)
    3514:	3080004c 	andi	r2,r6,1
    3518:	1005003a 	cmpeq	r2,r2,zero
    351c:	103bea1e 	bne	r2,zero,24c8 <___vfprintf_internal_r+0x5f8>
    3520:	00800044 	movi	r2,1
    3524:	dc400d17 	ldw	r17,52(sp)
    3528:	18800115 	stw	r2,4(r3)
    352c:	d8814917 	ldw	r2,1316(sp)
    3530:	94800044 	addi	r18,r18,1
    3534:	8c400044 	addi	r17,r17,1
    3538:	18800015 	stw	r2,0(r3)
    353c:	008001c4 	movi	r2,7
    3540:	dc800e15 	stw	r18,56(sp)
    3544:	dc400d15 	stw	r17,52(sp)
    3548:	1440ca16 	blt	r2,r17,3874 <___vfprintf_internal_r+0x19a4>
    354c:	18c00204 	addi	r3,r3,8
    3550:	0121c83a 	sub	r16,zero,r4
    3554:	0400500e 	bge	zero,r16,3698 <___vfprintf_internal_r+0x17c8>
    3558:	00800404 	movi	r2,16
    355c:	1400800e 	bge	r2,r16,3760 <___vfprintf_internal_r+0x1890>
    3560:	1027883a 	mov	r19,r2
    3564:	07000074 	movhi	fp,1
    3568:	e7389284 	addi	fp,fp,-7606
    356c:	050001c4 	movi	r20,7
    3570:	00000306 	br	3580 <___vfprintf_internal_r+0x16b0>
    3574:	18c00204 	addi	r3,r3,8
    3578:	843ffc04 	addi	r16,r16,-16
    357c:	9c007a0e 	bge	r19,r16,3768 <___vfprintf_internal_r+0x1898>
    3580:	94800404 	addi	r18,r18,16
    3584:	8c400044 	addi	r17,r17,1
    3588:	1f000015 	stw	fp,0(r3)
    358c:	1cc00115 	stw	r19,4(r3)
    3590:	dc800e15 	stw	r18,56(sp)
    3594:	dc400d15 	stw	r17,52(sp)
    3598:	a47ff60e 	bge	r20,r17,3574 <___vfprintf_internal_r+0x16a4>
    359c:	d9014f17 	ldw	r4,1340(sp)
    35a0:	b00b883a 	mov	r5,r22
    35a4:	d9800c04 	addi	r6,sp,48
    35a8:	0001e780 	call	1e78 <__sprint_r>
    35ac:	103c001e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    35b0:	dc800e17 	ldw	r18,56(sp)
    35b4:	dc400d17 	ldw	r17,52(sp)
    35b8:	d8c01904 	addi	r3,sp,100
    35bc:	003fee06 	br	3578 <___vfprintf_internal_r+0x16a8>
    35c0:	3c000017 	ldw	r16,0(r7)
    35c4:	0023883a 	mov	r17,zero
    35c8:	39c00104 	addi	r7,r7,4
    35cc:	d9c14015 	stw	r7,1280(sp)
    35d0:	003e8c06 	br	3004 <___vfprintf_internal_r+0x1134>
    35d4:	d9401904 	addi	r5,sp,100
    35d8:	dd000f04 	addi	r20,sp,60
    35dc:	d9414115 	stw	r5,1284(sp)
    35e0:	d9814417 	ldw	r6,1296(sp)
    35e4:	880a973a 	slli	r5,r17,28
    35e8:	8004d13a 	srli	r2,r16,4
    35ec:	810003cc 	andi	r4,r16,15
    35f0:	3109883a 	add	r4,r6,r4
    35f4:	2884b03a 	or	r2,r5,r2
    35f8:	21400003 	ldbu	r5,0(r4)
    35fc:	d9014117 	ldw	r4,1284(sp)
    3600:	8806d13a 	srli	r3,r17,4
    3604:	1021883a 	mov	r16,r2
    3608:	213fffc4 	addi	r4,r4,-1
    360c:	d9014115 	stw	r4,1284(sp)
    3610:	d9814117 	ldw	r6,1284(sp)
    3614:	10c8b03a 	or	r4,r2,r3
    3618:	1823883a 	mov	r17,r3
    361c:	31400005 	stb	r5,0(r6)
    3620:	203fef1e 	bne	r4,zero,35e0 <___vfprintf_internal_r+0x1710>
    3624:	003cc506 	br	293c <___vfprintf_internal_r+0xa6c>
    3628:	00800c04 	movi	r2,48
    362c:	d98018c4 	addi	r6,sp,99
    3630:	dd000f04 	addi	r20,sp,60
    3634:	d88018c5 	stb	r2,99(sp)
    3638:	d9814115 	stw	r6,1284(sp)
    363c:	003cbf06 	br	293c <___vfprintf_internal_r+0xa6c>
    3640:	dc400d17 	ldw	r17,52(sp)
    3644:	07000074 	movhi	fp,1
    3648:	e7389684 	addi	fp,fp,-7590
    364c:	003bc106 	br	2554 <___vfprintf_internal_r+0x684>
    3650:	d9414c17 	ldw	r5,1328(sp)
    3654:	2880040c 	andi	r2,r5,16
    3658:	10007c26 	beq	r2,zero,384c <___vfprintf_internal_r+0x197c>
    365c:	38800017 	ldw	r2,0(r7)
    3660:	39c00104 	addi	r7,r7,4
    3664:	d9c14015 	stw	r7,1280(sp)
    3668:	d9814b17 	ldw	r6,1324(sp)
    366c:	d9c14017 	ldw	r7,1280(sp)
    3670:	11800015 	stw	r6,0(r2)
    3674:	003a7206 	br	2040 <___vfprintf_internal_r+0x170>
    3678:	d9014f17 	ldw	r4,1340(sp)
    367c:	b00b883a 	mov	r5,r22
    3680:	d9800c04 	addi	r6,sp,48
    3684:	0001e780 	call	1e78 <__sprint_r>
    3688:	103bc91e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    368c:	dc800e17 	ldw	r18,56(sp)
    3690:	dc400d17 	ldw	r17,52(sp)
    3694:	d8c01904 	addi	r3,sp,100
    3698:	d9014717 	ldw	r4,1308(sp)
    369c:	d9414117 	ldw	r5,1284(sp)
    36a0:	8c400044 	addi	r17,r17,1
    36a4:	9125883a 	add	r18,r18,r4
    36a8:	008001c4 	movi	r2,7
    36ac:	19400015 	stw	r5,0(r3)
    36b0:	19000115 	stw	r4,4(r3)
    36b4:	dc800e15 	stw	r18,56(sp)
    36b8:	dc400d15 	stw	r17,52(sp)
    36bc:	147ce816 	blt	r2,r17,2a60 <___vfprintf_internal_r+0xb90>
    36c0:	18c00204 	addi	r3,r3,8
    36c4:	003b8006 	br	24c8 <___vfprintf_internal_r+0x5f8>
    36c8:	38c00017 	ldw	r3,0(r7)
    36cc:	39000204 	addi	r4,r7,8
    36d0:	d9014015 	stw	r4,1280(sp)
    36d4:	d8c14215 	stw	r3,1288(sp)
    36d8:	39c00117 	ldw	r7,4(r7)
    36dc:	d9c14315 	stw	r7,1292(sp)
    36e0:	003e1a06 	br	2f4c <___vfprintf_internal_r+0x107c>
    36e4:	0005883a 	mov	r2,zero
    36e8:	1409c83a 	sub	r4,r2,r16
    36ec:	1105803a 	cmpltu	r2,r2,r4
    36f0:	044bc83a 	sub	r5,zero,r17
    36f4:	2885c83a 	sub	r2,r5,r2
    36f8:	2021883a 	mov	r16,r4
    36fc:	1023883a 	mov	r17,r2
    3700:	01000044 	movi	r4,1
    3704:	00800b44 	movi	r2,45
    3708:	d8800405 	stb	r2,16(sp)
    370c:	003c7e06 	br	2908 <___vfprintf_internal_r+0xa38>
    3710:	d9014f17 	ldw	r4,1340(sp)
    3714:	b00b883a 	mov	r5,r22
    3718:	d9800c04 	addi	r6,sp,48
    371c:	0001e780 	call	1e78 <__sprint_r>
    3720:	103ba31e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    3724:	dc800e17 	ldw	r18,56(sp)
    3728:	dc400d17 	ldw	r17,52(sp)
    372c:	d9000517 	ldw	r4,20(sp)
    3730:	d9401904 	addi	r5,sp,100
    3734:	003da106 	br	2dbc <___vfprintf_internal_r+0xeec>
    3738:	d9014f17 	ldw	r4,1340(sp)
    373c:	b00b883a 	mov	r5,r22
    3740:	d9800c04 	addi	r6,sp,48
    3744:	0001e780 	call	1e78 <__sprint_r>
    3748:	103b991e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    374c:	dc800e17 	ldw	r18,56(sp)
    3750:	dc400d17 	ldw	r17,52(sp)
    3754:	d9000517 	ldw	r4,20(sp)
    3758:	d8c01904 	addi	r3,sp,100
    375c:	003d8b06 	br	2d8c <___vfprintf_internal_r+0xebc>
    3760:	07000074 	movhi	fp,1
    3764:	e7389284 	addi	fp,fp,-7606
    3768:	9425883a 	add	r18,r18,r16
    376c:	8c400044 	addi	r17,r17,1
    3770:	008001c4 	movi	r2,7
    3774:	1f000015 	stw	fp,0(r3)
    3778:	1c000115 	stw	r16,4(r3)
    377c:	dc800e15 	stw	r18,56(sp)
    3780:	dc400d15 	stw	r17,52(sp)
    3784:	147fbc16 	blt	r2,r17,3678 <___vfprintf_internal_r+0x17a8>
    3788:	18c00204 	addi	r3,r3,8
    378c:	003fc206 	br	3698 <___vfprintf_internal_r+0x17c8>
    3790:	d9014f17 	ldw	r4,1340(sp)
    3794:	b00b883a 	mov	r5,r22
    3798:	d9800c04 	addi	r6,sp,48
    379c:	0001e780 	call	1e78 <__sprint_r>
    37a0:	103b831e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    37a4:	dc800e17 	ldw	r18,56(sp)
    37a8:	d9000517 	ldw	r4,20(sp)
    37ac:	d8c01904 	addi	r3,sp,100
    37b0:	003cfc06 	br	2ba4 <___vfprintf_internal_r+0xcd4>
    37b4:	07000074 	movhi	fp,1
    37b8:	e7389284 	addi	fp,fp,-7606
    37bc:	003bde06 	br	2738 <___vfprintf_internal_r+0x868>
    37c0:	00800074 	movhi	r2,1
    37c4:	10b88104 	addi	r2,r2,-7676
    37c8:	d8814115 	stw	r2,1284(sp)
    37cc:	003def06 	br	2f8c <___vfprintf_internal_r+0x10bc>
    37d0:	d9014217 	ldw	r4,1288(sp)
    37d4:	d9414317 	ldw	r5,1292(sp)
    37d8:	00089c00 	call	89c0 <__isnand>
    37dc:	10003926 	beq	r2,zero,38c4 <___vfprintf_internal_r+0x19f4>
    37e0:	d9414d17 	ldw	r5,1332(sp)
    37e4:	008011c4 	movi	r2,71
    37e8:	1140ce16 	blt	r2,r5,3b24 <___vfprintf_internal_r+0x1c54>
    37ec:	01800074 	movhi	r6,1
    37f0:	31b88204 	addi	r6,r6,-7672
    37f4:	d9814115 	stw	r6,1284(sp)
    37f8:	003de406 	br	2f8c <___vfprintf_internal_r+0x10bc>
    37fc:	d9014c17 	ldw	r4,1328(sp)
    3800:	bdc00044 	addi	r23,r23,1
    3804:	b8c00007 	ldb	r3,0(r23)
    3808:	21000814 	ori	r4,r4,32
    380c:	d9014c15 	stw	r4,1328(sp)
    3810:	003a2e06 	br	20cc <___vfprintf_internal_r+0x1fc>
    3814:	dcc14515 	stw	r19,1300(sp)
    3818:	98011016 	blt	r19,zero,3c5c <___vfprintf_internal_r+0x1d8c>
    381c:	980f883a 	mov	r7,r19
    3820:	d8014615 	stw	zero,1304(sp)
    3824:	003c4c06 	br	2958 <___vfprintf_internal_r+0xa88>
    3828:	d9014f17 	ldw	r4,1340(sp)
    382c:	b00b883a 	mov	r5,r22
    3830:	d9800c04 	addi	r6,sp,48
    3834:	0001e780 	call	1e78 <__sprint_r>
    3838:	103b5d1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    383c:	dc800e17 	ldw	r18,56(sp)
    3840:	d9000517 	ldw	r4,20(sp)
    3844:	d8c01904 	addi	r3,sp,100
    3848:	003f2e06 	br	3504 <___vfprintf_internal_r+0x1634>
    384c:	d8c14c17 	ldw	r3,1328(sp)
    3850:	1880100c 	andi	r2,r3,64
    3854:	1000a026 	beq	r2,zero,3ad8 <___vfprintf_internal_r+0x1c08>
    3858:	38800017 	ldw	r2,0(r7)
    385c:	39c00104 	addi	r7,r7,4
    3860:	d9c14015 	stw	r7,1280(sp)
    3864:	d9014b17 	ldw	r4,1324(sp)
    3868:	d9c14017 	ldw	r7,1280(sp)
    386c:	1100000d 	sth	r4,0(r2)
    3870:	0039f306 	br	2040 <___vfprintf_internal_r+0x170>
    3874:	d9014f17 	ldw	r4,1340(sp)
    3878:	b00b883a 	mov	r5,r22
    387c:	d9800c04 	addi	r6,sp,48
    3880:	0001e780 	call	1e78 <__sprint_r>
    3884:	103b4a1e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    3888:	dc800e17 	ldw	r18,56(sp)
    388c:	dc400d17 	ldw	r17,52(sp)
    3890:	d9000517 	ldw	r4,20(sp)
    3894:	d8c01904 	addi	r3,sp,100
    3898:	003f2d06 	br	3550 <___vfprintf_internal_r+0x1680>
    389c:	00800184 	movi	r2,6
    38a0:	14c09a36 	bltu	r2,r19,3b0c <___vfprintf_internal_r+0x1c3c>
    38a4:	dcc14515 	stw	r19,1300(sp)
    38a8:	9800010e 	bge	r19,zero,38b0 <___vfprintf_internal_r+0x19e0>
    38ac:	d8014515 	stw	zero,1300(sp)
    38b0:	00800074 	movhi	r2,1
    38b4:	10b88404 	addi	r2,r2,-7664
    38b8:	980f883a 	mov	r7,r19
    38bc:	d8814115 	stw	r2,1284(sp)
    38c0:	003a7206 	br	228c <___vfprintf_internal_r+0x3bc>
    38c4:	00bfffc4 	movi	r2,-1
    38c8:	9880e226 	beq	r19,r2,3c54 <___vfprintf_internal_r+0x1d84>
    38cc:	d9414d17 	ldw	r5,1332(sp)
    38d0:	008019c4 	movi	r2,103
    38d4:	2880dc26 	beq	r5,r2,3c48 <___vfprintf_internal_r+0x1d78>
    38d8:	008011c4 	movi	r2,71
    38dc:	2880da26 	beq	r5,r2,3c48 <___vfprintf_internal_r+0x1d78>
    38e0:	d9414c17 	ldw	r5,1328(sp)
    38e4:	d9014317 	ldw	r4,1292(sp)
    38e8:	d9814217 	ldw	r6,1288(sp)
    38ec:	29404014 	ori	r5,r5,256
    38f0:	d9414c15 	stw	r5,1328(sp)
    38f4:	2000cc16 	blt	r4,zero,3c28 <___vfprintf_internal_r+0x1d58>
    38f8:	3021883a 	mov	r16,r6
    38fc:	2023883a 	mov	r17,r4
    3900:	0039883a 	mov	fp,zero
    3904:	d9414d17 	ldw	r5,1332(sp)
    3908:	00801984 	movi	r2,102
    390c:	2880b726 	beq	r5,r2,3bec <___vfprintf_internal_r+0x1d1c>
    3910:	00801184 	movi	r2,70
    3914:	2880b526 	beq	r5,r2,3bec <___vfprintf_internal_r+0x1d1c>
    3918:	00801944 	movi	r2,101
    391c:	2880c826 	beq	r5,r2,3c40 <___vfprintf_internal_r+0x1d70>
    3920:	00801144 	movi	r2,69
    3924:	2880c626 	beq	r5,r2,3c40 <___vfprintf_internal_r+0x1d70>
    3928:	9829883a 	mov	r20,r19
    392c:	d9014f17 	ldw	r4,1340(sp)
    3930:	d8800504 	addi	r2,sp,20
    3934:	880d883a 	mov	r6,r17
    3938:	d8800115 	stw	r2,4(sp)
    393c:	d8c00604 	addi	r3,sp,24
    3940:	d8800704 	addi	r2,sp,28
    3944:	800b883a 	mov	r5,r16
    3948:	01c00084 	movi	r7,2
    394c:	d8c00215 	stw	r3,8(sp)
    3950:	d8800315 	stw	r2,12(sp)
    3954:	dd000015 	stw	r20,0(sp)
    3958:	00041380 	call	4138 <_dtoa_r>
    395c:	d9814d17 	ldw	r6,1332(sp)
    3960:	d8814115 	stw	r2,1284(sp)
    3964:	008019c4 	movi	r2,103
    3968:	30809526 	beq	r6,r2,3bc0 <___vfprintf_internal_r+0x1cf0>
    396c:	d8c14d17 	ldw	r3,1332(sp)
    3970:	008011c4 	movi	r2,71
    3974:	18809226 	beq	r3,r2,3bc0 <___vfprintf_internal_r+0x1cf0>
    3978:	d9414117 	ldw	r5,1284(sp)
    397c:	d9814d17 	ldw	r6,1332(sp)
    3980:	00801984 	movi	r2,102
    3984:	2d25883a 	add	r18,r5,r20
    3988:	30808626 	beq	r6,r2,3ba4 <___vfprintf_internal_r+0x1cd4>
    398c:	00801184 	movi	r2,70
    3990:	30808426 	beq	r6,r2,3ba4 <___vfprintf_internal_r+0x1cd4>
    3994:	000d883a 	mov	r6,zero
    3998:	000f883a 	mov	r7,zero
    399c:	880b883a 	mov	r5,r17
    39a0:	8009883a 	mov	r4,r16
    39a4:	000a8fc0 	call	a8fc <__eqdf2>
    39a8:	1000751e 	bne	r2,zero,3b80 <___vfprintf_internal_r+0x1cb0>
    39ac:	9005883a 	mov	r2,r18
    39b0:	dc800715 	stw	r18,28(sp)
    39b4:	d9014117 	ldw	r4,1284(sp)
    39b8:	d9414d17 	ldw	r5,1332(sp)
    39bc:	00c019c4 	movi	r3,103
    39c0:	1125c83a 	sub	r18,r2,r4
    39c4:	28c06826 	beq	r5,r3,3b68 <___vfprintf_internal_r+0x1c98>
    39c8:	008011c4 	movi	r2,71
    39cc:	28806626 	beq	r5,r2,3b68 <___vfprintf_internal_r+0x1c98>
    39d0:	d9000517 	ldw	r4,20(sp)
    39d4:	d8c14d17 	ldw	r3,1332(sp)
    39d8:	00801944 	movi	r2,101
    39dc:	10c05516 	blt	r2,r3,3b34 <___vfprintf_internal_r+0x1c64>
    39e0:	213fffc4 	addi	r4,r4,-1
    39e4:	d9000515 	stw	r4,20(sp)
    39e8:	d8c00805 	stb	r3,32(sp)
    39ec:	2021883a 	mov	r16,r4
    39f0:	2000c116 	blt	r4,zero,3cf8 <___vfprintf_internal_r+0x1e28>
    39f4:	00800ac4 	movi	r2,43
    39f8:	d8800845 	stb	r2,33(sp)
    39fc:	00800244 	movi	r2,9
    3a00:	1400af0e 	bge	r2,r16,3cc0 <___vfprintf_internal_r+0x1df0>
    3a04:	1027883a 	mov	r19,r2
    3a08:	dc400b84 	addi	r17,sp,46
    3a0c:	8009883a 	mov	r4,r16
    3a10:	01400284 	movi	r5,10
    3a14:	0001c300 	call	1c30 <__modsi3>
    3a18:	10800c04 	addi	r2,r2,48
    3a1c:	8c7fffc4 	addi	r17,r17,-1
    3a20:	8009883a 	mov	r4,r16
    3a24:	01400284 	movi	r5,10
    3a28:	88800005 	stb	r2,0(r17)
    3a2c:	0001bd00 	call	1bd0 <__divsi3>
    3a30:	1021883a 	mov	r16,r2
    3a34:	98bff516 	blt	r19,r2,3a0c <___vfprintf_internal_r+0x1b3c>
    3a38:	10c00c04 	addi	r3,r2,48
    3a3c:	d88009c4 	addi	r2,sp,39
    3a40:	108001c4 	addi	r2,r2,7
    3a44:	897fffc4 	addi	r5,r17,-1
    3a48:	88ffffc5 	stb	r3,-1(r17)
    3a4c:	2880a72e 	bgeu	r5,r2,3cec <___vfprintf_internal_r+0x1e1c>
    3a50:	1009883a 	mov	r4,r2
    3a54:	d9800804 	addi	r6,sp,32
    3a58:	d8c00884 	addi	r3,sp,34
    3a5c:	28800003 	ldbu	r2,0(r5)
    3a60:	29400044 	addi	r5,r5,1
    3a64:	18800005 	stb	r2,0(r3)
    3a68:	18c00044 	addi	r3,r3,1
    3a6c:	293ffb36 	bltu	r5,r4,3a5c <___vfprintf_internal_r+0x1b8c>
    3a70:	1987c83a 	sub	r3,r3,r6
    3a74:	00800044 	movi	r2,1
    3a78:	d8c14815 	stw	r3,1312(sp)
    3a7c:	90cf883a 	add	r7,r18,r3
    3a80:	1480960e 	bge	r2,r18,3cdc <___vfprintf_internal_r+0x1e0c>
    3a84:	39c00044 	addi	r7,r7,1
    3a88:	d9c14515 	stw	r7,1300(sp)
    3a8c:	38003416 	blt	r7,zero,3b60 <___vfprintf_internal_r+0x1c90>
    3a90:	e0803fcc 	andi	r2,fp,255
    3a94:	1080201c 	xori	r2,r2,128
    3a98:	10bfe004 	addi	r2,r2,-128
    3a9c:	10004e26 	beq	r2,zero,3bd8 <___vfprintf_internal_r+0x1d08>
    3aa0:	00800b44 	movi	r2,45
    3aa4:	dc814715 	stw	r18,1308(sp)
    3aa8:	d8014615 	stw	zero,1304(sp)
    3aac:	d8800405 	stb	r2,16(sp)
    3ab0:	003bab06 	br	2960 <___vfprintf_internal_r+0xa90>
    3ab4:	00800b44 	movi	r2,45
    3ab8:	d8800405 	stb	r2,16(sp)
    3abc:	003d2d06 	br	2f74 <___vfprintf_internal_r+0x10a4>
    3ac0:	d9014f17 	ldw	r4,1340(sp)
    3ac4:	b00b883a 	mov	r5,r22
    3ac8:	d9800c04 	addi	r6,sp,48
    3acc:	0001e780 	call	1e78 <__sprint_r>
    3ad0:	103ab71e 	bne	r2,zero,25b0 <___vfprintf_internal_r+0x6e0>
    3ad4:	003ab506 	br	25ac <___vfprintf_internal_r+0x6dc>
    3ad8:	38800017 	ldw	r2,0(r7)
    3adc:	39c00104 	addi	r7,r7,4
    3ae0:	d9c14015 	stw	r7,1280(sp)
    3ae4:	d9414b17 	ldw	r5,1324(sp)
    3ae8:	d9c14017 	ldw	r7,1280(sp)
    3aec:	11400015 	stw	r5,0(r2)
    3af0:	00395306 	br	2040 <___vfprintf_internal_r+0x170>
    3af4:	980f883a 	mov	r7,r19
    3af8:	dcc14515 	stw	r19,1300(sp)
    3afc:	d8014615 	stw	zero,1304(sp)
    3b00:	003b9506 	br	2958 <___vfprintf_internal_r+0xa88>
    3b04:	0027883a 	mov	r19,zero
    3b08:	00397206 	br	20d4 <___vfprintf_internal_r+0x204>
    3b0c:	00c00074 	movhi	r3,1
    3b10:	18f88404 	addi	r3,r3,-7664
    3b14:	100f883a 	mov	r7,r2
    3b18:	d8814515 	stw	r2,1300(sp)
    3b1c:	d8c14115 	stw	r3,1284(sp)
    3b20:	0039da06 	br	228c <___vfprintf_internal_r+0x3bc>
    3b24:	00800074 	movhi	r2,1
    3b28:	10b88304 	addi	r2,r2,-7668
    3b2c:	d8814115 	stw	r2,1284(sp)
    3b30:	003d1606 	br	2f8c <___vfprintf_internal_r+0x10bc>
    3b34:	d9414d17 	ldw	r5,1332(sp)
    3b38:	00801984 	movi	r2,102
    3b3c:	28804926 	beq	r5,r2,3c64 <___vfprintf_internal_r+0x1d94>
    3b40:	200f883a 	mov	r7,r4
    3b44:	24805716 	blt	r4,r18,3ca4 <___vfprintf_internal_r+0x1dd4>
    3b48:	d9414c17 	ldw	r5,1328(sp)
    3b4c:	2880004c 	andi	r2,r5,1
    3b50:	10000126 	beq	r2,zero,3b58 <___vfprintf_internal_r+0x1c88>
    3b54:	21c00044 	addi	r7,r4,1
    3b58:	d9c14515 	stw	r7,1300(sp)
    3b5c:	383fcc0e 	bge	r7,zero,3a90 <___vfprintf_internal_r+0x1bc0>
    3b60:	d8014515 	stw	zero,1300(sp)
    3b64:	003fca06 	br	3a90 <___vfprintf_internal_r+0x1bc0>
    3b68:	d9000517 	ldw	r4,20(sp)
    3b6c:	00bfff04 	movi	r2,-4
    3b70:	1100480e 	bge	r2,r4,3c94 <___vfprintf_internal_r+0x1dc4>
    3b74:	99004716 	blt	r19,r4,3c94 <___vfprintf_internal_r+0x1dc4>
    3b78:	d8c14d15 	stw	r3,1332(sp)
    3b7c:	003ff006 	br	3b40 <___vfprintf_internal_r+0x1c70>
    3b80:	d8800717 	ldw	r2,28(sp)
    3b84:	14bf8b2e 	bgeu	r2,r18,39b4 <___vfprintf_internal_r+0x1ae4>
    3b88:	9007883a 	mov	r3,r18
    3b8c:	01000c04 	movi	r4,48
    3b90:	11000005 	stb	r4,0(r2)
    3b94:	10800044 	addi	r2,r2,1
    3b98:	d8800715 	stw	r2,28(sp)
    3b9c:	18bffc1e 	bne	r3,r2,3b90 <___vfprintf_internal_r+0x1cc0>
    3ba0:	003f8406 	br	39b4 <___vfprintf_internal_r+0x1ae4>
    3ba4:	d8814117 	ldw	r2,1284(sp)
    3ba8:	10c00007 	ldb	r3,0(r2)
    3bac:	00800c04 	movi	r2,48
    3bb0:	18805b26 	beq	r3,r2,3d20 <___vfprintf_internal_r+0x1e50>
    3bb4:	d9000517 	ldw	r4,20(sp)
    3bb8:	9125883a 	add	r18,r18,r4
    3bbc:	003f7506 	br	3994 <___vfprintf_internal_r+0x1ac4>
    3bc0:	d9014c17 	ldw	r4,1328(sp)
    3bc4:	2080004c 	andi	r2,r4,1
    3bc8:	1005003a 	cmpeq	r2,r2,zero
    3bcc:	103f6a26 	beq	r2,zero,3978 <___vfprintf_internal_r+0x1aa8>
    3bd0:	d8800717 	ldw	r2,28(sp)
    3bd4:	003f7706 	br	39b4 <___vfprintf_internal_r+0x1ae4>
    3bd8:	d9c14515 	stw	r7,1300(sp)
    3bdc:	38004d16 	blt	r7,zero,3d14 <___vfprintf_internal_r+0x1e44>
    3be0:	dc814715 	stw	r18,1308(sp)
    3be4:	d8014615 	stw	zero,1304(sp)
    3be8:	003b5b06 	br	2958 <___vfprintf_internal_r+0xa88>
    3bec:	d9014f17 	ldw	r4,1340(sp)
    3bf0:	d8800504 	addi	r2,sp,20
    3bf4:	d8800115 	stw	r2,4(sp)
    3bf8:	d8c00604 	addi	r3,sp,24
    3bfc:	d8800704 	addi	r2,sp,28
    3c00:	800b883a 	mov	r5,r16
    3c04:	880d883a 	mov	r6,r17
    3c08:	01c000c4 	movi	r7,3
    3c0c:	d8c00215 	stw	r3,8(sp)
    3c10:	d8800315 	stw	r2,12(sp)
    3c14:	dcc00015 	stw	r19,0(sp)
    3c18:	9829883a 	mov	r20,r19
    3c1c:	00041380 	call	4138 <_dtoa_r>
    3c20:	d8814115 	stw	r2,1284(sp)
    3c24:	003f5106 	br	396c <___vfprintf_internal_r+0x1a9c>
    3c28:	d8c14217 	ldw	r3,1288(sp)
    3c2c:	d9014317 	ldw	r4,1292(sp)
    3c30:	07000b44 	movi	fp,45
    3c34:	1821883a 	mov	r16,r3
    3c38:	2460003c 	xorhi	r17,r4,32768
    3c3c:	003f3106 	br	3904 <___vfprintf_internal_r+0x1a34>
    3c40:	9d000044 	addi	r20,r19,1
    3c44:	003f3906 	br	392c <___vfprintf_internal_r+0x1a5c>
    3c48:	983f251e 	bne	r19,zero,38e0 <___vfprintf_internal_r+0x1a10>
    3c4c:	04c00044 	movi	r19,1
    3c50:	003f2306 	br	38e0 <___vfprintf_internal_r+0x1a10>
    3c54:	04c00184 	movi	r19,6
    3c58:	003f2106 	br	38e0 <___vfprintf_internal_r+0x1a10>
    3c5c:	d8014515 	stw	zero,1300(sp)
    3c60:	003eee06 	br	381c <___vfprintf_internal_r+0x194c>
    3c64:	200f883a 	mov	r7,r4
    3c68:	0100370e 	bge	zero,r4,3d48 <___vfprintf_internal_r+0x1e78>
    3c6c:	9800031e 	bne	r19,zero,3c7c <___vfprintf_internal_r+0x1dac>
    3c70:	d9814c17 	ldw	r6,1328(sp)
    3c74:	3080004c 	andi	r2,r6,1
    3c78:	103fb726 	beq	r2,zero,3b58 <___vfprintf_internal_r+0x1c88>
    3c7c:	20800044 	addi	r2,r4,1
    3c80:	98a7883a 	add	r19,r19,r2
    3c84:	dcc14515 	stw	r19,1300(sp)
    3c88:	980f883a 	mov	r7,r19
    3c8c:	983f800e 	bge	r19,zero,3a90 <___vfprintf_internal_r+0x1bc0>
    3c90:	003fb306 	br	3b60 <___vfprintf_internal_r+0x1c90>
    3c94:	d9814d17 	ldw	r6,1332(sp)
    3c98:	31bfff84 	addi	r6,r6,-2
    3c9c:	d9814d15 	stw	r6,1332(sp)
    3ca0:	003f4c06 	br	39d4 <___vfprintf_internal_r+0x1b04>
    3ca4:	0100180e 	bge	zero,r4,3d08 <___vfprintf_internal_r+0x1e38>
    3ca8:	00800044 	movi	r2,1
    3cac:	1485883a 	add	r2,r2,r18
    3cb0:	d8814515 	stw	r2,1300(sp)
    3cb4:	100f883a 	mov	r7,r2
    3cb8:	103f750e 	bge	r2,zero,3a90 <___vfprintf_internal_r+0x1bc0>
    3cbc:	003fa806 	br	3b60 <___vfprintf_internal_r+0x1c90>
    3cc0:	80c00c04 	addi	r3,r16,48
    3cc4:	00800c04 	movi	r2,48
    3cc8:	d8c008c5 	stb	r3,35(sp)
    3ccc:	d9800804 	addi	r6,sp,32
    3cd0:	d8c00904 	addi	r3,sp,36
    3cd4:	d8800885 	stb	r2,34(sp)
    3cd8:	003f6506 	br	3a70 <___vfprintf_internal_r+0x1ba0>
    3cdc:	d9014c17 	ldw	r4,1328(sp)
    3ce0:	2084703a 	and	r2,r4,r2
    3ce4:	103f9c26 	beq	r2,zero,3b58 <___vfprintf_internal_r+0x1c88>
    3ce8:	003f6606 	br	3a84 <___vfprintf_internal_r+0x1bb4>
    3cec:	d9800804 	addi	r6,sp,32
    3cf0:	d8c00884 	addi	r3,sp,34
    3cf4:	003f5e06 	br	3a70 <___vfprintf_internal_r+0x1ba0>
    3cf8:	00800b44 	movi	r2,45
    3cfc:	0121c83a 	sub	r16,zero,r4
    3d00:	d8800845 	stb	r2,33(sp)
    3d04:	003f3d06 	br	39fc <___vfprintf_internal_r+0x1b2c>
    3d08:	00800084 	movi	r2,2
    3d0c:	1105c83a 	sub	r2,r2,r4
    3d10:	003fe606 	br	3cac <___vfprintf_internal_r+0x1ddc>
    3d14:	d8014515 	stw	zero,1300(sp)
    3d18:	dc814715 	stw	r18,1308(sp)
    3d1c:	003fb106 	br	3be4 <___vfprintf_internal_r+0x1d14>
    3d20:	000d883a 	mov	r6,zero
    3d24:	000f883a 	mov	r7,zero
    3d28:	8009883a 	mov	r4,r16
    3d2c:	880b883a 	mov	r5,r17
    3d30:	000a9840 	call	a984 <__nedf2>
    3d34:	103f9f26 	beq	r2,zero,3bb4 <___vfprintf_internal_r+0x1ce4>
    3d38:	00800044 	movi	r2,1
    3d3c:	1509c83a 	sub	r4,r2,r20
    3d40:	d9000515 	stw	r4,20(sp)
    3d44:	003f9b06 	br	3bb4 <___vfprintf_internal_r+0x1ce4>
    3d48:	98000d1e 	bne	r19,zero,3d80 <___vfprintf_internal_r+0x1eb0>
    3d4c:	d8c14c17 	ldw	r3,1328(sp)
    3d50:	1880004c 	andi	r2,r3,1
    3d54:	10000a1e 	bne	r2,zero,3d80 <___vfprintf_internal_r+0x1eb0>
    3d58:	01000044 	movi	r4,1
    3d5c:	200f883a 	mov	r7,r4
    3d60:	d9014515 	stw	r4,1300(sp)
    3d64:	003f4a06 	br	3a90 <___vfprintf_internal_r+0x1bc0>
    3d68:	3cc00017 	ldw	r19,0(r7)
    3d6c:	39c00104 	addi	r7,r7,4
    3d70:	983d0e0e 	bge	r19,zero,31ac <___vfprintf_internal_r+0x12dc>
    3d74:	b8c00007 	ldb	r3,0(r23)
    3d78:	04ffffc4 	movi	r19,-1
    3d7c:	0038d306 	br	20cc <___vfprintf_internal_r+0x1fc>
    3d80:	9cc00084 	addi	r19,r19,2
    3d84:	dcc14515 	stw	r19,1300(sp)
    3d88:	980f883a 	mov	r7,r19
    3d8c:	983f400e 	bge	r19,zero,3a90 <___vfprintf_internal_r+0x1bc0>
    3d90:	003f7306 	br	3b60 <___vfprintf_internal_r+0x1c90>

00003d94 <__vfprintf_internal>:
    3d94:	00800074 	movhi	r2,1
    3d98:	10bfd204 	addi	r2,r2,-184
    3d9c:	2013883a 	mov	r9,r4
    3da0:	11000017 	ldw	r4,0(r2)
    3da4:	2805883a 	mov	r2,r5
    3da8:	300f883a 	mov	r7,r6
    3dac:	480b883a 	mov	r5,r9
    3db0:	100d883a 	mov	r6,r2
    3db4:	0001ed01 	jmpi	1ed0 <___vfprintf_internal_r>

00003db8 <__swsetup_r>:
    3db8:	00800074 	movhi	r2,1
    3dbc:	10bfd204 	addi	r2,r2,-184
    3dc0:	10c00017 	ldw	r3,0(r2)
    3dc4:	defffd04 	addi	sp,sp,-12
    3dc8:	dc400115 	stw	r17,4(sp)
    3dcc:	dc000015 	stw	r16,0(sp)
    3dd0:	dfc00215 	stw	ra,8(sp)
    3dd4:	2023883a 	mov	r17,r4
    3dd8:	2821883a 	mov	r16,r5
    3ddc:	18000226 	beq	r3,zero,3de8 <__swsetup_r+0x30>
    3de0:	18800e17 	ldw	r2,56(r3)
    3de4:	10001f26 	beq	r2,zero,3e64 <__swsetup_r+0xac>
    3de8:	8100030b 	ldhu	r4,12(r16)
    3dec:	2080020c 	andi	r2,r4,8
    3df0:	10002826 	beq	r2,zero,3e94 <__swsetup_r+0xdc>
    3df4:	81400417 	ldw	r5,16(r16)
    3df8:	28001d26 	beq	r5,zero,3e70 <__swsetup_r+0xb8>
    3dfc:	2080004c 	andi	r2,r4,1
    3e00:	1005003a 	cmpeq	r2,r2,zero
    3e04:	10000b26 	beq	r2,zero,3e34 <__swsetup_r+0x7c>
    3e08:	2080008c 	andi	r2,r4,2
    3e0c:	10001226 	beq	r2,zero,3e58 <__swsetup_r+0xa0>
    3e10:	0005883a 	mov	r2,zero
    3e14:	80800215 	stw	r2,8(r16)
    3e18:	28000b26 	beq	r5,zero,3e48 <__swsetup_r+0x90>
    3e1c:	0005883a 	mov	r2,zero
    3e20:	dfc00217 	ldw	ra,8(sp)
    3e24:	dc400117 	ldw	r17,4(sp)
    3e28:	dc000017 	ldw	r16,0(sp)
    3e2c:	dec00304 	addi	sp,sp,12
    3e30:	f800283a 	ret
    3e34:	80800517 	ldw	r2,20(r16)
    3e38:	80000215 	stw	zero,8(r16)
    3e3c:	0085c83a 	sub	r2,zero,r2
    3e40:	80800615 	stw	r2,24(r16)
    3e44:	283ff51e 	bne	r5,zero,3e1c <__swsetup_r+0x64>
    3e48:	2080200c 	andi	r2,r4,128
    3e4c:	103ff326 	beq	r2,zero,3e1c <__swsetup_r+0x64>
    3e50:	00bfffc4 	movi	r2,-1
    3e54:	003ff206 	br	3e20 <__swsetup_r+0x68>
    3e58:	80800517 	ldw	r2,20(r16)
    3e5c:	80800215 	stw	r2,8(r16)
    3e60:	003fed06 	br	3e18 <__swsetup_r+0x60>
    3e64:	1809883a 	mov	r4,r3
    3e68:	00059840 	call	5984 <__sinit>
    3e6c:	003fde06 	br	3de8 <__swsetup_r+0x30>
    3e70:	20c0a00c 	andi	r3,r4,640
    3e74:	00808004 	movi	r2,512
    3e78:	18bfe026 	beq	r3,r2,3dfc <__swsetup_r+0x44>
    3e7c:	8809883a 	mov	r4,r17
    3e80:	800b883a 	mov	r5,r16
    3e84:	00067300 	call	6730 <__smakebuf_r>
    3e88:	8100030b 	ldhu	r4,12(r16)
    3e8c:	81400417 	ldw	r5,16(r16)
    3e90:	003fda06 	br	3dfc <__swsetup_r+0x44>
    3e94:	2080040c 	andi	r2,r4,16
    3e98:	103fed26 	beq	r2,zero,3e50 <__swsetup_r+0x98>
    3e9c:	2080010c 	andi	r2,r4,4
    3ea0:	10001226 	beq	r2,zero,3eec <__swsetup_r+0x134>
    3ea4:	81400c17 	ldw	r5,48(r16)
    3ea8:	28000526 	beq	r5,zero,3ec0 <__swsetup_r+0x108>
    3eac:	80801004 	addi	r2,r16,64
    3eb0:	28800226 	beq	r5,r2,3ebc <__swsetup_r+0x104>
    3eb4:	8809883a 	mov	r4,r17
    3eb8:	0005d3c0 	call	5d3c <_free_r>
    3ebc:	80000c15 	stw	zero,48(r16)
    3ec0:	8080030b 	ldhu	r2,12(r16)
    3ec4:	81400417 	ldw	r5,16(r16)
    3ec8:	80000115 	stw	zero,4(r16)
    3ecc:	10bff6cc 	andi	r2,r2,65499
    3ed0:	8080030d 	sth	r2,12(r16)
    3ed4:	81400015 	stw	r5,0(r16)
    3ed8:	8080030b 	ldhu	r2,12(r16)
    3edc:	10800214 	ori	r2,r2,8
    3ee0:	113fffcc 	andi	r4,r2,65535
    3ee4:	8080030d 	sth	r2,12(r16)
    3ee8:	003fc306 	br	3df8 <__swsetup_r+0x40>
    3eec:	81400417 	ldw	r5,16(r16)
    3ef0:	003ff906 	br	3ed8 <__swsetup_r+0x120>

00003ef4 <quorem>:
    3ef4:	28c00417 	ldw	r3,16(r5)
    3ef8:	20800417 	ldw	r2,16(r4)
    3efc:	defff104 	addi	sp,sp,-60
    3f00:	dfc00e15 	stw	ra,56(sp)
    3f04:	df000d15 	stw	fp,52(sp)
    3f08:	ddc00c15 	stw	r23,48(sp)
    3f0c:	dd800b15 	stw	r22,44(sp)
    3f10:	dd400a15 	stw	r21,40(sp)
    3f14:	dd000915 	stw	r20,36(sp)
    3f18:	dcc00815 	stw	r19,32(sp)
    3f1c:	dc800715 	stw	r18,28(sp)
    3f20:	dc400615 	stw	r17,24(sp)
    3f24:	dc000515 	stw	r16,20(sp)
    3f28:	d9000315 	stw	r4,12(sp)
    3f2c:	d9400415 	stw	r5,16(sp)
    3f30:	10c07f16 	blt	r2,r3,4130 <quorem+0x23c>
    3f34:	1d3fffc4 	addi	r20,r3,-1
    3f38:	d8c00417 	ldw	r3,16(sp)
    3f3c:	d9000317 	ldw	r4,12(sp)
    3f40:	a505883a 	add	r2,r20,r20
    3f44:	1085883a 	add	r2,r2,r2
    3f48:	1cc00504 	addi	r19,r3,20
    3f4c:	25c00504 	addi	r23,r4,20
    3f50:	98ad883a 	add	r22,r19,r2
    3f54:	15c7883a 	add	r3,r2,r23
    3f58:	b1400017 	ldw	r5,0(r22)
    3f5c:	19000017 	ldw	r4,0(r3)
    3f60:	d8c00015 	stw	r3,0(sp)
    3f64:	29400044 	addi	r5,r5,1
    3f68:	d9000215 	stw	r4,8(sp)
    3f6c:	0001c900 	call	1c90 <__udivsi3>
    3f70:	1039883a 	mov	fp,r2
    3f74:	10003d1e 	bne	r2,zero,406c <quorem+0x178>
    3f78:	d9400417 	ldw	r5,16(sp)
    3f7c:	d9000317 	ldw	r4,12(sp)
    3f80:	000745c0 	call	745c <__mcmp>
    3f84:	10002c16 	blt	r2,zero,4038 <quorem+0x144>
    3f88:	e7000044 	addi	fp,fp,1
    3f8c:	b80f883a 	mov	r7,r23
    3f90:	0011883a 	mov	r8,zero
    3f94:	0009883a 	mov	r4,zero
    3f98:	99400017 	ldw	r5,0(r19)
    3f9c:	38c00017 	ldw	r3,0(r7)
    3fa0:	9cc00104 	addi	r19,r19,4
    3fa4:	28bfffcc 	andi	r2,r5,65535
    3fa8:	2085883a 	add	r2,r4,r2
    3fac:	11bfffcc 	andi	r6,r2,65535
    3fb0:	193fffcc 	andi	r4,r3,65535
    3fb4:	1004d43a 	srli	r2,r2,16
    3fb8:	280ad43a 	srli	r5,r5,16
    3fbc:	2189c83a 	sub	r4,r4,r6
    3fc0:	2209883a 	add	r4,r4,r8
    3fc4:	1806d43a 	srli	r3,r3,16
    3fc8:	288b883a 	add	r5,r5,r2
    3fcc:	200dd43a 	srai	r6,r4,16
    3fd0:	28bfffcc 	andi	r2,r5,65535
    3fd4:	1887c83a 	sub	r3,r3,r2
    3fd8:	1987883a 	add	r3,r3,r6
    3fdc:	3900000d 	sth	r4,0(r7)
    3fe0:	38c0008d 	sth	r3,2(r7)
    3fe4:	2808d43a 	srli	r4,r5,16
    3fe8:	39c00104 	addi	r7,r7,4
    3fec:	1811d43a 	srai	r8,r3,16
    3ff0:	b4ffe92e 	bgeu	r22,r19,3f98 <quorem+0xa4>
    3ff4:	a505883a 	add	r2,r20,r20
    3ff8:	1085883a 	add	r2,r2,r2
    3ffc:	b885883a 	add	r2,r23,r2
    4000:	10c00017 	ldw	r3,0(r2)
    4004:	18000c1e 	bne	r3,zero,4038 <quorem+0x144>
    4008:	113fff04 	addi	r4,r2,-4
    400c:	b900082e 	bgeu	r23,r4,4030 <quorem+0x13c>
    4010:	10bfff17 	ldw	r2,-4(r2)
    4014:	10000326 	beq	r2,zero,4024 <quorem+0x130>
    4018:	00000506 	br	4030 <quorem+0x13c>
    401c:	20800017 	ldw	r2,0(r4)
    4020:	1000031e 	bne	r2,zero,4030 <quorem+0x13c>
    4024:	213fff04 	addi	r4,r4,-4
    4028:	a53fffc4 	addi	r20,r20,-1
    402c:	b93ffb36 	bltu	r23,r4,401c <quorem+0x128>
    4030:	d9000317 	ldw	r4,12(sp)
    4034:	25000415 	stw	r20,16(r4)
    4038:	e005883a 	mov	r2,fp
    403c:	dfc00e17 	ldw	ra,56(sp)
    4040:	df000d17 	ldw	fp,52(sp)
    4044:	ddc00c17 	ldw	r23,48(sp)
    4048:	dd800b17 	ldw	r22,44(sp)
    404c:	dd400a17 	ldw	r21,40(sp)
    4050:	dd000917 	ldw	r20,36(sp)
    4054:	dcc00817 	ldw	r19,32(sp)
    4058:	dc800717 	ldw	r18,28(sp)
    405c:	dc400617 	ldw	r17,24(sp)
    4060:	dc000517 	ldw	r16,20(sp)
    4064:	dec00f04 	addi	sp,sp,60
    4068:	f800283a 	ret
    406c:	b823883a 	mov	r17,r23
    4070:	9825883a 	mov	r18,r19
    4074:	d8000115 	stw	zero,4(sp)
    4078:	002b883a 	mov	r21,zero
    407c:	94000017 	ldw	r16,0(r18)
    4080:	e009883a 	mov	r4,fp
    4084:	94800104 	addi	r18,r18,4
    4088:	817fffcc 	andi	r5,r16,65535
    408c:	0001ca00 	call	1ca0 <__mulsi3>
    4090:	800ad43a 	srli	r5,r16,16
    4094:	e009883a 	mov	r4,fp
    4098:	a8a1883a 	add	r16,r21,r2
    409c:	0001ca00 	call	1ca0 <__mulsi3>
    40a0:	89000017 	ldw	r4,0(r17)
    40a4:	80ffffcc 	andi	r3,r16,65535
    40a8:	8020d43a 	srli	r16,r16,16
    40ac:	217fffcc 	andi	r5,r4,65535
    40b0:	28cbc83a 	sub	r5,r5,r3
    40b4:	d8c00117 	ldw	r3,4(sp)
    40b8:	2008d43a 	srli	r4,r4,16
    40bc:	1405883a 	add	r2,r2,r16
    40c0:	28cb883a 	add	r5,r5,r3
    40c4:	280dd43a 	srai	r6,r5,16
    40c8:	10ffffcc 	andi	r3,r2,65535
    40cc:	20c9c83a 	sub	r4,r4,r3
    40d0:	2189883a 	add	r4,r4,r6
    40d4:	8900008d 	sth	r4,2(r17)
    40d8:	2009d43a 	srai	r4,r4,16
    40dc:	8940000d 	sth	r5,0(r17)
    40e0:	102ad43a 	srli	r21,r2,16
    40e4:	8c400104 	addi	r17,r17,4
    40e8:	d9000115 	stw	r4,4(sp)
    40ec:	b4bfe32e 	bgeu	r22,r18,407c <quorem+0x188>
    40f0:	d9000217 	ldw	r4,8(sp)
    40f4:	203fa01e 	bne	r4,zero,3f78 <quorem+0x84>
    40f8:	d8800017 	ldw	r2,0(sp)
    40fc:	10ffff04 	addi	r3,r2,-4
    4100:	b8c0082e 	bgeu	r23,r3,4124 <quorem+0x230>
    4104:	10bfff17 	ldw	r2,-4(r2)
    4108:	10000326 	beq	r2,zero,4118 <quorem+0x224>
    410c:	00000506 	br	4124 <quorem+0x230>
    4110:	18800017 	ldw	r2,0(r3)
    4114:	1000031e 	bne	r2,zero,4124 <quorem+0x230>
    4118:	18ffff04 	addi	r3,r3,-4
    411c:	a53fffc4 	addi	r20,r20,-1
    4120:	b8fffb36 	bltu	r23,r3,4110 <quorem+0x21c>
    4124:	d8c00317 	ldw	r3,12(sp)
    4128:	1d000415 	stw	r20,16(r3)
    412c:	003f9206 	br	3f78 <quorem+0x84>
    4130:	0005883a 	mov	r2,zero
    4134:	003fc106 	br	403c <quorem+0x148>

00004138 <_dtoa_r>:
    4138:	22001017 	ldw	r8,64(r4)
    413c:	deffda04 	addi	sp,sp,-152
    4140:	dd402115 	stw	r21,132(sp)
    4144:	dd002015 	stw	r20,128(sp)
    4148:	dc801e15 	stw	r18,120(sp)
    414c:	dc401d15 	stw	r17,116(sp)
    4150:	dfc02515 	stw	ra,148(sp)
    4154:	df002415 	stw	fp,144(sp)
    4158:	ddc02315 	stw	r23,140(sp)
    415c:	dd802215 	stw	r22,136(sp)
    4160:	dcc01f15 	stw	r19,124(sp)
    4164:	dc001c15 	stw	r16,112(sp)
    4168:	d9001615 	stw	r4,88(sp)
    416c:	3023883a 	mov	r17,r6
    4170:	2829883a 	mov	r20,r5
    4174:	d9c01715 	stw	r7,92(sp)
    4178:	dc802817 	ldw	r18,160(sp)
    417c:	302b883a 	mov	r21,r6
    4180:	40000a26 	beq	r8,zero,41ac <_dtoa_r+0x74>
    4184:	20801117 	ldw	r2,68(r4)
    4188:	400b883a 	mov	r5,r8
    418c:	40800115 	stw	r2,4(r8)
    4190:	20c01117 	ldw	r3,68(r4)
    4194:	00800044 	movi	r2,1
    4198:	10c4983a 	sll	r2,r2,r3
    419c:	40800215 	stw	r2,8(r8)
    41a0:	00073000 	call	7300 <_Bfree>
    41a4:	d8c01617 	ldw	r3,88(sp)
    41a8:	18001015 	stw	zero,64(r3)
    41ac:	8800a316 	blt	r17,zero,443c <_dtoa_r+0x304>
    41b0:	90000015 	stw	zero,0(r18)
    41b4:	a8dffc2c 	andhi	r3,r21,32752
    41b8:	009ffc34 	movhi	r2,32752
    41bc:	18809126 	beq	r3,r2,4404 <_dtoa_r+0x2cc>
    41c0:	000d883a 	mov	r6,zero
    41c4:	000f883a 	mov	r7,zero
    41c8:	a009883a 	mov	r4,r20
    41cc:	a80b883a 	mov	r5,r21
    41d0:	dd001215 	stw	r20,72(sp)
    41d4:	dd401315 	stw	r21,76(sp)
    41d8:	000a9840 	call	a984 <__nedf2>
    41dc:	1000171e 	bne	r2,zero,423c <_dtoa_r+0x104>
    41e0:	d9802717 	ldw	r6,156(sp)
    41e4:	00800044 	movi	r2,1
    41e8:	30800015 	stw	r2,0(r6)
    41ec:	d8802917 	ldw	r2,164(sp)
    41f0:	10029b26 	beq	r2,zero,4c60 <_dtoa_r+0xb28>
    41f4:	d9002917 	ldw	r4,164(sp)
    41f8:	00800074 	movhi	r2,1
    41fc:	10b89244 	addi	r2,r2,-7607
    4200:	10ffffc4 	addi	r3,r2,-1
    4204:	20800015 	stw	r2,0(r4)
    4208:	1805883a 	mov	r2,r3
    420c:	dfc02517 	ldw	ra,148(sp)
    4210:	df002417 	ldw	fp,144(sp)
    4214:	ddc02317 	ldw	r23,140(sp)
    4218:	dd802217 	ldw	r22,136(sp)
    421c:	dd402117 	ldw	r21,132(sp)
    4220:	dd002017 	ldw	r20,128(sp)
    4224:	dcc01f17 	ldw	r19,124(sp)
    4228:	dc801e17 	ldw	r18,120(sp)
    422c:	dc401d17 	ldw	r17,116(sp)
    4230:	dc001c17 	ldw	r16,112(sp)
    4234:	dec02604 	addi	sp,sp,152
    4238:	f800283a 	ret
    423c:	d9001617 	ldw	r4,88(sp)
    4240:	d9401217 	ldw	r5,72(sp)
    4244:	d8800104 	addi	r2,sp,4
    4248:	a80d883a 	mov	r6,r21
    424c:	d9c00204 	addi	r7,sp,8
    4250:	d8800015 	stw	r2,0(sp)
    4254:	000793c0 	call	793c <__d2b>
    4258:	d8800715 	stw	r2,28(sp)
    425c:	a804d53a 	srli	r2,r21,20
    4260:	1101ffcc 	andi	r4,r2,2047
    4264:	20008626 	beq	r4,zero,4480 <_dtoa_r+0x348>
    4268:	d8c01217 	ldw	r3,72(sp)
    426c:	00800434 	movhi	r2,16
    4270:	10bfffc4 	addi	r2,r2,-1
    4274:	ddc00117 	ldw	r23,4(sp)
    4278:	a884703a 	and	r2,r21,r2
    427c:	1811883a 	mov	r8,r3
    4280:	124ffc34 	orhi	r9,r2,16368
    4284:	25bf0044 	addi	r22,r4,-1023
    4288:	d8000815 	stw	zero,32(sp)
    428c:	0005883a 	mov	r2,zero
    4290:	00cffe34 	movhi	r3,16376
    4294:	480b883a 	mov	r5,r9
    4298:	4009883a 	mov	r4,r8
    429c:	180f883a 	mov	r7,r3
    42a0:	100d883a 	mov	r6,r2
    42a4:	000a1ec0 	call	a1ec <__subdf3>
    42a8:	0218dbf4 	movhi	r8,25455
    42ac:	4210d844 	addi	r8,r8,17249
    42b0:	024ff4f4 	movhi	r9,16339
    42b4:	4a61e9c4 	addi	r9,r9,-30809
    42b8:	480f883a 	mov	r7,r9
    42bc:	400d883a 	mov	r6,r8
    42c0:	180b883a 	mov	r5,r3
    42c4:	1009883a 	mov	r4,r2
    42c8:	000a2e00 	call	a2e0 <__muldf3>
    42cc:	0222d874 	movhi	r8,35681
    42d0:	42322cc4 	addi	r8,r8,-14157
    42d4:	024ff1f4 	movhi	r9,16327
    42d8:	4a628a04 	addi	r9,r9,-30168
    42dc:	480f883a 	mov	r7,r9
    42e0:	400d883a 	mov	r6,r8
    42e4:	180b883a 	mov	r5,r3
    42e8:	1009883a 	mov	r4,r2
    42ec:	000a26c0 	call	a26c <__adddf3>
    42f0:	b009883a 	mov	r4,r22
    42f4:	1021883a 	mov	r16,r2
    42f8:	1823883a 	mov	r17,r3
    42fc:	000aba40 	call	aba4 <__floatsidf>
    4300:	021427f4 	movhi	r8,20639
    4304:	421e7ec4 	addi	r8,r8,31227
    4308:	024ff4f4 	movhi	r9,16339
    430c:	4a5104c4 	addi	r9,r9,17427
    4310:	480f883a 	mov	r7,r9
    4314:	400d883a 	mov	r6,r8
    4318:	180b883a 	mov	r5,r3
    431c:	1009883a 	mov	r4,r2
    4320:	000a2e00 	call	a2e0 <__muldf3>
    4324:	180f883a 	mov	r7,r3
    4328:	880b883a 	mov	r5,r17
    432c:	100d883a 	mov	r6,r2
    4330:	8009883a 	mov	r4,r16
    4334:	000a26c0 	call	a26c <__adddf3>
    4338:	1009883a 	mov	r4,r2
    433c:	180b883a 	mov	r5,r3
    4340:	1021883a 	mov	r16,r2
    4344:	1823883a 	mov	r17,r3
    4348:	000ac9c0 	call	ac9c <__fixdfsi>
    434c:	000d883a 	mov	r6,zero
    4350:	000f883a 	mov	r7,zero
    4354:	8009883a 	mov	r4,r16
    4358:	880b883a 	mov	r5,r17
    435c:	d8800d15 	stw	r2,52(sp)
    4360:	000ab1c0 	call	ab1c <__ltdf2>
    4364:	10031716 	blt	r2,zero,4fc4 <_dtoa_r+0xe8c>
    4368:	d8c00d17 	ldw	r3,52(sp)
    436c:	00800584 	movi	r2,22
    4370:	10c1482e 	bgeu	r2,r3,4894 <_dtoa_r+0x75c>
    4374:	01000044 	movi	r4,1
    4378:	d9000c15 	stw	r4,48(sp)
    437c:	bd85c83a 	sub	r2,r23,r22
    4380:	11bfffc4 	addi	r6,r2,-1
    4384:	30030b16 	blt	r6,zero,4fb4 <_dtoa_r+0xe7c>
    4388:	d9800a15 	stw	r6,40(sp)
    438c:	d8001115 	stw	zero,68(sp)
    4390:	d8c00d17 	ldw	r3,52(sp)
    4394:	1802ff16 	blt	r3,zero,4f94 <_dtoa_r+0xe5c>
    4398:	d9000a17 	ldw	r4,40(sp)
    439c:	d8c00915 	stw	r3,36(sp)
    43a0:	d8001015 	stw	zero,64(sp)
    43a4:	20c9883a 	add	r4,r4,r3
    43a8:	d9000a15 	stw	r4,40(sp)
    43ac:	d9001717 	ldw	r4,92(sp)
    43b0:	00800244 	movi	r2,9
    43b4:	11004636 	bltu	r2,r4,44d0 <_dtoa_r+0x398>
    43b8:	00800144 	movi	r2,5
    43bc:	11020416 	blt	r2,r4,4bd0 <_dtoa_r+0xa98>
    43c0:	04400044 	movi	r17,1
    43c4:	d8c01717 	ldw	r3,92(sp)
    43c8:	00800144 	movi	r2,5
    43cc:	10c1ed36 	bltu	r2,r3,4b84 <_dtoa_r+0xa4c>
    43d0:	18c5883a 	add	r2,r3,r3
    43d4:	1085883a 	add	r2,r2,r2
    43d8:	00c00034 	movhi	r3,0
    43dc:	18d0fb04 	addi	r3,r3,17388
    43e0:	10c5883a 	add	r2,r2,r3
    43e4:	11000017 	ldw	r4,0(r2)
    43e8:	2000683a 	jmp	r4
    43ec:	000044d8 	cmpnei	zero,zero,275
    43f0:	000044d8 	cmpnei	zero,zero,275
    43f4:	00004ed8 	cmpnei	zero,zero,315
    43f8:	00004eb0 	cmpltui	zero,zero,314
    43fc:	00004ef4 	movhi	zero,315
    4400:	00004f00 	call	4f0 <isp_awb_handler+0x3c>
    4404:	d9002717 	ldw	r4,156(sp)
    4408:	0089c3c4 	movi	r2,9999
    440c:	20800015 	stw	r2,0(r4)
    4410:	a0001026 	beq	r20,zero,4454 <_dtoa_r+0x31c>
    4414:	00c00074 	movhi	r3,1
    4418:	18f89e04 	addi	r3,r3,-7560
    441c:	d9802917 	ldw	r6,164(sp)
    4420:	303f7926 	beq	r6,zero,4208 <_dtoa_r+0xd0>
    4424:	188000c7 	ldb	r2,3(r3)
    4428:	190000c4 	addi	r4,r3,3
    442c:	1000101e 	bne	r2,zero,4470 <_dtoa_r+0x338>
    4430:	d8802917 	ldw	r2,164(sp)
    4434:	11000015 	stw	r4,0(r2)
    4438:	003f7306 	br	4208 <_dtoa_r+0xd0>
    443c:	00a00034 	movhi	r2,32768
    4440:	10bfffc4 	addi	r2,r2,-1
    4444:	00c00044 	movi	r3,1
    4448:	88aa703a 	and	r21,r17,r2
    444c:	90c00015 	stw	r3,0(r18)
    4450:	003f5806 	br	41b4 <_dtoa_r+0x7c>
    4454:	00800434 	movhi	r2,16
    4458:	10bfffc4 	addi	r2,r2,-1
    445c:	a884703a 	and	r2,r21,r2
    4460:	103fec1e 	bne	r2,zero,4414 <_dtoa_r+0x2dc>
    4464:	00c00074 	movhi	r3,1
    4468:	18f89b04 	addi	r3,r3,-7572
    446c:	003feb06 	br	441c <_dtoa_r+0x2e4>
    4470:	d8802917 	ldw	r2,164(sp)
    4474:	19000204 	addi	r4,r3,8
    4478:	11000015 	stw	r4,0(r2)
    447c:	003f6206 	br	4208 <_dtoa_r+0xd0>
    4480:	ddc00117 	ldw	r23,4(sp)
    4484:	d8800217 	ldw	r2,8(sp)
    4488:	01000804 	movi	r4,32
    448c:	b8c10c84 	addi	r3,r23,1074
    4490:	18a3883a 	add	r17,r3,r2
    4494:	2441b80e 	bge	r4,r17,4b78 <_dtoa_r+0xa40>
    4498:	00c01004 	movi	r3,64
    449c:	1c47c83a 	sub	r3,r3,r17
    44a0:	88bff804 	addi	r2,r17,-32
    44a4:	a8c6983a 	sll	r3,r21,r3
    44a8:	a084d83a 	srl	r2,r20,r2
    44ac:	1888b03a 	or	r4,r3,r2
    44b0:	000ad740 	call	ad74 <__floatunsidf>
    44b4:	1011883a 	mov	r8,r2
    44b8:	00bf8434 	movhi	r2,65040
    44bc:	01000044 	movi	r4,1
    44c0:	10d3883a 	add	r9,r2,r3
    44c4:	8dbef344 	addi	r22,r17,-1075
    44c8:	d9000815 	stw	r4,32(sp)
    44cc:	003f6f06 	br	428c <_dtoa_r+0x154>
    44d0:	d8001715 	stw	zero,92(sp)
    44d4:	04400044 	movi	r17,1
    44d8:	00bfffc4 	movi	r2,-1
    44dc:	00c00044 	movi	r3,1
    44e0:	d8800e15 	stw	r2,56(sp)
    44e4:	d8002615 	stw	zero,152(sp)
    44e8:	d8800f15 	stw	r2,60(sp)
    44ec:	d8c00b15 	stw	r3,44(sp)
    44f0:	1021883a 	mov	r16,r2
    44f4:	d8801617 	ldw	r2,88(sp)
    44f8:	10001115 	stw	zero,68(r2)
    44fc:	d8801617 	ldw	r2,88(sp)
    4500:	11401117 	ldw	r5,68(r2)
    4504:	1009883a 	mov	r4,r2
    4508:	00078800 	call	7880 <_Balloc>
    450c:	d8c01617 	ldw	r3,88(sp)
    4510:	d8800515 	stw	r2,20(sp)
    4514:	18801015 	stw	r2,64(r3)
    4518:	00800384 	movi	r2,14
    451c:	14006836 	bltu	r2,r16,46c0 <_dtoa_r+0x588>
    4520:	8805003a 	cmpeq	r2,r17,zero
    4524:	1000661e 	bne	r2,zero,46c0 <_dtoa_r+0x588>
    4528:	d9000d17 	ldw	r4,52(sp)
    452c:	0102300e 	bge	zero,r4,4df0 <_dtoa_r+0xcb8>
    4530:	208003cc 	andi	r2,r4,15
    4534:	100490fa 	slli	r2,r2,3
    4538:	2025d13a 	srai	r18,r4,4
    453c:	00c00074 	movhi	r3,1
    4540:	18f8b004 	addi	r3,r3,-7488
    4544:	10c5883a 	add	r2,r2,r3
    4548:	90c0040c 	andi	r3,r18,16
    454c:	14000017 	ldw	r16,0(r2)
    4550:	14400117 	ldw	r17,4(r2)
    4554:	18036a1e 	bne	r3,zero,5300 <_dtoa_r+0x11c8>
    4558:	05800084 	movi	r22,2
    455c:	90001026 	beq	r18,zero,45a0 <_dtoa_r+0x468>
    4560:	04c00074 	movhi	r19,1
    4564:	9cf8e204 	addi	r19,r19,-7288
    4568:	9080004c 	andi	r2,r18,1
    456c:	1005003a 	cmpeq	r2,r2,zero
    4570:	1000081e 	bne	r2,zero,4594 <_dtoa_r+0x45c>
    4574:	99800017 	ldw	r6,0(r19)
    4578:	99c00117 	ldw	r7,4(r19)
    457c:	880b883a 	mov	r5,r17
    4580:	8009883a 	mov	r4,r16
    4584:	000a2e00 	call	a2e0 <__muldf3>
    4588:	1021883a 	mov	r16,r2
    458c:	b5800044 	addi	r22,r22,1
    4590:	1823883a 	mov	r17,r3
    4594:	9025d07a 	srai	r18,r18,1
    4598:	9cc00204 	addi	r19,r19,8
    459c:	903ff21e 	bne	r18,zero,4568 <_dtoa_r+0x430>
    45a0:	a80b883a 	mov	r5,r21
    45a4:	a009883a 	mov	r4,r20
    45a8:	880f883a 	mov	r7,r17
    45ac:	800d883a 	mov	r6,r16
    45b0:	000a6a40 	call	a6a4 <__divdf3>
    45b4:	1029883a 	mov	r20,r2
    45b8:	182b883a 	mov	r21,r3
    45bc:	d8c00c17 	ldw	r3,48(sp)
    45c0:	1805003a 	cmpeq	r2,r3,zero
    45c4:	1000081e 	bne	r2,zero,45e8 <_dtoa_r+0x4b0>
    45c8:	0005883a 	mov	r2,zero
    45cc:	00cffc34 	movhi	r3,16368
    45d0:	180f883a 	mov	r7,r3
    45d4:	a009883a 	mov	r4,r20
    45d8:	a80b883a 	mov	r5,r21
    45dc:	100d883a 	mov	r6,r2
    45e0:	000ab1c0 	call	ab1c <__ltdf2>
    45e4:	1003fe16 	blt	r2,zero,55e0 <_dtoa_r+0x14a8>
    45e8:	b009883a 	mov	r4,r22
    45ec:	000aba40 	call	aba4 <__floatsidf>
    45f0:	180b883a 	mov	r5,r3
    45f4:	1009883a 	mov	r4,r2
    45f8:	a00d883a 	mov	r6,r20
    45fc:	a80f883a 	mov	r7,r21
    4600:	000a2e00 	call	a2e0 <__muldf3>
    4604:	0011883a 	mov	r8,zero
    4608:	02500734 	movhi	r9,16412
    460c:	1009883a 	mov	r4,r2
    4610:	180b883a 	mov	r5,r3
    4614:	480f883a 	mov	r7,r9
    4618:	400d883a 	mov	r6,r8
    461c:	000a26c0 	call	a26c <__adddf3>
    4620:	d9000f17 	ldw	r4,60(sp)
    4624:	102d883a 	mov	r22,r2
    4628:	00bf3034 	movhi	r2,64704
    462c:	18b9883a 	add	fp,r3,r2
    4630:	e02f883a 	mov	r23,fp
    4634:	20028f1e 	bne	r4,zero,5074 <_dtoa_r+0xf3c>
    4638:	0005883a 	mov	r2,zero
    463c:	00d00534 	movhi	r3,16404
    4640:	a009883a 	mov	r4,r20
    4644:	a80b883a 	mov	r5,r21
    4648:	180f883a 	mov	r7,r3
    464c:	100d883a 	mov	r6,r2
    4650:	000a1ec0 	call	a1ec <__subdf3>
    4654:	1009883a 	mov	r4,r2
    4658:	e00f883a 	mov	r7,fp
    465c:	180b883a 	mov	r5,r3
    4660:	b00d883a 	mov	r6,r22
    4664:	1025883a 	mov	r18,r2
    4668:	1827883a 	mov	r19,r3
    466c:	000aa0c0 	call	aa0c <__gtdf2>
    4670:	00834f16 	blt	zero,r2,53b0 <_dtoa_r+0x1278>
    4674:	e0e0003c 	xorhi	r3,fp,32768
    4678:	9009883a 	mov	r4,r18
    467c:	980b883a 	mov	r5,r19
    4680:	180f883a 	mov	r7,r3
    4684:	b00d883a 	mov	r6,r22
    4688:	000ab1c0 	call	ab1c <__ltdf2>
    468c:	1000080e 	bge	r2,zero,46b0 <_dtoa_r+0x578>
    4690:	0027883a 	mov	r19,zero
    4694:	0025883a 	mov	r18,zero
    4698:	d8802617 	ldw	r2,152(sp)
    469c:	df000517 	ldw	fp,20(sp)
    46a0:	d8000615 	stw	zero,24(sp)
    46a4:	0084303a 	nor	r2,zero,r2
    46a8:	d8800d15 	stw	r2,52(sp)
    46ac:	00019b06 	br	4d1c <_dtoa_r+0xbe4>
    46b0:	d9801217 	ldw	r6,72(sp)
    46b4:	d8801317 	ldw	r2,76(sp)
    46b8:	3029883a 	mov	r20,r6
    46bc:	102b883a 	mov	r21,r2
    46c0:	d8c00217 	ldw	r3,8(sp)
    46c4:	18008516 	blt	r3,zero,48dc <_dtoa_r+0x7a4>
    46c8:	d9000d17 	ldw	r4,52(sp)
    46cc:	00800384 	movi	r2,14
    46d0:	11008216 	blt	r2,r4,48dc <_dtoa_r+0x7a4>
    46d4:	200490fa 	slli	r2,r4,3
    46d8:	d9802617 	ldw	r6,152(sp)
    46dc:	00c00074 	movhi	r3,1
    46e0:	18f8b004 	addi	r3,r3,-7488
    46e4:	10c5883a 	add	r2,r2,r3
    46e8:	14800017 	ldw	r18,0(r2)
    46ec:	14c00117 	ldw	r19,4(r2)
    46f0:	30031e16 	blt	r6,zero,536c <_dtoa_r+0x1234>
    46f4:	d9000517 	ldw	r4,20(sp)
    46f8:	d8c00f17 	ldw	r3,60(sp)
    46fc:	a823883a 	mov	r17,r21
    4700:	a021883a 	mov	r16,r20
    4704:	192b883a 	add	r21,r3,r4
    4708:	2039883a 	mov	fp,r4
    470c:	00000f06 	br	474c <_dtoa_r+0x614>
    4710:	0005883a 	mov	r2,zero
    4714:	00d00934 	movhi	r3,16420
    4718:	5009883a 	mov	r4,r10
    471c:	580b883a 	mov	r5,r11
    4720:	180f883a 	mov	r7,r3
    4724:	100d883a 	mov	r6,r2
    4728:	000a2e00 	call	a2e0 <__muldf3>
    472c:	180b883a 	mov	r5,r3
    4730:	000d883a 	mov	r6,zero
    4734:	000f883a 	mov	r7,zero
    4738:	1009883a 	mov	r4,r2
    473c:	1021883a 	mov	r16,r2
    4740:	1823883a 	mov	r17,r3
    4744:	000a9840 	call	a984 <__nedf2>
    4748:	10004526 	beq	r2,zero,4860 <_dtoa_r+0x728>
    474c:	900d883a 	mov	r6,r18
    4750:	980f883a 	mov	r7,r19
    4754:	8009883a 	mov	r4,r16
    4758:	880b883a 	mov	r5,r17
    475c:	000a6a40 	call	a6a4 <__divdf3>
    4760:	180b883a 	mov	r5,r3
    4764:	1009883a 	mov	r4,r2
    4768:	000ac9c0 	call	ac9c <__fixdfsi>
    476c:	1009883a 	mov	r4,r2
    4770:	1029883a 	mov	r20,r2
    4774:	000aba40 	call	aba4 <__floatsidf>
    4778:	180f883a 	mov	r7,r3
    477c:	9009883a 	mov	r4,r18
    4780:	980b883a 	mov	r5,r19
    4784:	100d883a 	mov	r6,r2
    4788:	000a2e00 	call	a2e0 <__muldf3>
    478c:	180f883a 	mov	r7,r3
    4790:	880b883a 	mov	r5,r17
    4794:	8009883a 	mov	r4,r16
    4798:	100d883a 	mov	r6,r2
    479c:	000a1ec0 	call	a1ec <__subdf3>
    47a0:	1015883a 	mov	r10,r2
    47a4:	a0800c04 	addi	r2,r20,48
    47a8:	e0800005 	stb	r2,0(fp)
    47ac:	e7000044 	addi	fp,fp,1
    47b0:	1817883a 	mov	r11,r3
    47b4:	e57fd61e 	bne	fp,r21,4710 <_dtoa_r+0x5d8>
    47b8:	500d883a 	mov	r6,r10
    47bc:	180f883a 	mov	r7,r3
    47c0:	5009883a 	mov	r4,r10
    47c4:	180b883a 	mov	r5,r3
    47c8:	000a26c0 	call	a26c <__adddf3>
    47cc:	100d883a 	mov	r6,r2
    47d0:	9009883a 	mov	r4,r18
    47d4:	980b883a 	mov	r5,r19
    47d8:	180f883a 	mov	r7,r3
    47dc:	1021883a 	mov	r16,r2
    47e0:	1823883a 	mov	r17,r3
    47e4:	000ab1c0 	call	ab1c <__ltdf2>
    47e8:	10000816 	blt	r2,zero,480c <_dtoa_r+0x6d4>
    47ec:	980b883a 	mov	r5,r19
    47f0:	800d883a 	mov	r6,r16
    47f4:	880f883a 	mov	r7,r17
    47f8:	9009883a 	mov	r4,r18
    47fc:	000a8fc0 	call	a8fc <__eqdf2>
    4800:	1000171e 	bne	r2,zero,4860 <_dtoa_r+0x728>
    4804:	a080004c 	andi	r2,r20,1
    4808:	10001526 	beq	r2,zero,4860 <_dtoa_r+0x728>
    480c:	d8800d17 	ldw	r2,52(sp)
    4810:	d8800415 	stw	r2,16(sp)
    4814:	e009883a 	mov	r4,fp
    4818:	213fffc4 	addi	r4,r4,-1
    481c:	20c00007 	ldb	r3,0(r4)
    4820:	00800e44 	movi	r2,57
    4824:	1880081e 	bne	r3,r2,4848 <_dtoa_r+0x710>
    4828:	d8800517 	ldw	r2,20(sp)
    482c:	113ffa1e 	bne	r2,r4,4818 <_dtoa_r+0x6e0>
    4830:	d8c00417 	ldw	r3,16(sp)
    4834:	d9800517 	ldw	r6,20(sp)
    4838:	00800c04 	movi	r2,48
    483c:	18c00044 	addi	r3,r3,1
    4840:	d8c00415 	stw	r3,16(sp)
    4844:	30800005 	stb	r2,0(r6)
    4848:	20800003 	ldbu	r2,0(r4)
    484c:	d8c00417 	ldw	r3,16(sp)
    4850:	27000044 	addi	fp,r4,1
    4854:	10800044 	addi	r2,r2,1
    4858:	d8c00d15 	stw	r3,52(sp)
    485c:	20800005 	stb	r2,0(r4)
    4860:	d9001617 	ldw	r4,88(sp)
    4864:	d9400717 	ldw	r5,28(sp)
    4868:	00073000 	call	7300 <_Bfree>
    486c:	e0000005 	stb	zero,0(fp)
    4870:	d9800d17 	ldw	r6,52(sp)
    4874:	d8c02717 	ldw	r3,156(sp)
    4878:	d9002917 	ldw	r4,164(sp)
    487c:	30800044 	addi	r2,r6,1
    4880:	18800015 	stw	r2,0(r3)
    4884:	20029c26 	beq	r4,zero,52f8 <_dtoa_r+0x11c0>
    4888:	d8c00517 	ldw	r3,20(sp)
    488c:	27000015 	stw	fp,0(r4)
    4890:	003e5d06 	br	4208 <_dtoa_r+0xd0>
    4894:	d9800d17 	ldw	r6,52(sp)
    4898:	00c00074 	movhi	r3,1
    489c:	18f8b004 	addi	r3,r3,-7488
    48a0:	d9001217 	ldw	r4,72(sp)
    48a4:	300490fa 	slli	r2,r6,3
    48a8:	d9401317 	ldw	r5,76(sp)
    48ac:	10c5883a 	add	r2,r2,r3
    48b0:	12000017 	ldw	r8,0(r2)
    48b4:	12400117 	ldw	r9,4(r2)
    48b8:	400d883a 	mov	r6,r8
    48bc:	480f883a 	mov	r7,r9
    48c0:	000ab1c0 	call	ab1c <__ltdf2>
    48c4:	1000030e 	bge	r2,zero,48d4 <_dtoa_r+0x79c>
    48c8:	d8800d17 	ldw	r2,52(sp)
    48cc:	10bfffc4 	addi	r2,r2,-1
    48d0:	d8800d15 	stw	r2,52(sp)
    48d4:	d8000c15 	stw	zero,48(sp)
    48d8:	003ea806 	br	437c <_dtoa_r+0x244>
    48dc:	d9000b17 	ldw	r4,44(sp)
    48e0:	202cc03a 	cmpne	r22,r4,zero
    48e4:	b000c71e 	bne	r22,zero,4c04 <_dtoa_r+0xacc>
    48e8:	dc001117 	ldw	r16,68(sp)
    48ec:	dc801017 	ldw	r18,64(sp)
    48f0:	0027883a 	mov	r19,zero
    48f4:	04000b0e 	bge	zero,r16,4924 <_dtoa_r+0x7ec>
    48f8:	d8c00a17 	ldw	r3,40(sp)
    48fc:	00c0090e 	bge	zero,r3,4924 <_dtoa_r+0x7ec>
    4900:	8005883a 	mov	r2,r16
    4904:	1c011316 	blt	r3,r16,4d54 <_dtoa_r+0xc1c>
    4908:	d9000a17 	ldw	r4,40(sp)
    490c:	d9801117 	ldw	r6,68(sp)
    4910:	80a1c83a 	sub	r16,r16,r2
    4914:	2089c83a 	sub	r4,r4,r2
    4918:	308dc83a 	sub	r6,r6,r2
    491c:	d9000a15 	stw	r4,40(sp)
    4920:	d9801115 	stw	r6,68(sp)
    4924:	d8801017 	ldw	r2,64(sp)
    4928:	0080150e 	bge	zero,r2,4980 <_dtoa_r+0x848>
    492c:	d8c00b17 	ldw	r3,44(sp)
    4930:	1805003a 	cmpeq	r2,r3,zero
    4934:	1001c91e 	bne	r2,zero,505c <_dtoa_r+0xf24>
    4938:	04800e0e 	bge	zero,r18,4974 <_dtoa_r+0x83c>
    493c:	d9001617 	ldw	r4,88(sp)
    4940:	980b883a 	mov	r5,r19
    4944:	900d883a 	mov	r6,r18
    4948:	000814c0 	call	814c <__pow5mult>
    494c:	d9001617 	ldw	r4,88(sp)
    4950:	d9800717 	ldw	r6,28(sp)
    4954:	100b883a 	mov	r5,r2
    4958:	1027883a 	mov	r19,r2
    495c:	0007d900 	call	7d90 <__multiply>
    4960:	d9001617 	ldw	r4,88(sp)
    4964:	d9400717 	ldw	r5,28(sp)
    4968:	1023883a 	mov	r17,r2
    496c:	00073000 	call	7300 <_Bfree>
    4970:	dc400715 	stw	r17,28(sp)
    4974:	d9001017 	ldw	r4,64(sp)
    4978:	248dc83a 	sub	r6,r4,r18
    497c:	30010e1e 	bne	r6,zero,4db8 <_dtoa_r+0xc80>
    4980:	d9001617 	ldw	r4,88(sp)
    4984:	04400044 	movi	r17,1
    4988:	880b883a 	mov	r5,r17
    498c:	0007fe40 	call	7fe4 <__i2b>
    4990:	d9800917 	ldw	r6,36(sp)
    4994:	1025883a 	mov	r18,r2
    4998:	0180040e 	bge	zero,r6,49ac <_dtoa_r+0x874>
    499c:	d9001617 	ldw	r4,88(sp)
    49a0:	100b883a 	mov	r5,r2
    49a4:	000814c0 	call	814c <__pow5mult>
    49a8:	1025883a 	mov	r18,r2
    49ac:	d8801717 	ldw	r2,92(sp)
    49b0:	8880f30e 	bge	r17,r2,4d80 <_dtoa_r+0xc48>
    49b4:	0023883a 	mov	r17,zero
    49b8:	d9800917 	ldw	r6,36(sp)
    49bc:	30019e1e 	bne	r6,zero,5038 <_dtoa_r+0xf00>
    49c0:	00c00044 	movi	r3,1
    49c4:	d9000a17 	ldw	r4,40(sp)
    49c8:	20c5883a 	add	r2,r4,r3
    49cc:	10c007cc 	andi	r3,r2,31
    49d0:	1800841e 	bne	r3,zero,4be4 <_dtoa_r+0xaac>
    49d4:	00800704 	movi	r2,28
    49d8:	d9000a17 	ldw	r4,40(sp)
    49dc:	d9801117 	ldw	r6,68(sp)
    49e0:	80a1883a 	add	r16,r16,r2
    49e4:	2089883a 	add	r4,r4,r2
    49e8:	308d883a 	add	r6,r6,r2
    49ec:	d9000a15 	stw	r4,40(sp)
    49f0:	d9801115 	stw	r6,68(sp)
    49f4:	d8801117 	ldw	r2,68(sp)
    49f8:	0080050e 	bge	zero,r2,4a10 <_dtoa_r+0x8d8>
    49fc:	d9400717 	ldw	r5,28(sp)
    4a00:	d9001617 	ldw	r4,88(sp)
    4a04:	100d883a 	mov	r6,r2
    4a08:	0007c440 	call	7c44 <__lshift>
    4a0c:	d8800715 	stw	r2,28(sp)
    4a10:	d8c00a17 	ldw	r3,40(sp)
    4a14:	00c0050e 	bge	zero,r3,4a2c <_dtoa_r+0x8f4>
    4a18:	d9001617 	ldw	r4,88(sp)
    4a1c:	900b883a 	mov	r5,r18
    4a20:	180d883a 	mov	r6,r3
    4a24:	0007c440 	call	7c44 <__lshift>
    4a28:	1025883a 	mov	r18,r2
    4a2c:	d9000c17 	ldw	r4,48(sp)
    4a30:	2005003a 	cmpeq	r2,r4,zero
    4a34:	10016f26 	beq	r2,zero,4ff4 <_dtoa_r+0xebc>
    4a38:	d9000f17 	ldw	r4,60(sp)
    4a3c:	0102170e 	bge	zero,r4,529c <_dtoa_r+0x1164>
    4a40:	d9800b17 	ldw	r6,44(sp)
    4a44:	3005003a 	cmpeq	r2,r6,zero
    4a48:	1000881e 	bne	r2,zero,4c6c <_dtoa_r+0xb34>
    4a4c:	0400050e 	bge	zero,r16,4a64 <_dtoa_r+0x92c>
    4a50:	d9001617 	ldw	r4,88(sp)
    4a54:	980b883a 	mov	r5,r19
    4a58:	800d883a 	mov	r6,r16
    4a5c:	0007c440 	call	7c44 <__lshift>
    4a60:	1027883a 	mov	r19,r2
    4a64:	8804c03a 	cmpne	r2,r17,zero
    4a68:	1002541e 	bne	r2,zero,53bc <_dtoa_r+0x1284>
    4a6c:	980b883a 	mov	r5,r19
    4a70:	dd800517 	ldw	r22,20(sp)
    4a74:	dcc00615 	stw	r19,24(sp)
    4a78:	a700004c 	andi	fp,r20,1
    4a7c:	2827883a 	mov	r19,r5
    4a80:	d9000717 	ldw	r4,28(sp)
    4a84:	900b883a 	mov	r5,r18
    4a88:	0003ef40 	call	3ef4 <quorem>
    4a8c:	d9000717 	ldw	r4,28(sp)
    4a90:	d9400617 	ldw	r5,24(sp)
    4a94:	1023883a 	mov	r17,r2
    4a98:	8dc00c04 	addi	r23,r17,48
    4a9c:	000745c0 	call	745c <__mcmp>
    4aa0:	d9001617 	ldw	r4,88(sp)
    4aa4:	900b883a 	mov	r5,r18
    4aa8:	980d883a 	mov	r6,r19
    4aac:	1029883a 	mov	r20,r2
    4ab0:	0007ab80 	call	7ab8 <__mdiff>
    4ab4:	102b883a 	mov	r21,r2
    4ab8:	10800317 	ldw	r2,12(r2)
    4abc:	1001281e 	bne	r2,zero,4f60 <_dtoa_r+0xe28>
    4ac0:	d9000717 	ldw	r4,28(sp)
    4ac4:	a80b883a 	mov	r5,r21
    4ac8:	000745c0 	call	745c <__mcmp>
    4acc:	d9001617 	ldw	r4,88(sp)
    4ad0:	1021883a 	mov	r16,r2
    4ad4:	a80b883a 	mov	r5,r21
    4ad8:	00073000 	call	7300 <_Bfree>
    4adc:	8000041e 	bne	r16,zero,4af0 <_dtoa_r+0x9b8>
    4ae0:	d8801717 	ldw	r2,92(sp)
    4ae4:	1000021e 	bne	r2,zero,4af0 <_dtoa_r+0x9b8>
    4ae8:	e004c03a 	cmpne	r2,fp,zero
    4aec:	10011726 	beq	r2,zero,4f4c <_dtoa_r+0xe14>
    4af0:	a0010616 	blt	r20,zero,4f0c <_dtoa_r+0xdd4>
    4af4:	a000041e 	bne	r20,zero,4b08 <_dtoa_r+0x9d0>
    4af8:	d8c01717 	ldw	r3,92(sp)
    4afc:	1800021e 	bne	r3,zero,4b08 <_dtoa_r+0x9d0>
    4b00:	e004c03a 	cmpne	r2,fp,zero
    4b04:	10010126 	beq	r2,zero,4f0c <_dtoa_r+0xdd4>
    4b08:	04023d16 	blt	zero,r16,5400 <_dtoa_r+0x12c8>
    4b0c:	b5c00005 	stb	r23,0(r22)
    4b10:	d9800517 	ldw	r6,20(sp)
    4b14:	d9000f17 	ldw	r4,60(sp)
    4b18:	b5800044 	addi	r22,r22,1
    4b1c:	3105883a 	add	r2,r6,r4
    4b20:	b0806526 	beq	r22,r2,4cb8 <_dtoa_r+0xb80>
    4b24:	d9400717 	ldw	r5,28(sp)
    4b28:	d9001617 	ldw	r4,88(sp)
    4b2c:	01800284 	movi	r6,10
    4b30:	000f883a 	mov	r7,zero
    4b34:	00080200 	call	8020 <__multadd>
    4b38:	d8800715 	stw	r2,28(sp)
    4b3c:	d8800617 	ldw	r2,24(sp)
    4b40:	14c10c26 	beq	r2,r19,4f74 <_dtoa_r+0xe3c>
    4b44:	d9400617 	ldw	r5,24(sp)
    4b48:	d9001617 	ldw	r4,88(sp)
    4b4c:	01800284 	movi	r6,10
    4b50:	000f883a 	mov	r7,zero
    4b54:	00080200 	call	8020 <__multadd>
    4b58:	d9001617 	ldw	r4,88(sp)
    4b5c:	980b883a 	mov	r5,r19
    4b60:	01800284 	movi	r6,10
    4b64:	000f883a 	mov	r7,zero
    4b68:	d8800615 	stw	r2,24(sp)
    4b6c:	00080200 	call	8020 <__multadd>
    4b70:	1027883a 	mov	r19,r2
    4b74:	003fc206 	br	4a80 <_dtoa_r+0x948>
    4b78:	2445c83a 	sub	r2,r4,r17
    4b7c:	a088983a 	sll	r4,r20,r2
    4b80:	003e4b06 	br	44b0 <_dtoa_r+0x378>
    4b84:	01bfffc4 	movi	r6,-1
    4b88:	00800044 	movi	r2,1
    4b8c:	d9800e15 	stw	r6,56(sp)
    4b90:	d9800f15 	stw	r6,60(sp)
    4b94:	d8800b15 	stw	r2,44(sp)
    4b98:	d8c01617 	ldw	r3,88(sp)
    4b9c:	008005c4 	movi	r2,23
    4ba0:	18001115 	stw	zero,68(r3)
    4ba4:	1580082e 	bgeu	r2,r22,4bc8 <_dtoa_r+0xa90>
    4ba8:	00c00104 	movi	r3,4
    4bac:	0009883a 	mov	r4,zero
    4bb0:	18c7883a 	add	r3,r3,r3
    4bb4:	18800504 	addi	r2,r3,20
    4bb8:	21000044 	addi	r4,r4,1
    4bbc:	b0bffc2e 	bgeu	r22,r2,4bb0 <_dtoa_r+0xa78>
    4bc0:	d9801617 	ldw	r6,88(sp)
    4bc4:	31001115 	stw	r4,68(r6)
    4bc8:	dc000f17 	ldw	r16,60(sp)
    4bcc:	003e4b06 	br	44fc <_dtoa_r+0x3c4>
    4bd0:	d9801717 	ldw	r6,92(sp)
    4bd4:	0023883a 	mov	r17,zero
    4bd8:	31bfff04 	addi	r6,r6,-4
    4bdc:	d9801715 	stw	r6,92(sp)
    4be0:	003df806 	br	43c4 <_dtoa_r+0x28c>
    4be4:	00800804 	movi	r2,32
    4be8:	10c9c83a 	sub	r4,r2,r3
    4bec:	00c00104 	movi	r3,4
    4bf0:	19005a16 	blt	r3,r4,4d5c <_dtoa_r+0xc24>
    4bf4:	008000c4 	movi	r2,3
    4bf8:	113f7e16 	blt	r2,r4,49f4 <_dtoa_r+0x8bc>
    4bfc:	20800704 	addi	r2,r4,28
    4c00:	003f7506 	br	49d8 <_dtoa_r+0x8a0>
    4c04:	d9801717 	ldw	r6,92(sp)
    4c08:	00800044 	movi	r2,1
    4c0c:	1180a10e 	bge	r2,r6,4e94 <_dtoa_r+0xd5c>
    4c10:	d9800f17 	ldw	r6,60(sp)
    4c14:	d8c01017 	ldw	r3,64(sp)
    4c18:	30bfffc4 	addi	r2,r6,-1
    4c1c:	1881c616 	blt	r3,r2,5338 <_dtoa_r+0x1200>
    4c20:	18a5c83a 	sub	r18,r3,r2
    4c24:	d8800f17 	ldw	r2,60(sp)
    4c28:	10026216 	blt	r2,zero,55b4 <_dtoa_r+0x147c>
    4c2c:	dc001117 	ldw	r16,68(sp)
    4c30:	1007883a 	mov	r3,r2
    4c34:	d9800a17 	ldw	r6,40(sp)
    4c38:	d8801117 	ldw	r2,68(sp)
    4c3c:	d9001617 	ldw	r4,88(sp)
    4c40:	30cd883a 	add	r6,r6,r3
    4c44:	10c5883a 	add	r2,r2,r3
    4c48:	01400044 	movi	r5,1
    4c4c:	d9800a15 	stw	r6,40(sp)
    4c50:	d8801115 	stw	r2,68(sp)
    4c54:	0007fe40 	call	7fe4 <__i2b>
    4c58:	1027883a 	mov	r19,r2
    4c5c:	003f2506 	br	48f4 <_dtoa_r+0x7bc>
    4c60:	00c00074 	movhi	r3,1
    4c64:	18f89204 	addi	r3,r3,-7608
    4c68:	003d6706 	br	4208 <_dtoa_r+0xd0>
    4c6c:	dd800517 	ldw	r22,20(sp)
    4c70:	04000044 	movi	r16,1
    4c74:	00000706 	br	4c94 <_dtoa_r+0xb5c>
    4c78:	d9400717 	ldw	r5,28(sp)
    4c7c:	d9001617 	ldw	r4,88(sp)
    4c80:	01800284 	movi	r6,10
    4c84:	000f883a 	mov	r7,zero
    4c88:	00080200 	call	8020 <__multadd>
    4c8c:	d8800715 	stw	r2,28(sp)
    4c90:	84000044 	addi	r16,r16,1
    4c94:	d9000717 	ldw	r4,28(sp)
    4c98:	900b883a 	mov	r5,r18
    4c9c:	0003ef40 	call	3ef4 <quorem>
    4ca0:	15c00c04 	addi	r23,r2,48
    4ca4:	b5c00005 	stb	r23,0(r22)
    4ca8:	d8c00f17 	ldw	r3,60(sp)
    4cac:	b5800044 	addi	r22,r22,1
    4cb0:	80fff116 	blt	r16,r3,4c78 <_dtoa_r+0xb40>
    4cb4:	d8000615 	stw	zero,24(sp)
    4cb8:	d9400717 	ldw	r5,28(sp)
    4cbc:	d9001617 	ldw	r4,88(sp)
    4cc0:	01800044 	movi	r6,1
    4cc4:	0007c440 	call	7c44 <__lshift>
    4cc8:	1009883a 	mov	r4,r2
    4ccc:	900b883a 	mov	r5,r18
    4cd0:	d8800715 	stw	r2,28(sp)
    4cd4:	000745c0 	call	745c <__mcmp>
    4cd8:	00803c0e 	bge	zero,r2,4dcc <_dtoa_r+0xc94>
    4cdc:	b009883a 	mov	r4,r22
    4ce0:	213fffc4 	addi	r4,r4,-1
    4ce4:	21400003 	ldbu	r5,0(r4)
    4ce8:	00800e44 	movi	r2,57
    4cec:	28c03fcc 	andi	r3,r5,255
    4cf0:	18c0201c 	xori	r3,r3,128
    4cf4:	18ffe004 	addi	r3,r3,-128
    4cf8:	1881981e 	bne	r3,r2,535c <_dtoa_r+0x1224>
    4cfc:	d9800517 	ldw	r6,20(sp)
    4d00:	21bff71e 	bne	r4,r6,4ce0 <_dtoa_r+0xba8>
    4d04:	d8800d17 	ldw	r2,52(sp)
    4d08:	37000044 	addi	fp,r6,1
    4d0c:	10800044 	addi	r2,r2,1
    4d10:	d8800d15 	stw	r2,52(sp)
    4d14:	00800c44 	movi	r2,49
    4d18:	30800005 	stb	r2,0(r6)
    4d1c:	d9001617 	ldw	r4,88(sp)
    4d20:	900b883a 	mov	r5,r18
    4d24:	00073000 	call	7300 <_Bfree>
    4d28:	983ecd26 	beq	r19,zero,4860 <_dtoa_r+0x728>
    4d2c:	d8c00617 	ldw	r3,24(sp)
    4d30:	18000426 	beq	r3,zero,4d44 <_dtoa_r+0xc0c>
    4d34:	1cc00326 	beq	r3,r19,4d44 <_dtoa_r+0xc0c>
    4d38:	d9001617 	ldw	r4,88(sp)
    4d3c:	180b883a 	mov	r5,r3
    4d40:	00073000 	call	7300 <_Bfree>
    4d44:	d9001617 	ldw	r4,88(sp)
    4d48:	980b883a 	mov	r5,r19
    4d4c:	00073000 	call	7300 <_Bfree>
    4d50:	003ec306 	br	4860 <_dtoa_r+0x728>
    4d54:	1805883a 	mov	r2,r3
    4d58:	003eeb06 	br	4908 <_dtoa_r+0x7d0>
    4d5c:	d9800a17 	ldw	r6,40(sp)
    4d60:	d8c01117 	ldw	r3,68(sp)
    4d64:	20bfff04 	addi	r2,r4,-4
    4d68:	308d883a 	add	r6,r6,r2
    4d6c:	1887883a 	add	r3,r3,r2
    4d70:	80a1883a 	add	r16,r16,r2
    4d74:	d9800a15 	stw	r6,40(sp)
    4d78:	d8c01115 	stw	r3,68(sp)
    4d7c:	003f1d06 	br	49f4 <_dtoa_r+0x8bc>
    4d80:	a03f0c1e 	bne	r20,zero,49b4 <_dtoa_r+0x87c>
    4d84:	00800434 	movhi	r2,16
    4d88:	10bfffc4 	addi	r2,r2,-1
    4d8c:	a884703a 	and	r2,r21,r2
    4d90:	103f081e 	bne	r2,zero,49b4 <_dtoa_r+0x87c>
    4d94:	a89ffc2c 	andhi	r2,r21,32752
    4d98:	103f0626 	beq	r2,zero,49b4 <_dtoa_r+0x87c>
    4d9c:	d8c01117 	ldw	r3,68(sp)
    4da0:	d9000a17 	ldw	r4,40(sp)
    4da4:	18c00044 	addi	r3,r3,1
    4da8:	21000044 	addi	r4,r4,1
    4dac:	d8c01115 	stw	r3,68(sp)
    4db0:	d9000a15 	stw	r4,40(sp)
    4db4:	003f0006 	br	49b8 <_dtoa_r+0x880>
    4db8:	d9400717 	ldw	r5,28(sp)
    4dbc:	d9001617 	ldw	r4,88(sp)
    4dc0:	000814c0 	call	814c <__pow5mult>
    4dc4:	d8800715 	stw	r2,28(sp)
    4dc8:	003eed06 	br	4980 <_dtoa_r+0x848>
    4dcc:	1000021e 	bne	r2,zero,4dd8 <_dtoa_r+0xca0>
    4dd0:	b880004c 	andi	r2,r23,1
    4dd4:	103fc11e 	bne	r2,zero,4cdc <_dtoa_r+0xba4>
    4dd8:	b5bfffc4 	addi	r22,r22,-1
    4ddc:	b0c00007 	ldb	r3,0(r22)
    4de0:	00800c04 	movi	r2,48
    4de4:	18bffc26 	beq	r3,r2,4dd8 <_dtoa_r+0xca0>
    4de8:	b7000044 	addi	fp,r22,1
    4dec:	003fcb06 	br	4d1c <_dtoa_r+0xbe4>
    4df0:	d9800d17 	ldw	r6,52(sp)
    4df4:	018fc83a 	sub	r7,zero,r6
    4df8:	3801f726 	beq	r7,zero,55d8 <_dtoa_r+0x14a0>
    4dfc:	398003cc 	andi	r6,r7,15
    4e00:	300c90fa 	slli	r6,r6,3
    4e04:	01400074 	movhi	r5,1
    4e08:	2978b004 	addi	r5,r5,-7488
    4e0c:	d9001217 	ldw	r4,72(sp)
    4e10:	314d883a 	add	r6,r6,r5
    4e14:	30c00117 	ldw	r3,4(r6)
    4e18:	30800017 	ldw	r2,0(r6)
    4e1c:	d9401317 	ldw	r5,76(sp)
    4e20:	3821d13a 	srai	r16,r7,4
    4e24:	100d883a 	mov	r6,r2
    4e28:	180f883a 	mov	r7,r3
    4e2c:	000a2e00 	call	a2e0 <__muldf3>
    4e30:	1011883a 	mov	r8,r2
    4e34:	1813883a 	mov	r9,r3
    4e38:	1029883a 	mov	r20,r2
    4e3c:	182b883a 	mov	r21,r3
    4e40:	8001e526 	beq	r16,zero,55d8 <_dtoa_r+0x14a0>
    4e44:	05800084 	movi	r22,2
    4e48:	04400074 	movhi	r17,1
    4e4c:	8c78e204 	addi	r17,r17,-7288
    4e50:	8080004c 	andi	r2,r16,1
    4e54:	1005003a 	cmpeq	r2,r2,zero
    4e58:	1000081e 	bne	r2,zero,4e7c <_dtoa_r+0xd44>
    4e5c:	89800017 	ldw	r6,0(r17)
    4e60:	89c00117 	ldw	r7,4(r17)
    4e64:	480b883a 	mov	r5,r9
    4e68:	4009883a 	mov	r4,r8
    4e6c:	000a2e00 	call	a2e0 <__muldf3>
    4e70:	1011883a 	mov	r8,r2
    4e74:	b5800044 	addi	r22,r22,1
    4e78:	1813883a 	mov	r9,r3
    4e7c:	8021d07a 	srai	r16,r16,1
    4e80:	8c400204 	addi	r17,r17,8
    4e84:	803ff21e 	bne	r16,zero,4e50 <_dtoa_r+0xd18>
    4e88:	4029883a 	mov	r20,r8
    4e8c:	482b883a 	mov	r21,r9
    4e90:	003dca06 	br	45bc <_dtoa_r+0x484>
    4e94:	d9000817 	ldw	r4,32(sp)
    4e98:	2005003a 	cmpeq	r2,r4,zero
    4e9c:	1001f61e 	bne	r2,zero,5678 <_dtoa_r+0x1540>
    4ea0:	dc001117 	ldw	r16,68(sp)
    4ea4:	dc801017 	ldw	r18,64(sp)
    4ea8:	18c10cc4 	addi	r3,r3,1075
    4eac:	003f6106 	br	4c34 <_dtoa_r+0xafc>
    4eb0:	d8000b15 	stw	zero,44(sp)
    4eb4:	d9802617 	ldw	r6,152(sp)
    4eb8:	d8c00d17 	ldw	r3,52(sp)
    4ebc:	30800044 	addi	r2,r6,1
    4ec0:	18ad883a 	add	r22,r3,r2
    4ec4:	b13fffc4 	addi	r4,r22,-1
    4ec8:	d9000e15 	stw	r4,56(sp)
    4ecc:	0581f60e 	bge	zero,r22,56a8 <_dtoa_r+0x1570>
    4ed0:	dd800f15 	stw	r22,60(sp)
    4ed4:	003f3006 	br	4b98 <_dtoa_r+0xa60>
    4ed8:	d8000b15 	stw	zero,44(sp)
    4edc:	d9002617 	ldw	r4,152(sp)
    4ee0:	0101eb0e 	bge	zero,r4,5690 <_dtoa_r+0x1558>
    4ee4:	202d883a 	mov	r22,r4
    4ee8:	d9000e15 	stw	r4,56(sp)
    4eec:	d9000f15 	stw	r4,60(sp)
    4ef0:	003f2906 	br	4b98 <_dtoa_r+0xa60>
    4ef4:	01800044 	movi	r6,1
    4ef8:	d9800b15 	stw	r6,44(sp)
    4efc:	003ff706 	br	4edc <_dtoa_r+0xda4>
    4f00:	01000044 	movi	r4,1
    4f04:	d9000b15 	stw	r4,44(sp)
    4f08:	003fea06 	br	4eb4 <_dtoa_r+0xd7c>
    4f0c:	04000c0e 	bge	zero,r16,4f40 <_dtoa_r+0xe08>
    4f10:	d9400717 	ldw	r5,28(sp)
    4f14:	d9001617 	ldw	r4,88(sp)
    4f18:	01800044 	movi	r6,1
    4f1c:	0007c440 	call	7c44 <__lshift>
    4f20:	1009883a 	mov	r4,r2
    4f24:	900b883a 	mov	r5,r18
    4f28:	d8800715 	stw	r2,28(sp)
    4f2c:	000745c0 	call	745c <__mcmp>
    4f30:	0081e00e 	bge	zero,r2,56b4 <_dtoa_r+0x157c>
    4f34:	bdc00044 	addi	r23,r23,1
    4f38:	00800e84 	movi	r2,58
    4f3c:	b881a226 	beq	r23,r2,55c8 <_dtoa_r+0x1490>
    4f40:	b7000044 	addi	fp,r22,1
    4f44:	b5c00005 	stb	r23,0(r22)
    4f48:	003f7406 	br	4d1c <_dtoa_r+0xbe4>
    4f4c:	00800e44 	movi	r2,57
    4f50:	b8819d26 	beq	r23,r2,55c8 <_dtoa_r+0x1490>
    4f54:	053ffa0e 	bge	zero,r20,4f40 <_dtoa_r+0xe08>
    4f58:	8dc00c44 	addi	r23,r17,49
    4f5c:	003ff806 	br	4f40 <_dtoa_r+0xe08>
    4f60:	d9001617 	ldw	r4,88(sp)
    4f64:	a80b883a 	mov	r5,r21
    4f68:	04000044 	movi	r16,1
    4f6c:	00073000 	call	7300 <_Bfree>
    4f70:	003edf06 	br	4af0 <_dtoa_r+0x9b8>
    4f74:	d9001617 	ldw	r4,88(sp)
    4f78:	980b883a 	mov	r5,r19
    4f7c:	01800284 	movi	r6,10
    4f80:	000f883a 	mov	r7,zero
    4f84:	00080200 	call	8020 <__multadd>
    4f88:	1027883a 	mov	r19,r2
    4f8c:	d8800615 	stw	r2,24(sp)
    4f90:	003ebb06 	br	4a80 <_dtoa_r+0x948>
    4f94:	d9801117 	ldw	r6,68(sp)
    4f98:	d8800d17 	ldw	r2,52(sp)
    4f9c:	d8000915 	stw	zero,36(sp)
    4fa0:	308dc83a 	sub	r6,r6,r2
    4fa4:	0087c83a 	sub	r3,zero,r2
    4fa8:	d9801115 	stw	r6,68(sp)
    4fac:	d8c01015 	stw	r3,64(sp)
    4fb0:	003cfe06 	br	43ac <_dtoa_r+0x274>
    4fb4:	018dc83a 	sub	r6,zero,r6
    4fb8:	d9801115 	stw	r6,68(sp)
    4fbc:	d8000a15 	stw	zero,40(sp)
    4fc0:	003cf306 	br	4390 <_dtoa_r+0x258>
    4fc4:	d9000d17 	ldw	r4,52(sp)
    4fc8:	000aba40 	call	aba4 <__floatsidf>
    4fcc:	880b883a 	mov	r5,r17
    4fd0:	8009883a 	mov	r4,r16
    4fd4:	180f883a 	mov	r7,r3
    4fd8:	100d883a 	mov	r6,r2
    4fdc:	000a9840 	call	a984 <__nedf2>
    4fe0:	103ce126 	beq	r2,zero,4368 <_dtoa_r+0x230>
    4fe4:	d9800d17 	ldw	r6,52(sp)
    4fe8:	31bfffc4 	addi	r6,r6,-1
    4fec:	d9800d15 	stw	r6,52(sp)
    4ff0:	003cdd06 	br	4368 <_dtoa_r+0x230>
    4ff4:	d9000717 	ldw	r4,28(sp)
    4ff8:	900b883a 	mov	r5,r18
    4ffc:	000745c0 	call	745c <__mcmp>
    5000:	103e8d0e 	bge	r2,zero,4a38 <_dtoa_r+0x900>
    5004:	d9400717 	ldw	r5,28(sp)
    5008:	d9001617 	ldw	r4,88(sp)
    500c:	01800284 	movi	r6,10
    5010:	000f883a 	mov	r7,zero
    5014:	00080200 	call	8020 <__multadd>
    5018:	d9800d17 	ldw	r6,52(sp)
    501c:	d8800715 	stw	r2,28(sp)
    5020:	31bfffc4 	addi	r6,r6,-1
    5024:	d9800d15 	stw	r6,52(sp)
    5028:	b001a71e 	bne	r22,zero,56c8 <_dtoa_r+0x1590>
    502c:	d8800e17 	ldw	r2,56(sp)
    5030:	d8800f15 	stw	r2,60(sp)
    5034:	003e8006 	br	4a38 <_dtoa_r+0x900>
    5038:	90800417 	ldw	r2,16(r18)
    503c:	1085883a 	add	r2,r2,r2
    5040:	1085883a 	add	r2,r2,r2
    5044:	1485883a 	add	r2,r2,r18
    5048:	11000417 	ldw	r4,16(r2)
    504c:	00073280 	call	7328 <__hi0bits>
    5050:	00c00804 	movi	r3,32
    5054:	1887c83a 	sub	r3,r3,r2
    5058:	003e5a06 	br	49c4 <_dtoa_r+0x88c>
    505c:	d9400717 	ldw	r5,28(sp)
    5060:	d9801017 	ldw	r6,64(sp)
    5064:	d9001617 	ldw	r4,88(sp)
    5068:	000814c0 	call	814c <__pow5mult>
    506c:	d8800715 	stw	r2,28(sp)
    5070:	003e4306 	br	4980 <_dtoa_r+0x848>
    5074:	d9800f17 	ldw	r6,60(sp)
    5078:	d8800d17 	ldw	r2,52(sp)
    507c:	d9800315 	stw	r6,12(sp)
    5080:	d8800415 	stw	r2,16(sp)
    5084:	d8c00b17 	ldw	r3,44(sp)
    5088:	1805003a 	cmpeq	r2,r3,zero
    508c:	1000e21e 	bne	r2,zero,5418 <_dtoa_r+0x12e0>
    5090:	d9000317 	ldw	r4,12(sp)
    5094:	0005883a 	mov	r2,zero
    5098:	00cff834 	movhi	r3,16352
    509c:	200c90fa 	slli	r6,r4,3
    50a0:	01000074 	movhi	r4,1
    50a4:	2138b004 	addi	r4,r4,-7488
    50a8:	180b883a 	mov	r5,r3
    50ac:	310d883a 	add	r6,r6,r4
    50b0:	327fff17 	ldw	r9,-4(r6)
    50b4:	323ffe17 	ldw	r8,-8(r6)
    50b8:	1009883a 	mov	r4,r2
    50bc:	480f883a 	mov	r7,r9
    50c0:	400d883a 	mov	r6,r8
    50c4:	000a6a40 	call	a6a4 <__divdf3>
    50c8:	180b883a 	mov	r5,r3
    50cc:	b00d883a 	mov	r6,r22
    50d0:	b80f883a 	mov	r7,r23
    50d4:	1009883a 	mov	r4,r2
    50d8:	000a1ec0 	call	a1ec <__subdf3>
    50dc:	a80b883a 	mov	r5,r21
    50e0:	a009883a 	mov	r4,r20
    50e4:	d8c01915 	stw	r3,100(sp)
    50e8:	d8801815 	stw	r2,96(sp)
    50ec:	000ac9c0 	call	ac9c <__fixdfsi>
    50f0:	1009883a 	mov	r4,r2
    50f4:	1027883a 	mov	r19,r2
    50f8:	000aba40 	call	aba4 <__floatsidf>
    50fc:	a80b883a 	mov	r5,r21
    5100:	a009883a 	mov	r4,r20
    5104:	180f883a 	mov	r7,r3
    5108:	100d883a 	mov	r6,r2
    510c:	000a1ec0 	call	a1ec <__subdf3>
    5110:	d9801817 	ldw	r6,96(sp)
    5114:	1823883a 	mov	r17,r3
    5118:	d8801415 	stw	r2,80(sp)
    511c:	302d883a 	mov	r22,r6
    5120:	d9800517 	ldw	r6,20(sp)
    5124:	9cc00c04 	addi	r19,r19,48
    5128:	dc401515 	stw	r17,84(sp)
    512c:	d8c01917 	ldw	r3,100(sp)
    5130:	34c00005 	stb	r19,0(r6)
    5134:	d8800517 	ldw	r2,20(sp)
    5138:	d9401917 	ldw	r5,100(sp)
    513c:	d9801417 	ldw	r6,80(sp)
    5140:	b009883a 	mov	r4,r22
    5144:	880f883a 	mov	r7,r17
    5148:	182f883a 	mov	r23,r3
    514c:	17000044 	addi	fp,r2,1
    5150:	000aa0c0 	call	aa0c <__gtdf2>
    5154:	00804e16 	blt	zero,r2,5290 <_dtoa_r+0x1158>
    5158:	d9801417 	ldw	r6,80(sp)
    515c:	0005883a 	mov	r2,zero
    5160:	00cffc34 	movhi	r3,16368
    5164:	180b883a 	mov	r5,r3
    5168:	880f883a 	mov	r7,r17
    516c:	1009883a 	mov	r4,r2
    5170:	000a1ec0 	call	a1ec <__subdf3>
    5174:	d9401917 	ldw	r5,100(sp)
    5178:	180f883a 	mov	r7,r3
    517c:	b009883a 	mov	r4,r22
    5180:	100d883a 	mov	r6,r2
    5184:	000aa0c0 	call	aa0c <__gtdf2>
    5188:	00bda216 	blt	zero,r2,4814 <_dtoa_r+0x6dc>
    518c:	d8c00317 	ldw	r3,12(sp)
    5190:	00800044 	movi	r2,1
    5194:	10c01216 	blt	r2,r3,51e0 <_dtoa_r+0x10a8>
    5198:	003d4506 	br	46b0 <_dtoa_r+0x578>
    519c:	d9801417 	ldw	r6,80(sp)
    51a0:	0005883a 	mov	r2,zero
    51a4:	00cffc34 	movhi	r3,16368
    51a8:	180b883a 	mov	r5,r3
    51ac:	880f883a 	mov	r7,r17
    51b0:	1009883a 	mov	r4,r2
    51b4:	000a1ec0 	call	a1ec <__subdf3>
    51b8:	d9c01b17 	ldw	r7,108(sp)
    51bc:	180b883a 	mov	r5,r3
    51c0:	1009883a 	mov	r4,r2
    51c4:	b00d883a 	mov	r6,r22
    51c8:	000ab1c0 	call	ab1c <__ltdf2>
    51cc:	103d9116 	blt	r2,zero,4814 <_dtoa_r+0x6dc>
    51d0:	d9800517 	ldw	r6,20(sp)
    51d4:	d9000317 	ldw	r4,12(sp)
    51d8:	3105883a 	add	r2,r6,r4
    51dc:	e0bd3426 	beq	fp,r2,46b0 <_dtoa_r+0x578>
    51e0:	04500934 	movhi	r17,16420
    51e4:	0021883a 	mov	r16,zero
    51e8:	b80b883a 	mov	r5,r23
    51ec:	b009883a 	mov	r4,r22
    51f0:	800d883a 	mov	r6,r16
    51f4:	880f883a 	mov	r7,r17
    51f8:	000a2e00 	call	a2e0 <__muldf3>
    51fc:	d9401517 	ldw	r5,84(sp)
    5200:	d9001417 	ldw	r4,80(sp)
    5204:	880f883a 	mov	r7,r17
    5208:	000d883a 	mov	r6,zero
    520c:	d8801a15 	stw	r2,104(sp)
    5210:	d8c01b15 	stw	r3,108(sp)
    5214:	000a2e00 	call	a2e0 <__muldf3>
    5218:	180b883a 	mov	r5,r3
    521c:	1009883a 	mov	r4,r2
    5220:	1823883a 	mov	r17,r3
    5224:	1021883a 	mov	r16,r2
    5228:	000ac9c0 	call	ac9c <__fixdfsi>
    522c:	1009883a 	mov	r4,r2
    5230:	102b883a 	mov	r21,r2
    5234:	000aba40 	call	aba4 <__floatsidf>
    5238:	880b883a 	mov	r5,r17
    523c:	8009883a 	mov	r4,r16
    5240:	180f883a 	mov	r7,r3
    5244:	100d883a 	mov	r6,r2
    5248:	000a1ec0 	call	a1ec <__subdf3>
    524c:	1021883a 	mov	r16,r2
    5250:	d9001b17 	ldw	r4,108(sp)
    5254:	1823883a 	mov	r17,r3
    5258:	dc001415 	stw	r16,80(sp)
    525c:	ad400c04 	addi	r21,r21,48
    5260:	dc401515 	stw	r17,84(sp)
    5264:	d8801a17 	ldw	r2,104(sp)
    5268:	e5400005 	stb	r21,0(fp)
    526c:	202f883a 	mov	r23,r4
    5270:	d9c01b17 	ldw	r7,108(sp)
    5274:	d9001417 	ldw	r4,80(sp)
    5278:	880b883a 	mov	r5,r17
    527c:	100d883a 	mov	r6,r2
    5280:	102d883a 	mov	r22,r2
    5284:	e7000044 	addi	fp,fp,1
    5288:	000ab1c0 	call	ab1c <__ltdf2>
    528c:	103fc30e 	bge	r2,zero,519c <_dtoa_r+0x1064>
    5290:	d9000417 	ldw	r4,16(sp)
    5294:	d9000d15 	stw	r4,52(sp)
    5298:	003d7106 	br	4860 <_dtoa_r+0x728>
    529c:	d9801717 	ldw	r6,92(sp)
    52a0:	00800084 	movi	r2,2
    52a4:	11bde60e 	bge	r2,r6,4a40 <_dtoa_r+0x908>
    52a8:	203cfb1e 	bne	r4,zero,4698 <_dtoa_r+0x560>
    52ac:	d9001617 	ldw	r4,88(sp)
    52b0:	900b883a 	mov	r5,r18
    52b4:	01800144 	movi	r6,5
    52b8:	000f883a 	mov	r7,zero
    52bc:	00080200 	call	8020 <__multadd>
    52c0:	d9000717 	ldw	r4,28(sp)
    52c4:	100b883a 	mov	r5,r2
    52c8:	1025883a 	mov	r18,r2
    52cc:	000745c0 	call	745c <__mcmp>
    52d0:	00bcf10e 	bge	zero,r2,4698 <_dtoa_r+0x560>
    52d4:	d8c00d17 	ldw	r3,52(sp)
    52d8:	d9000517 	ldw	r4,20(sp)
    52dc:	d8000615 	stw	zero,24(sp)
    52e0:	18c00044 	addi	r3,r3,1
    52e4:	d8c00d15 	stw	r3,52(sp)
    52e8:	00800c44 	movi	r2,49
    52ec:	27000044 	addi	fp,r4,1
    52f0:	20800005 	stb	r2,0(r4)
    52f4:	003e8906 	br	4d1c <_dtoa_r+0xbe4>
    52f8:	d8c00517 	ldw	r3,20(sp)
    52fc:	003bc206 	br	4208 <_dtoa_r+0xd0>
    5300:	01800074 	movhi	r6,1
    5304:	31b8e204 	addi	r6,r6,-7288
    5308:	30c00917 	ldw	r3,36(r6)
    530c:	30800817 	ldw	r2,32(r6)
    5310:	d9001217 	ldw	r4,72(sp)
    5314:	d9401317 	ldw	r5,76(sp)
    5318:	180f883a 	mov	r7,r3
    531c:	100d883a 	mov	r6,r2
    5320:	000a6a40 	call	a6a4 <__divdf3>
    5324:	948003cc 	andi	r18,r18,15
    5328:	058000c4 	movi	r22,3
    532c:	1029883a 	mov	r20,r2
    5330:	182b883a 	mov	r21,r3
    5334:	003c8906 	br	455c <_dtoa_r+0x424>
    5338:	d9001017 	ldw	r4,64(sp)
    533c:	d9800917 	ldw	r6,36(sp)
    5340:	0025883a 	mov	r18,zero
    5344:	1105c83a 	sub	r2,r2,r4
    5348:	2089883a 	add	r4,r4,r2
    534c:	308d883a 	add	r6,r6,r2
    5350:	d9001015 	stw	r4,64(sp)
    5354:	d9800915 	stw	r6,36(sp)
    5358:	003e3206 	br	4c24 <_dtoa_r+0xaec>
    535c:	28800044 	addi	r2,r5,1
    5360:	27000044 	addi	fp,r4,1
    5364:	20800005 	stb	r2,0(r4)
    5368:	003e6c06 	br	4d1c <_dtoa_r+0xbe4>
    536c:	d8800f17 	ldw	r2,60(sp)
    5370:	00bce016 	blt	zero,r2,46f4 <_dtoa_r+0x5bc>
    5374:	d9800f17 	ldw	r6,60(sp)
    5378:	303cc51e 	bne	r6,zero,4690 <_dtoa_r+0x558>
    537c:	0005883a 	mov	r2,zero
    5380:	00d00534 	movhi	r3,16404
    5384:	980b883a 	mov	r5,r19
    5388:	180f883a 	mov	r7,r3
    538c:	9009883a 	mov	r4,r18
    5390:	100d883a 	mov	r6,r2
    5394:	000a2e00 	call	a2e0 <__muldf3>
    5398:	180b883a 	mov	r5,r3
    539c:	a80f883a 	mov	r7,r21
    53a0:	1009883a 	mov	r4,r2
    53a4:	a00d883a 	mov	r6,r20
    53a8:	000aa940 	call	aa94 <__gedf2>
    53ac:	103cb80e 	bge	r2,zero,4690 <_dtoa_r+0x558>
    53b0:	0027883a 	mov	r19,zero
    53b4:	0025883a 	mov	r18,zero
    53b8:	003fc606 	br	52d4 <_dtoa_r+0x119c>
    53bc:	99400117 	ldw	r5,4(r19)
    53c0:	d9001617 	ldw	r4,88(sp)
    53c4:	00078800 	call	7880 <_Balloc>
    53c8:	99800417 	ldw	r6,16(r19)
    53cc:	11000304 	addi	r4,r2,12
    53d0:	99400304 	addi	r5,r19,12
    53d4:	318d883a 	add	r6,r6,r6
    53d8:	318d883a 	add	r6,r6,r6
    53dc:	31800204 	addi	r6,r6,8
    53e0:	1023883a 	mov	r17,r2
    53e4:	00070e80 	call	70e8 <memcpy>
    53e8:	d9001617 	ldw	r4,88(sp)
    53ec:	880b883a 	mov	r5,r17
    53f0:	01800044 	movi	r6,1
    53f4:	0007c440 	call	7c44 <__lshift>
    53f8:	100b883a 	mov	r5,r2
    53fc:	003d9c06 	br	4a70 <_dtoa_r+0x938>
    5400:	00800e44 	movi	r2,57
    5404:	b8807026 	beq	r23,r2,55c8 <_dtoa_r+0x1490>
    5408:	b8800044 	addi	r2,r23,1
    540c:	b7000044 	addi	fp,r22,1
    5410:	b0800005 	stb	r2,0(r22)
    5414:	003e4106 	br	4d1c <_dtoa_r+0xbe4>
    5418:	d8800317 	ldw	r2,12(sp)
    541c:	01800074 	movhi	r6,1
    5420:	31b8b004 	addi	r6,r6,-7488
    5424:	b009883a 	mov	r4,r22
    5428:	100e90fa 	slli	r7,r2,3
    542c:	b80b883a 	mov	r5,r23
    5430:	398f883a 	add	r7,r7,r6
    5434:	38bffe17 	ldw	r2,-8(r7)
    5438:	d9800517 	ldw	r6,20(sp)
    543c:	38ffff17 	ldw	r3,-4(r7)
    5440:	37000044 	addi	fp,r6,1
    5444:	180f883a 	mov	r7,r3
    5448:	100d883a 	mov	r6,r2
    544c:	000a2e00 	call	a2e0 <__muldf3>
    5450:	a80b883a 	mov	r5,r21
    5454:	a009883a 	mov	r4,r20
    5458:	182f883a 	mov	r23,r3
    545c:	102d883a 	mov	r22,r2
    5460:	000ac9c0 	call	ac9c <__fixdfsi>
    5464:	1009883a 	mov	r4,r2
    5468:	1027883a 	mov	r19,r2
    546c:	000aba40 	call	aba4 <__floatsidf>
    5470:	a80b883a 	mov	r5,r21
    5474:	a009883a 	mov	r4,r20
    5478:	180f883a 	mov	r7,r3
    547c:	100d883a 	mov	r6,r2
    5480:	000a1ec0 	call	a1ec <__subdf3>
    5484:	180b883a 	mov	r5,r3
    5488:	d8c00517 	ldw	r3,20(sp)
    548c:	9cc00c04 	addi	r19,r19,48
    5490:	1009883a 	mov	r4,r2
    5494:	1cc00005 	stb	r19,0(r3)
    5498:	2021883a 	mov	r16,r4
    549c:	d9000317 	ldw	r4,12(sp)
    54a0:	00800044 	movi	r2,1
    54a4:	2823883a 	mov	r17,r5
    54a8:	20802226 	beq	r4,r2,5534 <_dtoa_r+0x13fc>
    54ac:	1029883a 	mov	r20,r2
    54b0:	0005883a 	mov	r2,zero
    54b4:	00d00934 	movhi	r3,16420
    54b8:	180f883a 	mov	r7,r3
    54bc:	100d883a 	mov	r6,r2
    54c0:	880b883a 	mov	r5,r17
    54c4:	8009883a 	mov	r4,r16
    54c8:	000a2e00 	call	a2e0 <__muldf3>
    54cc:	180b883a 	mov	r5,r3
    54d0:	1009883a 	mov	r4,r2
    54d4:	1823883a 	mov	r17,r3
    54d8:	1021883a 	mov	r16,r2
    54dc:	000ac9c0 	call	ac9c <__fixdfsi>
    54e0:	1009883a 	mov	r4,r2
    54e4:	102b883a 	mov	r21,r2
    54e8:	000aba40 	call	aba4 <__floatsidf>
    54ec:	880b883a 	mov	r5,r17
    54f0:	8009883a 	mov	r4,r16
    54f4:	180f883a 	mov	r7,r3
    54f8:	100d883a 	mov	r6,r2
    54fc:	000a1ec0 	call	a1ec <__subdf3>
    5500:	180b883a 	mov	r5,r3
    5504:	d8c00517 	ldw	r3,20(sp)
    5508:	1009883a 	mov	r4,r2
    550c:	ad400c04 	addi	r21,r21,48
    5510:	1d05883a 	add	r2,r3,r20
    5514:	15400005 	stb	r21,0(r2)
    5518:	2021883a 	mov	r16,r4
    551c:	d9000317 	ldw	r4,12(sp)
    5520:	a5000044 	addi	r20,r20,1
    5524:	2823883a 	mov	r17,r5
    5528:	a13fe11e 	bne	r20,r4,54b0 <_dtoa_r+0x1378>
    552c:	e505883a 	add	r2,fp,r20
    5530:	173fffc4 	addi	fp,r2,-1
    5534:	0025883a 	mov	r18,zero
    5538:	04cff834 	movhi	r19,16352
    553c:	b009883a 	mov	r4,r22
    5540:	b80b883a 	mov	r5,r23
    5544:	900d883a 	mov	r6,r18
    5548:	980f883a 	mov	r7,r19
    554c:	000a26c0 	call	a26c <__adddf3>
    5550:	180b883a 	mov	r5,r3
    5554:	1009883a 	mov	r4,r2
    5558:	800d883a 	mov	r6,r16
    555c:	880f883a 	mov	r7,r17
    5560:	000ab1c0 	call	ab1c <__ltdf2>
    5564:	103cab16 	blt	r2,zero,4814 <_dtoa_r+0x6dc>
    5568:	0009883a 	mov	r4,zero
    556c:	980b883a 	mov	r5,r19
    5570:	b80f883a 	mov	r7,r23
    5574:	b00d883a 	mov	r6,r22
    5578:	000a1ec0 	call	a1ec <__subdf3>
    557c:	180b883a 	mov	r5,r3
    5580:	880f883a 	mov	r7,r17
    5584:	1009883a 	mov	r4,r2
    5588:	800d883a 	mov	r6,r16
    558c:	000aa0c0 	call	aa0c <__gtdf2>
    5590:	00bc470e 	bge	zero,r2,46b0 <_dtoa_r+0x578>
    5594:	00c00c04 	movi	r3,48
    5598:	e73fffc4 	addi	fp,fp,-1
    559c:	e0800007 	ldb	r2,0(fp)
    55a0:	10fffd26 	beq	r2,r3,5598 <_dtoa_r+0x1460>
    55a4:	d9800417 	ldw	r6,16(sp)
    55a8:	e7000044 	addi	fp,fp,1
    55ac:	d9800d15 	stw	r6,52(sp)
    55b0:	003cab06 	br	4860 <_dtoa_r+0x728>
    55b4:	d8c00f17 	ldw	r3,60(sp)
    55b8:	d9001117 	ldw	r4,68(sp)
    55bc:	20e1c83a 	sub	r16,r4,r3
    55c0:	0007883a 	mov	r3,zero
    55c4:	003d9b06 	br	4c34 <_dtoa_r+0xafc>
    55c8:	00800e44 	movi	r2,57
    55cc:	b0800005 	stb	r2,0(r22)
    55d0:	b5800044 	addi	r22,r22,1
    55d4:	003dc106 	br	4cdc <_dtoa_r+0xba4>
    55d8:	05800084 	movi	r22,2
    55dc:	003bf706 	br	45bc <_dtoa_r+0x484>
    55e0:	d9000f17 	ldw	r4,60(sp)
    55e4:	013c000e 	bge	zero,r4,45e8 <_dtoa_r+0x4b0>
    55e8:	d9800e17 	ldw	r6,56(sp)
    55ec:	01bc300e 	bge	zero,r6,46b0 <_dtoa_r+0x578>
    55f0:	0005883a 	mov	r2,zero
    55f4:	00d00934 	movhi	r3,16420
    55f8:	a80b883a 	mov	r5,r21
    55fc:	180f883a 	mov	r7,r3
    5600:	a009883a 	mov	r4,r20
    5604:	100d883a 	mov	r6,r2
    5608:	000a2e00 	call	a2e0 <__muldf3>
    560c:	b1000044 	addi	r4,r22,1
    5610:	1021883a 	mov	r16,r2
    5614:	1823883a 	mov	r17,r3
    5618:	000aba40 	call	aba4 <__floatsidf>
    561c:	880b883a 	mov	r5,r17
    5620:	8009883a 	mov	r4,r16
    5624:	180f883a 	mov	r7,r3
    5628:	100d883a 	mov	r6,r2
    562c:	000a2e00 	call	a2e0 <__muldf3>
    5630:	0011883a 	mov	r8,zero
    5634:	02500734 	movhi	r9,16412
    5638:	180b883a 	mov	r5,r3
    563c:	480f883a 	mov	r7,r9
    5640:	1009883a 	mov	r4,r2
    5644:	400d883a 	mov	r6,r8
    5648:	000a26c0 	call	a26c <__adddf3>
    564c:	102d883a 	mov	r22,r2
    5650:	00bf3034 	movhi	r2,64704
    5654:	10ef883a 	add	r23,r2,r3
    5658:	d8800d17 	ldw	r2,52(sp)
    565c:	d8c00e17 	ldw	r3,56(sp)
    5660:	8029883a 	mov	r20,r16
    5664:	10bfffc4 	addi	r2,r2,-1
    5668:	882b883a 	mov	r21,r17
    566c:	d8800415 	stw	r2,16(sp)
    5670:	d8c00315 	stw	r3,12(sp)
    5674:	003e8306 	br	5084 <_dtoa_r+0xf4c>
    5678:	d8800117 	ldw	r2,4(sp)
    567c:	dc001117 	ldw	r16,68(sp)
    5680:	dc801017 	ldw	r18,64(sp)
    5684:	00c00d84 	movi	r3,54
    5688:	1887c83a 	sub	r3,r3,r2
    568c:	003d6906 	br	4c34 <_dtoa_r+0xafc>
    5690:	01800044 	movi	r6,1
    5694:	3021883a 	mov	r16,r6
    5698:	d9800f15 	stw	r6,60(sp)
    569c:	d9802615 	stw	r6,152(sp)
    56a0:	d9800e15 	stw	r6,56(sp)
    56a4:	003b9306 	br	44f4 <_dtoa_r+0x3bc>
    56a8:	b021883a 	mov	r16,r22
    56ac:	dd800f15 	stw	r22,60(sp)
    56b0:	003b9006 	br	44f4 <_dtoa_r+0x3bc>
    56b4:	103e221e 	bne	r2,zero,4f40 <_dtoa_r+0xe08>
    56b8:	b880004c 	andi	r2,r23,1
    56bc:	1005003a 	cmpeq	r2,r2,zero
    56c0:	103e1f1e 	bne	r2,zero,4f40 <_dtoa_r+0xe08>
    56c4:	003e1b06 	br	4f34 <_dtoa_r+0xdfc>
    56c8:	d9001617 	ldw	r4,88(sp)
    56cc:	980b883a 	mov	r5,r19
    56d0:	01800284 	movi	r6,10
    56d4:	000f883a 	mov	r7,zero
    56d8:	00080200 	call	8020 <__multadd>
    56dc:	d8c00e17 	ldw	r3,56(sp)
    56e0:	1027883a 	mov	r19,r2
    56e4:	d8c00f15 	stw	r3,60(sp)
    56e8:	003cd306 	br	4a38 <_dtoa_r+0x900>

000056ec <_fflush_r>:
    56ec:	defffb04 	addi	sp,sp,-20
    56f0:	dcc00315 	stw	r19,12(sp)
    56f4:	dc800215 	stw	r18,8(sp)
    56f8:	dfc00415 	stw	ra,16(sp)
    56fc:	dc400115 	stw	r17,4(sp)
    5700:	dc000015 	stw	r16,0(sp)
    5704:	2027883a 	mov	r19,r4
    5708:	2825883a 	mov	r18,r5
    570c:	20000226 	beq	r4,zero,5718 <_fflush_r+0x2c>
    5710:	20800e17 	ldw	r2,56(r4)
    5714:	10005626 	beq	r2,zero,5870 <_fflush_r+0x184>
    5718:	9100030b 	ldhu	r4,12(r18)
    571c:	20ffffcc 	andi	r3,r4,65535
    5720:	18e0001c 	xori	r3,r3,32768
    5724:	18e00004 	addi	r3,r3,-32768
    5728:	1880020c 	andi	r2,r3,8
    572c:	1000261e 	bne	r2,zero,57c8 <_fflush_r+0xdc>
    5730:	90c00117 	ldw	r3,4(r18)
    5734:	20820014 	ori	r2,r4,2048
    5738:	9080030d 	sth	r2,12(r18)
    573c:	1009883a 	mov	r4,r2
    5740:	00c0400e 	bge	zero,r3,5844 <_fflush_r+0x158>
    5744:	92000a17 	ldw	r8,40(r18)
    5748:	40004026 	beq	r8,zero,584c <_fflush_r+0x160>
    574c:	2084000c 	andi	r2,r4,4096
    5750:	10005326 	beq	r2,zero,58a0 <_fflush_r+0x1b4>
    5754:	94001417 	ldw	r16,80(r18)
    5758:	9080030b 	ldhu	r2,12(r18)
    575c:	1080010c 	andi	r2,r2,4
    5760:	1000481e 	bne	r2,zero,5884 <_fflush_r+0x198>
    5764:	91400717 	ldw	r5,28(r18)
    5768:	9809883a 	mov	r4,r19
    576c:	800d883a 	mov	r6,r16
    5770:	000f883a 	mov	r7,zero
    5774:	403ee83a 	callr	r8
    5778:	8080261e 	bne	r16,r2,5814 <_fflush_r+0x128>
    577c:	9080030b 	ldhu	r2,12(r18)
    5780:	91000417 	ldw	r4,16(r18)
    5784:	90000115 	stw	zero,4(r18)
    5788:	10bdffcc 	andi	r2,r2,63487
    578c:	10ffffcc 	andi	r3,r2,65535
    5790:	18c4000c 	andi	r3,r3,4096
    5794:	9080030d 	sth	r2,12(r18)
    5798:	91000015 	stw	r4,0(r18)
    579c:	18002b26 	beq	r3,zero,584c <_fflush_r+0x160>
    57a0:	0007883a 	mov	r3,zero
    57a4:	1805883a 	mov	r2,r3
    57a8:	94001415 	stw	r16,80(r18)
    57ac:	dfc00417 	ldw	ra,16(sp)
    57b0:	dcc00317 	ldw	r19,12(sp)
    57b4:	dc800217 	ldw	r18,8(sp)
    57b8:	dc400117 	ldw	r17,4(sp)
    57bc:	dc000017 	ldw	r16,0(sp)
    57c0:	dec00504 	addi	sp,sp,20
    57c4:	f800283a 	ret
    57c8:	94400417 	ldw	r17,16(r18)
    57cc:	88001f26 	beq	r17,zero,584c <_fflush_r+0x160>
    57d0:	90800017 	ldw	r2,0(r18)
    57d4:	18c000cc 	andi	r3,r3,3
    57d8:	94400015 	stw	r17,0(r18)
    57dc:	1461c83a 	sub	r16,r2,r17
    57e0:	18002526 	beq	r3,zero,5878 <_fflush_r+0x18c>
    57e4:	0005883a 	mov	r2,zero
    57e8:	90800215 	stw	r2,8(r18)
    57ec:	0400170e 	bge	zero,r16,584c <_fflush_r+0x160>
    57f0:	90c00917 	ldw	r3,36(r18)
    57f4:	91400717 	ldw	r5,28(r18)
    57f8:	880d883a 	mov	r6,r17
    57fc:	800f883a 	mov	r7,r16
    5800:	9809883a 	mov	r4,r19
    5804:	183ee83a 	callr	r3
    5808:	88a3883a 	add	r17,r17,r2
    580c:	80a1c83a 	sub	r16,r16,r2
    5810:	00bff616 	blt	zero,r2,57ec <_fflush_r+0x100>
    5814:	9080030b 	ldhu	r2,12(r18)
    5818:	00ffffc4 	movi	r3,-1
    581c:	10801014 	ori	r2,r2,64
    5820:	9080030d 	sth	r2,12(r18)
    5824:	1805883a 	mov	r2,r3
    5828:	dfc00417 	ldw	ra,16(sp)
    582c:	dcc00317 	ldw	r19,12(sp)
    5830:	dc800217 	ldw	r18,8(sp)
    5834:	dc400117 	ldw	r17,4(sp)
    5838:	dc000017 	ldw	r16,0(sp)
    583c:	dec00504 	addi	sp,sp,20
    5840:	f800283a 	ret
    5844:	90800f17 	ldw	r2,60(r18)
    5848:	00bfbe16 	blt	zero,r2,5744 <_fflush_r+0x58>
    584c:	0007883a 	mov	r3,zero
    5850:	1805883a 	mov	r2,r3
    5854:	dfc00417 	ldw	ra,16(sp)
    5858:	dcc00317 	ldw	r19,12(sp)
    585c:	dc800217 	ldw	r18,8(sp)
    5860:	dc400117 	ldw	r17,4(sp)
    5864:	dc000017 	ldw	r16,0(sp)
    5868:	dec00504 	addi	sp,sp,20
    586c:	f800283a 	ret
    5870:	00059840 	call	5984 <__sinit>
    5874:	003fa806 	br	5718 <_fflush_r+0x2c>
    5878:	90800517 	ldw	r2,20(r18)
    587c:	90800215 	stw	r2,8(r18)
    5880:	003fda06 	br	57ec <_fflush_r+0x100>
    5884:	90800117 	ldw	r2,4(r18)
    5888:	90c00c17 	ldw	r3,48(r18)
    588c:	80a1c83a 	sub	r16,r16,r2
    5890:	183fb426 	beq	r3,zero,5764 <_fflush_r+0x78>
    5894:	90800f17 	ldw	r2,60(r18)
    5898:	80a1c83a 	sub	r16,r16,r2
    589c:	003fb106 	br	5764 <_fflush_r+0x78>
    58a0:	91400717 	ldw	r5,28(r18)
    58a4:	9809883a 	mov	r4,r19
    58a8:	000d883a 	mov	r6,zero
    58ac:	01c00044 	movi	r7,1
    58b0:	403ee83a 	callr	r8
    58b4:	1021883a 	mov	r16,r2
    58b8:	00bfffc4 	movi	r2,-1
    58bc:	80800226 	beq	r16,r2,58c8 <_fflush_r+0x1dc>
    58c0:	92000a17 	ldw	r8,40(r18)
    58c4:	003fa406 	br	5758 <_fflush_r+0x6c>
    58c8:	98c00017 	ldw	r3,0(r19)
    58cc:	00800744 	movi	r2,29
    58d0:	18bfde26 	beq	r3,r2,584c <_fflush_r+0x160>
    58d4:	9080030b 	ldhu	r2,12(r18)
    58d8:	8007883a 	mov	r3,r16
    58dc:	10801014 	ori	r2,r2,64
    58e0:	9080030d 	sth	r2,12(r18)
    58e4:	003fcf06 	br	5824 <_fflush_r+0x138>

000058e8 <fflush>:
    58e8:	01400034 	movhi	r5,0
    58ec:	2955bb04 	addi	r5,r5,22252
    58f0:	2007883a 	mov	r3,r4
    58f4:	20000526 	beq	r4,zero,590c <fflush+0x24>
    58f8:	00800074 	movhi	r2,1
    58fc:	10bfd204 	addi	r2,r2,-184
    5900:	11000017 	ldw	r4,0(r2)
    5904:	180b883a 	mov	r5,r3
    5908:	00056ec1 	jmpi	56ec <_fflush_r>
    590c:	00800074 	movhi	r2,1
    5910:	10bfd304 	addi	r2,r2,-180
    5914:	11000017 	ldw	r4,0(r2)
    5918:	00064ec1 	jmpi	64ec <_fwalk_reent>

0000591c <std>:
    591c:	00800074 	movhi	r2,1
    5920:	10a29804 	addi	r2,r2,-30112
    5924:	20800b15 	stw	r2,44(r4)
    5928:	00800074 	movhi	r2,1
    592c:	10a2d304 	addi	r2,r2,-29876
    5930:	20800815 	stw	r2,32(r4)
    5934:	00c00074 	movhi	r3,1
    5938:	18e2b404 	addi	r3,r3,-30000
    593c:	00800074 	movhi	r2,1
    5940:	10a29a04 	addi	r2,r2,-30104
    5944:	2140030d 	sth	r5,12(r4)
    5948:	2180038d 	sth	r6,14(r4)
    594c:	20c00915 	stw	r3,36(r4)
    5950:	20800a15 	stw	r2,40(r4)
    5954:	20000015 	stw	zero,0(r4)
    5958:	20000115 	stw	zero,4(r4)
    595c:	20000215 	stw	zero,8(r4)
    5960:	20000415 	stw	zero,16(r4)
    5964:	20000515 	stw	zero,20(r4)
    5968:	20000615 	stw	zero,24(r4)
    596c:	21000715 	stw	r4,28(r4)
    5970:	f800283a 	ret

00005974 <__sfp_lock_acquire>:
    5974:	f800283a 	ret

00005978 <__sfp_lock_release>:
    5978:	f800283a 	ret

0000597c <__sinit_lock_acquire>:
    597c:	f800283a 	ret

00005980 <__sinit_lock_release>:
    5980:	f800283a 	ret

00005984 <__sinit>:
    5984:	20800e17 	ldw	r2,56(r4)
    5988:	defffd04 	addi	sp,sp,-12
    598c:	dc400115 	stw	r17,4(sp)
    5990:	dc000015 	stw	r16,0(sp)
    5994:	dfc00215 	stw	ra,8(sp)
    5998:	04400044 	movi	r17,1
    599c:	01400104 	movi	r5,4
    59a0:	000d883a 	mov	r6,zero
    59a4:	2021883a 	mov	r16,r4
    59a8:	2200bb04 	addi	r8,r4,748
    59ac:	200f883a 	mov	r7,r4
    59b0:	10000526 	beq	r2,zero,59c8 <__sinit+0x44>
    59b4:	dfc00217 	ldw	ra,8(sp)
    59b8:	dc400117 	ldw	r17,4(sp)
    59bc:	dc000017 	ldw	r16,0(sp)
    59c0:	dec00304 	addi	sp,sp,12
    59c4:	f800283a 	ret
    59c8:	21000117 	ldw	r4,4(r4)
    59cc:	00800034 	movhi	r2,0
    59d0:	10969a04 	addi	r2,r2,23144
    59d4:	00c000c4 	movi	r3,3
    59d8:	80800f15 	stw	r2,60(r16)
    59dc:	80c0b915 	stw	r3,740(r16)
    59e0:	8200ba15 	stw	r8,744(r16)
    59e4:	84400e15 	stw	r17,56(r16)
    59e8:	8000b815 	stw	zero,736(r16)
    59ec:	000591c0 	call	591c <std>
    59f0:	81000217 	ldw	r4,8(r16)
    59f4:	880d883a 	mov	r6,r17
    59f8:	800f883a 	mov	r7,r16
    59fc:	01400284 	movi	r5,10
    5a00:	000591c0 	call	591c <std>
    5a04:	81000317 	ldw	r4,12(r16)
    5a08:	800f883a 	mov	r7,r16
    5a0c:	01400484 	movi	r5,18
    5a10:	01800084 	movi	r6,2
    5a14:	dfc00217 	ldw	ra,8(sp)
    5a18:	dc400117 	ldw	r17,4(sp)
    5a1c:	dc000017 	ldw	r16,0(sp)
    5a20:	dec00304 	addi	sp,sp,12
    5a24:	000591c1 	jmpi	591c <std>

00005a28 <__fp_lock>:
    5a28:	0005883a 	mov	r2,zero
    5a2c:	f800283a 	ret

00005a30 <__fp_unlock>:
    5a30:	0005883a 	mov	r2,zero
    5a34:	f800283a 	ret

00005a38 <__fp_unlock_all>:
    5a38:	00800074 	movhi	r2,1
    5a3c:	10bfd204 	addi	r2,r2,-184
    5a40:	11000017 	ldw	r4,0(r2)
    5a44:	01400034 	movhi	r5,0
    5a48:	29568c04 	addi	r5,r5,23088
    5a4c:	00065b41 	jmpi	65b4 <_fwalk>

00005a50 <__fp_lock_all>:
    5a50:	00800074 	movhi	r2,1
    5a54:	10bfd204 	addi	r2,r2,-184
    5a58:	11000017 	ldw	r4,0(r2)
    5a5c:	01400034 	movhi	r5,0
    5a60:	29568a04 	addi	r5,r5,23080
    5a64:	00065b41 	jmpi	65b4 <_fwalk>

00005a68 <_cleanup_r>:
    5a68:	01400074 	movhi	r5,1
    5a6c:	2963ca04 	addi	r5,r5,-28888
    5a70:	00065b41 	jmpi	65b4 <_fwalk>

00005a74 <_cleanup>:
    5a74:	00800074 	movhi	r2,1
    5a78:	10bfd304 	addi	r2,r2,-180
    5a7c:	11000017 	ldw	r4,0(r2)
    5a80:	0005a681 	jmpi	5a68 <_cleanup_r>

00005a84 <__sfmoreglue>:
    5a84:	defffc04 	addi	sp,sp,-16
    5a88:	dc000015 	stw	r16,0(sp)
    5a8c:	2821883a 	mov	r16,r5
    5a90:	dc400115 	stw	r17,4(sp)
    5a94:	01401704 	movi	r5,92
    5a98:	2023883a 	mov	r17,r4
    5a9c:	8009883a 	mov	r4,r16
    5aa0:	dfc00315 	stw	ra,12(sp)
    5aa4:	dcc00215 	stw	r19,8(sp)
    5aa8:	0001ca00 	call	1ca0 <__mulsi3>
    5aac:	11400304 	addi	r5,r2,12
    5ab0:	8809883a 	mov	r4,r17
    5ab4:	1027883a 	mov	r19,r2
    5ab8:	00068c40 	call	68c4 <_malloc_r>
    5abc:	10c00304 	addi	r3,r2,12
    5ac0:	1023883a 	mov	r17,r2
    5ac4:	1809883a 	mov	r4,r3
    5ac8:	980d883a 	mov	r6,r19
    5acc:	000b883a 	mov	r5,zero
    5ad0:	10000b26 	beq	r2,zero,5b00 <__sfmoreglue+0x7c>
    5ad4:	14000115 	stw	r16,4(r2)
    5ad8:	10c00215 	stw	r3,8(r2)
    5adc:	10000015 	stw	zero,0(r2)
    5ae0:	00072680 	call	7268 <memset>
    5ae4:	8805883a 	mov	r2,r17
    5ae8:	dfc00317 	ldw	ra,12(sp)
    5aec:	dcc00217 	ldw	r19,8(sp)
    5af0:	dc400117 	ldw	r17,4(sp)
    5af4:	dc000017 	ldw	r16,0(sp)
    5af8:	dec00404 	addi	sp,sp,16
    5afc:	f800283a 	ret
    5b00:	0023883a 	mov	r17,zero
    5b04:	8805883a 	mov	r2,r17
    5b08:	dfc00317 	ldw	ra,12(sp)
    5b0c:	dcc00217 	ldw	r19,8(sp)
    5b10:	dc400117 	ldw	r17,4(sp)
    5b14:	dc000017 	ldw	r16,0(sp)
    5b18:	dec00404 	addi	sp,sp,16
    5b1c:	f800283a 	ret

00005b20 <__sfp>:
    5b20:	defffd04 	addi	sp,sp,-12
    5b24:	00800074 	movhi	r2,1
    5b28:	10bfd304 	addi	r2,r2,-180
    5b2c:	dc000015 	stw	r16,0(sp)
    5b30:	14000017 	ldw	r16,0(r2)
    5b34:	dc400115 	stw	r17,4(sp)
    5b38:	dfc00215 	stw	ra,8(sp)
    5b3c:	80800e17 	ldw	r2,56(r16)
    5b40:	2023883a 	mov	r17,r4
    5b44:	10002626 	beq	r2,zero,5be0 <__sfp+0xc0>
    5b48:	8400b804 	addi	r16,r16,736
    5b4c:	80800117 	ldw	r2,4(r16)
    5b50:	81000217 	ldw	r4,8(r16)
    5b54:	10ffffc4 	addi	r3,r2,-1
    5b58:	18000916 	blt	r3,zero,5b80 <__sfp+0x60>
    5b5c:	2080030f 	ldh	r2,12(r4)
    5b60:	10000b26 	beq	r2,zero,5b90 <__sfp+0x70>
    5b64:	017fffc4 	movi	r5,-1
    5b68:	00000206 	br	5b74 <__sfp+0x54>
    5b6c:	2080030f 	ldh	r2,12(r4)
    5b70:	10000726 	beq	r2,zero,5b90 <__sfp+0x70>
    5b74:	18ffffc4 	addi	r3,r3,-1
    5b78:	21001704 	addi	r4,r4,92
    5b7c:	197ffb1e 	bne	r3,r5,5b6c <__sfp+0x4c>
    5b80:	80800017 	ldw	r2,0(r16)
    5b84:	10001926 	beq	r2,zero,5bec <__sfp+0xcc>
    5b88:	1021883a 	mov	r16,r2
    5b8c:	003fef06 	br	5b4c <__sfp+0x2c>
    5b90:	00bfffc4 	movi	r2,-1
    5b94:	00c00044 	movi	r3,1
    5b98:	2080038d 	sth	r2,14(r4)
    5b9c:	20c0030d 	sth	r3,12(r4)
    5ba0:	20000015 	stw	zero,0(r4)
    5ba4:	20000215 	stw	zero,8(r4)
    5ba8:	20000115 	stw	zero,4(r4)
    5bac:	20000415 	stw	zero,16(r4)
    5bb0:	20000515 	stw	zero,20(r4)
    5bb4:	20000615 	stw	zero,24(r4)
    5bb8:	20000c15 	stw	zero,48(r4)
    5bbc:	20000d15 	stw	zero,52(r4)
    5bc0:	20001115 	stw	zero,68(r4)
    5bc4:	20001215 	stw	zero,72(r4)
    5bc8:	2005883a 	mov	r2,r4
    5bcc:	dfc00217 	ldw	ra,8(sp)
    5bd0:	dc400117 	ldw	r17,4(sp)
    5bd4:	dc000017 	ldw	r16,0(sp)
    5bd8:	dec00304 	addi	sp,sp,12
    5bdc:	f800283a 	ret
    5be0:	8009883a 	mov	r4,r16
    5be4:	00059840 	call	5984 <__sinit>
    5be8:	003fd706 	br	5b48 <__sfp+0x28>
    5bec:	8809883a 	mov	r4,r17
    5bf0:	01400104 	movi	r5,4
    5bf4:	0005a840 	call	5a84 <__sfmoreglue>
    5bf8:	80800015 	stw	r2,0(r16)
    5bfc:	103fe21e 	bne	r2,zero,5b88 <__sfp+0x68>
    5c00:	00800304 	movi	r2,12
    5c04:	0009883a 	mov	r4,zero
    5c08:	88800015 	stw	r2,0(r17)
    5c0c:	003fee06 	br	5bc8 <__sfp+0xa8>

00005c10 <_malloc_trim_r>:
    5c10:	defffb04 	addi	sp,sp,-20
    5c14:	dcc00315 	stw	r19,12(sp)
    5c18:	04c00074 	movhi	r19,1
    5c1c:	9cfa4c04 	addi	r19,r19,-5840
    5c20:	dc800215 	stw	r18,8(sp)
    5c24:	dc400115 	stw	r17,4(sp)
    5c28:	dc000015 	stw	r16,0(sp)
    5c2c:	2823883a 	mov	r17,r5
    5c30:	2025883a 	mov	r18,r4
    5c34:	dfc00415 	stw	ra,16(sp)
    5c38:	000bf200 	call	bf20 <__malloc_lock>
    5c3c:	98800217 	ldw	r2,8(r19)
    5c40:	9009883a 	mov	r4,r18
    5c44:	000b883a 	mov	r5,zero
    5c48:	10c00117 	ldw	r3,4(r2)
    5c4c:	00bfff04 	movi	r2,-4
    5c50:	18a0703a 	and	r16,r3,r2
    5c54:	8463c83a 	sub	r17,r16,r17
    5c58:	8c43fbc4 	addi	r17,r17,4079
    5c5c:	8822d33a 	srli	r17,r17,12
    5c60:	0083ffc4 	movi	r2,4095
    5c64:	8c7fffc4 	addi	r17,r17,-1
    5c68:	8822933a 	slli	r17,r17,12
    5c6c:	1440060e 	bge	r2,r17,5c88 <_malloc_trim_r+0x78>
    5c70:	00089f00 	call	89f0 <_sbrk_r>
    5c74:	98c00217 	ldw	r3,8(r19)
    5c78:	9009883a 	mov	r4,r18
    5c7c:	044bc83a 	sub	r5,zero,r17
    5c80:	80c7883a 	add	r3,r16,r3
    5c84:	10c00926 	beq	r2,r3,5cac <_malloc_trim_r+0x9c>
    5c88:	000bf400 	call	bf40 <__malloc_unlock>
    5c8c:	0005883a 	mov	r2,zero
    5c90:	dfc00417 	ldw	ra,16(sp)
    5c94:	dcc00317 	ldw	r19,12(sp)
    5c98:	dc800217 	ldw	r18,8(sp)
    5c9c:	dc400117 	ldw	r17,4(sp)
    5ca0:	dc000017 	ldw	r16,0(sp)
    5ca4:	dec00504 	addi	sp,sp,20
    5ca8:	f800283a 	ret
    5cac:	9009883a 	mov	r4,r18
    5cb0:	00089f00 	call	89f0 <_sbrk_r>
    5cb4:	844dc83a 	sub	r6,r16,r17
    5cb8:	00ffffc4 	movi	r3,-1
    5cbc:	9009883a 	mov	r4,r18
    5cc0:	000b883a 	mov	r5,zero
    5cc4:	01c00274 	movhi	r7,9
    5cc8:	39c48b04 	addi	r7,r7,4652
    5ccc:	31800054 	ori	r6,r6,1
    5cd0:	10c00926 	beq	r2,r3,5cf8 <_malloc_trim_r+0xe8>
    5cd4:	38800017 	ldw	r2,0(r7)
    5cd8:	98c00217 	ldw	r3,8(r19)
    5cdc:	9009883a 	mov	r4,r18
    5ce0:	1445c83a 	sub	r2,r2,r17
    5ce4:	38800015 	stw	r2,0(r7)
    5ce8:	19800115 	stw	r6,4(r3)
    5cec:	000bf400 	call	bf40 <__malloc_unlock>
    5cf0:	00800044 	movi	r2,1
    5cf4:	003fe606 	br	5c90 <_malloc_trim_r+0x80>
    5cf8:	00089f00 	call	89f0 <_sbrk_r>
    5cfc:	99800217 	ldw	r6,8(r19)
    5d00:	100f883a 	mov	r7,r2
    5d04:	9009883a 	mov	r4,r18
    5d08:	1187c83a 	sub	r3,r2,r6
    5d0c:	008003c4 	movi	r2,15
    5d10:	19400054 	ori	r5,r3,1
    5d14:	10ffdc0e 	bge	r2,r3,5c88 <_malloc_trim_r+0x78>
    5d18:	00800074 	movhi	r2,1
    5d1c:	10bfd704 	addi	r2,r2,-164
    5d20:	10c00017 	ldw	r3,0(r2)
    5d24:	00800274 	movhi	r2,9
    5d28:	10848b04 	addi	r2,r2,4652
    5d2c:	31400115 	stw	r5,4(r6)
    5d30:	38c7c83a 	sub	r3,r7,r3
    5d34:	10c00015 	stw	r3,0(r2)
    5d38:	003fd306 	br	5c88 <_malloc_trim_r+0x78>

00005d3c <_free_r>:
    5d3c:	defffd04 	addi	sp,sp,-12
    5d40:	dc400115 	stw	r17,4(sp)
    5d44:	dc000015 	stw	r16,0(sp)
    5d48:	dfc00215 	stw	ra,8(sp)
    5d4c:	2821883a 	mov	r16,r5
    5d50:	2023883a 	mov	r17,r4
    5d54:	28005a26 	beq	r5,zero,5ec0 <_free_r+0x184>
    5d58:	000bf200 	call	bf20 <__malloc_lock>
    5d5c:	823ffe04 	addi	r8,r16,-8
    5d60:	41400117 	ldw	r5,4(r8)
    5d64:	00bfff84 	movi	r2,-2
    5d68:	02800074 	movhi	r10,1
    5d6c:	52ba4c04 	addi	r10,r10,-5840
    5d70:	288e703a 	and	r7,r5,r2
    5d74:	41cd883a 	add	r6,r8,r7
    5d78:	30c00117 	ldw	r3,4(r6)
    5d7c:	51000217 	ldw	r4,8(r10)
    5d80:	00bfff04 	movi	r2,-4
    5d84:	1892703a 	and	r9,r3,r2
    5d88:	5017883a 	mov	r11,r10
    5d8c:	31006726 	beq	r6,r4,5f2c <_free_r+0x1f0>
    5d90:	2880004c 	andi	r2,r5,1
    5d94:	1005003a 	cmpeq	r2,r2,zero
    5d98:	32400115 	stw	r9,4(r6)
    5d9c:	10001a1e 	bne	r2,zero,5e08 <_free_r+0xcc>
    5da0:	000b883a 	mov	r5,zero
    5da4:	3247883a 	add	r3,r6,r9
    5da8:	18800117 	ldw	r2,4(r3)
    5dac:	1080004c 	andi	r2,r2,1
    5db0:	1000231e 	bne	r2,zero,5e40 <_free_r+0x104>
    5db4:	280ac03a 	cmpne	r5,r5,zero
    5db8:	3a4f883a 	add	r7,r7,r9
    5dbc:	2800451e 	bne	r5,zero,5ed4 <_free_r+0x198>
    5dc0:	31000217 	ldw	r4,8(r6)
    5dc4:	00800074 	movhi	r2,1
    5dc8:	10ba4e04 	addi	r2,r2,-5832
    5dcc:	20807b26 	beq	r4,r2,5fbc <_free_r+0x280>
    5dd0:	30800317 	ldw	r2,12(r6)
    5dd4:	3a07883a 	add	r3,r7,r8
    5dd8:	19c00015 	stw	r7,0(r3)
    5ddc:	11000215 	stw	r4,8(r2)
    5de0:	20800315 	stw	r2,12(r4)
    5de4:	38800054 	ori	r2,r7,1
    5de8:	40800115 	stw	r2,4(r8)
    5dec:	28001a26 	beq	r5,zero,5e58 <_free_r+0x11c>
    5df0:	8809883a 	mov	r4,r17
    5df4:	dfc00217 	ldw	ra,8(sp)
    5df8:	dc400117 	ldw	r17,4(sp)
    5dfc:	dc000017 	ldw	r16,0(sp)
    5e00:	dec00304 	addi	sp,sp,12
    5e04:	000bf401 	jmpi	bf40 <__malloc_unlock>
    5e08:	80bffe17 	ldw	r2,-8(r16)
    5e0c:	50c00204 	addi	r3,r10,8
    5e10:	4091c83a 	sub	r8,r8,r2
    5e14:	41000217 	ldw	r4,8(r8)
    5e18:	388f883a 	add	r7,r7,r2
    5e1c:	20c06126 	beq	r4,r3,5fa4 <_free_r+0x268>
    5e20:	40800317 	ldw	r2,12(r8)
    5e24:	3247883a 	add	r3,r6,r9
    5e28:	000b883a 	mov	r5,zero
    5e2c:	11000215 	stw	r4,8(r2)
    5e30:	20800315 	stw	r2,12(r4)
    5e34:	18800117 	ldw	r2,4(r3)
    5e38:	1080004c 	andi	r2,r2,1
    5e3c:	103fdd26 	beq	r2,zero,5db4 <_free_r+0x78>
    5e40:	38800054 	ori	r2,r7,1
    5e44:	3a07883a 	add	r3,r7,r8
    5e48:	280ac03a 	cmpne	r5,r5,zero
    5e4c:	40800115 	stw	r2,4(r8)
    5e50:	19c00015 	stw	r7,0(r3)
    5e54:	283fe61e 	bne	r5,zero,5df0 <_free_r+0xb4>
    5e58:	00807fc4 	movi	r2,511
    5e5c:	11c01f2e 	bgeu	r2,r7,5edc <_free_r+0x1a0>
    5e60:	3806d27a 	srli	r3,r7,9
    5e64:	1800481e 	bne	r3,zero,5f88 <_free_r+0x24c>
    5e68:	3804d0fa 	srli	r2,r7,3
    5e6c:	100690fa 	slli	r3,r2,3
    5e70:	1acd883a 	add	r6,r3,r11
    5e74:	31400217 	ldw	r5,8(r6)
    5e78:	31405926 	beq	r6,r5,5fe0 <_free_r+0x2a4>
    5e7c:	28800117 	ldw	r2,4(r5)
    5e80:	00ffff04 	movi	r3,-4
    5e84:	10c4703a 	and	r2,r2,r3
    5e88:	3880022e 	bgeu	r7,r2,5e94 <_free_r+0x158>
    5e8c:	29400217 	ldw	r5,8(r5)
    5e90:	317ffa1e 	bne	r6,r5,5e7c <_free_r+0x140>
    5e94:	29800317 	ldw	r6,12(r5)
    5e98:	41800315 	stw	r6,12(r8)
    5e9c:	41400215 	stw	r5,8(r8)
    5ea0:	8809883a 	mov	r4,r17
    5ea4:	2a000315 	stw	r8,12(r5)
    5ea8:	32000215 	stw	r8,8(r6)
    5eac:	dfc00217 	ldw	ra,8(sp)
    5eb0:	dc400117 	ldw	r17,4(sp)
    5eb4:	dc000017 	ldw	r16,0(sp)
    5eb8:	dec00304 	addi	sp,sp,12
    5ebc:	000bf401 	jmpi	bf40 <__malloc_unlock>
    5ec0:	dfc00217 	ldw	ra,8(sp)
    5ec4:	dc400117 	ldw	r17,4(sp)
    5ec8:	dc000017 	ldw	r16,0(sp)
    5ecc:	dec00304 	addi	sp,sp,12
    5ed0:	f800283a 	ret
    5ed4:	31000217 	ldw	r4,8(r6)
    5ed8:	003fbd06 	br	5dd0 <_free_r+0x94>
    5edc:	3806d0fa 	srli	r3,r7,3
    5ee0:	00800044 	movi	r2,1
    5ee4:	51400117 	ldw	r5,4(r10)
    5ee8:	180890fa 	slli	r4,r3,3
    5eec:	1807d0ba 	srai	r3,r3,2
    5ef0:	22c9883a 	add	r4,r4,r11
    5ef4:	21800217 	ldw	r6,8(r4)
    5ef8:	10c4983a 	sll	r2,r2,r3
    5efc:	41000315 	stw	r4,12(r8)
    5f00:	41800215 	stw	r6,8(r8)
    5f04:	288ab03a 	or	r5,r5,r2
    5f08:	22000215 	stw	r8,8(r4)
    5f0c:	8809883a 	mov	r4,r17
    5f10:	51400115 	stw	r5,4(r10)
    5f14:	32000315 	stw	r8,12(r6)
    5f18:	dfc00217 	ldw	ra,8(sp)
    5f1c:	dc400117 	ldw	r17,4(sp)
    5f20:	dc000017 	ldw	r16,0(sp)
    5f24:	dec00304 	addi	sp,sp,12
    5f28:	000bf401 	jmpi	bf40 <__malloc_unlock>
    5f2c:	2880004c 	andi	r2,r5,1
    5f30:	3a4d883a 	add	r6,r7,r9
    5f34:	1000071e 	bne	r2,zero,5f54 <_free_r+0x218>
    5f38:	80bffe17 	ldw	r2,-8(r16)
    5f3c:	4091c83a 	sub	r8,r8,r2
    5f40:	41000317 	ldw	r4,12(r8)
    5f44:	40c00217 	ldw	r3,8(r8)
    5f48:	308d883a 	add	r6,r6,r2
    5f4c:	20c00215 	stw	r3,8(r4)
    5f50:	19000315 	stw	r4,12(r3)
    5f54:	00800074 	movhi	r2,1
    5f58:	10bfd604 	addi	r2,r2,-168
    5f5c:	11000017 	ldw	r4,0(r2)
    5f60:	30c00054 	ori	r3,r6,1
    5f64:	52000215 	stw	r8,8(r10)
    5f68:	40c00115 	stw	r3,4(r8)
    5f6c:	313fa036 	bltu	r6,r4,5df0 <_free_r+0xb4>
    5f70:	00800074 	movhi	r2,1
    5f74:	10868104 	addi	r2,r2,6660
    5f78:	11400017 	ldw	r5,0(r2)
    5f7c:	8809883a 	mov	r4,r17
    5f80:	0005c100 	call	5c10 <_malloc_trim_r>
    5f84:	003f9a06 	br	5df0 <_free_r+0xb4>
    5f88:	00800104 	movi	r2,4
    5f8c:	10c0072e 	bgeu	r2,r3,5fac <_free_r+0x270>
    5f90:	00800504 	movi	r2,20
    5f94:	10c01936 	bltu	r2,r3,5ffc <_free_r+0x2c0>
    5f98:	188016c4 	addi	r2,r3,91
    5f9c:	100690fa 	slli	r3,r2,3
    5fa0:	003fb306 	br	5e70 <_free_r+0x134>
    5fa4:	01400044 	movi	r5,1
    5fa8:	003f7e06 	br	5da4 <_free_r+0x68>
    5fac:	3804d1ba 	srli	r2,r7,6
    5fb0:	10800e04 	addi	r2,r2,56
    5fb4:	100690fa 	slli	r3,r2,3
    5fb8:	003fad06 	br	5e70 <_free_r+0x134>
    5fbc:	22000315 	stw	r8,12(r4)
    5fc0:	22000215 	stw	r8,8(r4)
    5fc4:	3a05883a 	add	r2,r7,r8
    5fc8:	38c00054 	ori	r3,r7,1
    5fcc:	11c00015 	stw	r7,0(r2)
    5fd0:	41000215 	stw	r4,8(r8)
    5fd4:	40c00115 	stw	r3,4(r8)
    5fd8:	41000315 	stw	r4,12(r8)
    5fdc:	003f8406 	br	5df0 <_free_r+0xb4>
    5fe0:	1005d0ba 	srai	r2,r2,2
    5fe4:	00c00044 	movi	r3,1
    5fe8:	51000117 	ldw	r4,4(r10)
    5fec:	1886983a 	sll	r3,r3,r2
    5ff0:	20c8b03a 	or	r4,r4,r3
    5ff4:	51000115 	stw	r4,4(r10)
    5ff8:	003fa706 	br	5e98 <_free_r+0x15c>
    5ffc:	00801504 	movi	r2,84
    6000:	10c00436 	bltu	r2,r3,6014 <_free_r+0x2d8>
    6004:	3804d33a 	srli	r2,r7,12
    6008:	10801b84 	addi	r2,r2,110
    600c:	100690fa 	slli	r3,r2,3
    6010:	003f9706 	br	5e70 <_free_r+0x134>
    6014:	00805504 	movi	r2,340
    6018:	10c00436 	bltu	r2,r3,602c <_free_r+0x2f0>
    601c:	3804d3fa 	srli	r2,r7,15
    6020:	10801dc4 	addi	r2,r2,119
    6024:	100690fa 	slli	r3,r2,3
    6028:	003f9106 	br	5e70 <_free_r+0x134>
    602c:	00815504 	movi	r2,1364
    6030:	10c0032e 	bgeu	r2,r3,6040 <_free_r+0x304>
    6034:	00801f84 	movi	r2,126
    6038:	00c0fc04 	movi	r3,1008
    603c:	003f8c06 	br	5e70 <_free_r+0x134>
    6040:	3804d4ba 	srli	r2,r7,18
    6044:	10801f04 	addi	r2,r2,124
    6048:	100690fa 	slli	r3,r2,3
    604c:	003f8806 	br	5e70 <_free_r+0x134>

00006050 <__sfvwrite_r>:
    6050:	30800217 	ldw	r2,8(r6)
    6054:	defff504 	addi	sp,sp,-44
    6058:	df000915 	stw	fp,36(sp)
    605c:	dd800715 	stw	r22,28(sp)
    6060:	dc800315 	stw	r18,12(sp)
    6064:	dfc00a15 	stw	ra,40(sp)
    6068:	ddc00815 	stw	r23,32(sp)
    606c:	dd400615 	stw	r21,24(sp)
    6070:	dd000515 	stw	r20,20(sp)
    6074:	dcc00415 	stw	r19,16(sp)
    6078:	dc400215 	stw	r17,8(sp)
    607c:	dc000115 	stw	r16,4(sp)
    6080:	302d883a 	mov	r22,r6
    6084:	2039883a 	mov	fp,r4
    6088:	2825883a 	mov	r18,r5
    608c:	10001c26 	beq	r2,zero,6100 <__sfvwrite_r+0xb0>
    6090:	29c0030b 	ldhu	r7,12(r5)
    6094:	3880020c 	andi	r2,r7,8
    6098:	10002726 	beq	r2,zero,6138 <__sfvwrite_r+0xe8>
    609c:	28800417 	ldw	r2,16(r5)
    60a0:	10002526 	beq	r2,zero,6138 <__sfvwrite_r+0xe8>
    60a4:	3880008c 	andi	r2,r7,2
    60a8:	b5400017 	ldw	r21,0(r22)
    60ac:	10002826 	beq	r2,zero,6150 <__sfvwrite_r+0x100>
    60b0:	0021883a 	mov	r16,zero
    60b4:	0023883a 	mov	r17,zero
    60b8:	880d883a 	mov	r6,r17
    60bc:	e009883a 	mov	r4,fp
    60c0:	00810004 	movi	r2,1024
    60c4:	80006e26 	beq	r16,zero,6280 <__sfvwrite_r+0x230>
    60c8:	800f883a 	mov	r7,r16
    60cc:	91400717 	ldw	r5,28(r18)
    60d0:	1400012e 	bgeu	r2,r16,60d8 <__sfvwrite_r+0x88>
    60d4:	100f883a 	mov	r7,r2
    60d8:	90c00917 	ldw	r3,36(r18)
    60dc:	183ee83a 	callr	r3
    60e0:	1007883a 	mov	r3,r2
    60e4:	80a1c83a 	sub	r16,r16,r2
    60e8:	88a3883a 	add	r17,r17,r2
    60ec:	00806d0e 	bge	zero,r2,62a4 <__sfvwrite_r+0x254>
    60f0:	b0800217 	ldw	r2,8(r22)
    60f4:	10c5c83a 	sub	r2,r2,r3
    60f8:	b0800215 	stw	r2,8(r22)
    60fc:	103fee1e 	bne	r2,zero,60b8 <__sfvwrite_r+0x68>
    6100:	0009883a 	mov	r4,zero
    6104:	2005883a 	mov	r2,r4
    6108:	dfc00a17 	ldw	ra,40(sp)
    610c:	df000917 	ldw	fp,36(sp)
    6110:	ddc00817 	ldw	r23,32(sp)
    6114:	dd800717 	ldw	r22,28(sp)
    6118:	dd400617 	ldw	r21,24(sp)
    611c:	dd000517 	ldw	r20,20(sp)
    6120:	dcc00417 	ldw	r19,16(sp)
    6124:	dc800317 	ldw	r18,12(sp)
    6128:	dc400217 	ldw	r17,8(sp)
    612c:	dc000117 	ldw	r16,4(sp)
    6130:	dec00b04 	addi	sp,sp,44
    6134:	f800283a 	ret
    6138:	0003db80 	call	3db8 <__swsetup_r>
    613c:	1000e41e 	bne	r2,zero,64d0 <__sfvwrite_r+0x480>
    6140:	91c0030b 	ldhu	r7,12(r18)
    6144:	b5400017 	ldw	r21,0(r22)
    6148:	3880008c 	andi	r2,r7,2
    614c:	103fd81e 	bne	r2,zero,60b0 <__sfvwrite_r+0x60>
    6150:	3880004c 	andi	r2,r7,1
    6154:	1005003a 	cmpeq	r2,r2,zero
    6158:	10005726 	beq	r2,zero,62b8 <__sfvwrite_r+0x268>
    615c:	0029883a 	mov	r20,zero
    6160:	002f883a 	mov	r23,zero
    6164:	a0004226 	beq	r20,zero,6270 <__sfvwrite_r+0x220>
    6168:	3880800c 	andi	r2,r7,512
    616c:	94000217 	ldw	r16,8(r18)
    6170:	10008b26 	beq	r2,zero,63a0 <__sfvwrite_r+0x350>
    6174:	800d883a 	mov	r6,r16
    6178:	a400a536 	bltu	r20,r16,6410 <__sfvwrite_r+0x3c0>
    617c:	3881200c 	andi	r2,r7,1152
    6180:	10002726 	beq	r2,zero,6220 <__sfvwrite_r+0x1d0>
    6184:	90800517 	ldw	r2,20(r18)
    6188:	92000417 	ldw	r8,16(r18)
    618c:	91400017 	ldw	r5,0(r18)
    6190:	1087883a 	add	r3,r2,r2
    6194:	1887883a 	add	r3,r3,r2
    6198:	1808d7fa 	srli	r4,r3,31
    619c:	2a21c83a 	sub	r16,r5,r8
    61a0:	80800044 	addi	r2,r16,1
    61a4:	20c9883a 	add	r4,r4,r3
    61a8:	2027d07a 	srai	r19,r4,1
    61ac:	a085883a 	add	r2,r20,r2
    61b0:	980d883a 	mov	r6,r19
    61b4:	9880022e 	bgeu	r19,r2,61c0 <__sfvwrite_r+0x170>
    61b8:	1027883a 	mov	r19,r2
    61bc:	100d883a 	mov	r6,r2
    61c0:	3881000c 	andi	r2,r7,1024
    61c4:	1000b826 	beq	r2,zero,64a8 <__sfvwrite_r+0x458>
    61c8:	300b883a 	mov	r5,r6
    61cc:	e009883a 	mov	r4,fp
    61d0:	00068c40 	call	68c4 <_malloc_r>
    61d4:	10003126 	beq	r2,zero,629c <__sfvwrite_r+0x24c>
    61d8:	91400417 	ldw	r5,16(r18)
    61dc:	1009883a 	mov	r4,r2
    61e0:	800d883a 	mov	r6,r16
    61e4:	1023883a 	mov	r17,r2
    61e8:	00070e80 	call	70e8 <memcpy>
    61ec:	90c0030b 	ldhu	r3,12(r18)
    61f0:	00beffc4 	movi	r2,-1025
    61f4:	1886703a 	and	r3,r3,r2
    61f8:	18c02014 	ori	r3,r3,128
    61fc:	90c0030d 	sth	r3,12(r18)
    6200:	9c07c83a 	sub	r3,r19,r16
    6204:	8c05883a 	add	r2,r17,r16
    6208:	a00d883a 	mov	r6,r20
    620c:	a021883a 	mov	r16,r20
    6210:	90800015 	stw	r2,0(r18)
    6214:	90c00215 	stw	r3,8(r18)
    6218:	94400415 	stw	r17,16(r18)
    621c:	94c00515 	stw	r19,20(r18)
    6220:	91000017 	ldw	r4,0(r18)
    6224:	b80b883a 	mov	r5,r23
    6228:	a023883a 	mov	r17,r20
    622c:	00071880 	call	7188 <memmove>
    6230:	90c00217 	ldw	r3,8(r18)
    6234:	90800017 	ldw	r2,0(r18)
    6238:	a027883a 	mov	r19,r20
    623c:	1c07c83a 	sub	r3,r3,r16
    6240:	1405883a 	add	r2,r2,r16
    6244:	90c00215 	stw	r3,8(r18)
    6248:	a021883a 	mov	r16,r20
    624c:	90800015 	stw	r2,0(r18)
    6250:	b0800217 	ldw	r2,8(r22)
    6254:	1405c83a 	sub	r2,r2,r16
    6258:	b0800215 	stw	r2,8(r22)
    625c:	103fa826 	beq	r2,zero,6100 <__sfvwrite_r+0xb0>
    6260:	a469c83a 	sub	r20,r20,r17
    6264:	91c0030b 	ldhu	r7,12(r18)
    6268:	bcef883a 	add	r23,r23,r19
    626c:	a03fbe1e 	bne	r20,zero,6168 <__sfvwrite_r+0x118>
    6270:	adc00017 	ldw	r23,0(r21)
    6274:	ad000117 	ldw	r20,4(r21)
    6278:	ad400204 	addi	r21,r21,8
    627c:	003fb906 	br	6164 <__sfvwrite_r+0x114>
    6280:	ac400017 	ldw	r17,0(r21)
    6284:	ac000117 	ldw	r16,4(r21)
    6288:	ad400204 	addi	r21,r21,8
    628c:	003f8a06 	br	60b8 <__sfvwrite_r+0x68>
    6290:	91400417 	ldw	r5,16(r18)
    6294:	e009883a 	mov	r4,fp
    6298:	0005d3c0 	call	5d3c <_free_r>
    629c:	00800304 	movi	r2,12
    62a0:	e0800015 	stw	r2,0(fp)
    62a4:	9080030b 	ldhu	r2,12(r18)
    62a8:	013fffc4 	movi	r4,-1
    62ac:	10801014 	ori	r2,r2,64
    62b0:	9080030d 	sth	r2,12(r18)
    62b4:	003f9306 	br	6104 <__sfvwrite_r+0xb4>
    62b8:	0027883a 	mov	r19,zero
    62bc:	002f883a 	mov	r23,zero
    62c0:	d8000015 	stw	zero,0(sp)
    62c4:	0029883a 	mov	r20,zero
    62c8:	98001e26 	beq	r19,zero,6344 <__sfvwrite_r+0x2f4>
    62cc:	d8c00017 	ldw	r3,0(sp)
    62d0:	1804c03a 	cmpne	r2,r3,zero
    62d4:	10005e26 	beq	r2,zero,6450 <__sfvwrite_r+0x400>
    62d8:	9821883a 	mov	r16,r19
    62dc:	a4c0012e 	bgeu	r20,r19,62e4 <__sfvwrite_r+0x294>
    62e0:	a021883a 	mov	r16,r20
    62e4:	91000017 	ldw	r4,0(r18)
    62e8:	90800417 	ldw	r2,16(r18)
    62ec:	91800217 	ldw	r6,8(r18)
    62f0:	91c00517 	ldw	r7,20(r18)
    62f4:	1100022e 	bgeu	r2,r4,6300 <__sfvwrite_r+0x2b0>
    62f8:	31e3883a 	add	r17,r6,r7
    62fc:	8c001616 	blt	r17,r16,6358 <__sfvwrite_r+0x308>
    6300:	81c03816 	blt	r16,r7,63e4 <__sfvwrite_r+0x394>
    6304:	90c00917 	ldw	r3,36(r18)
    6308:	91400717 	ldw	r5,28(r18)
    630c:	e009883a 	mov	r4,fp
    6310:	b80d883a 	mov	r6,r23
    6314:	183ee83a 	callr	r3
    6318:	1023883a 	mov	r17,r2
    631c:	00bfe10e 	bge	zero,r2,62a4 <__sfvwrite_r+0x254>
    6320:	a469c83a 	sub	r20,r20,r17
    6324:	a0001826 	beq	r20,zero,6388 <__sfvwrite_r+0x338>
    6328:	b0800217 	ldw	r2,8(r22)
    632c:	1445c83a 	sub	r2,r2,r17
    6330:	b0800215 	stw	r2,8(r22)
    6334:	103f7226 	beq	r2,zero,6100 <__sfvwrite_r+0xb0>
    6338:	9c67c83a 	sub	r19,r19,r17
    633c:	bc6f883a 	add	r23,r23,r17
    6340:	983fe21e 	bne	r19,zero,62cc <__sfvwrite_r+0x27c>
    6344:	adc00017 	ldw	r23,0(r21)
    6348:	acc00117 	ldw	r19,4(r21)
    634c:	ad400204 	addi	r21,r21,8
    6350:	d8000015 	stw	zero,0(sp)
    6354:	003fdc06 	br	62c8 <__sfvwrite_r+0x278>
    6358:	b80b883a 	mov	r5,r23
    635c:	880d883a 	mov	r6,r17
    6360:	00071880 	call	7188 <memmove>
    6364:	90c00017 	ldw	r3,0(r18)
    6368:	e009883a 	mov	r4,fp
    636c:	900b883a 	mov	r5,r18
    6370:	1c47883a 	add	r3,r3,r17
    6374:	90c00015 	stw	r3,0(r18)
    6378:	00056ec0 	call	56ec <_fflush_r>
    637c:	103fc91e 	bne	r2,zero,62a4 <__sfvwrite_r+0x254>
    6380:	a469c83a 	sub	r20,r20,r17
    6384:	a03fe81e 	bne	r20,zero,6328 <__sfvwrite_r+0x2d8>
    6388:	e009883a 	mov	r4,fp
    638c:	900b883a 	mov	r5,r18
    6390:	00056ec0 	call	56ec <_fflush_r>
    6394:	103fc31e 	bne	r2,zero,62a4 <__sfvwrite_r+0x254>
    6398:	d8000015 	stw	zero,0(sp)
    639c:	003fe206 	br	6328 <__sfvwrite_r+0x2d8>
    63a0:	91000017 	ldw	r4,0(r18)
    63a4:	90800417 	ldw	r2,16(r18)
    63a8:	1100022e 	bgeu	r2,r4,63b4 <__sfvwrite_r+0x364>
    63ac:	8023883a 	mov	r17,r16
    63b0:	85003136 	bltu	r16,r20,6478 <__sfvwrite_r+0x428>
    63b4:	91c00517 	ldw	r7,20(r18)
    63b8:	a1c01836 	bltu	r20,r7,641c <__sfvwrite_r+0x3cc>
    63bc:	90c00917 	ldw	r3,36(r18)
    63c0:	91400717 	ldw	r5,28(r18)
    63c4:	e009883a 	mov	r4,fp
    63c8:	b80d883a 	mov	r6,r23
    63cc:	183ee83a 	callr	r3
    63d0:	1021883a 	mov	r16,r2
    63d4:	00bfb30e 	bge	zero,r2,62a4 <__sfvwrite_r+0x254>
    63d8:	1023883a 	mov	r17,r2
    63dc:	1027883a 	mov	r19,r2
    63e0:	003f9b06 	br	6250 <__sfvwrite_r+0x200>
    63e4:	b80b883a 	mov	r5,r23
    63e8:	800d883a 	mov	r6,r16
    63ec:	00071880 	call	7188 <memmove>
    63f0:	90c00217 	ldw	r3,8(r18)
    63f4:	90800017 	ldw	r2,0(r18)
    63f8:	8023883a 	mov	r17,r16
    63fc:	1c07c83a 	sub	r3,r3,r16
    6400:	1405883a 	add	r2,r2,r16
    6404:	90c00215 	stw	r3,8(r18)
    6408:	90800015 	stw	r2,0(r18)
    640c:	003fc406 	br	6320 <__sfvwrite_r+0x2d0>
    6410:	a00d883a 	mov	r6,r20
    6414:	a021883a 	mov	r16,r20
    6418:	003f8106 	br	6220 <__sfvwrite_r+0x1d0>
    641c:	b80b883a 	mov	r5,r23
    6420:	a00d883a 	mov	r6,r20
    6424:	00071880 	call	7188 <memmove>
    6428:	90c00217 	ldw	r3,8(r18)
    642c:	90800017 	ldw	r2,0(r18)
    6430:	a021883a 	mov	r16,r20
    6434:	1d07c83a 	sub	r3,r3,r20
    6438:	1505883a 	add	r2,r2,r20
    643c:	a023883a 	mov	r17,r20
    6440:	a027883a 	mov	r19,r20
    6444:	90c00215 	stw	r3,8(r18)
    6448:	90800015 	stw	r2,0(r18)
    644c:	003f8006 	br	6250 <__sfvwrite_r+0x200>
    6450:	b809883a 	mov	r4,r23
    6454:	01400284 	movi	r5,10
    6458:	980d883a 	mov	r6,r19
    645c:	00070040 	call	7004 <memchr>
    6460:	10001726 	beq	r2,zero,64c0 <__sfvwrite_r+0x470>
    6464:	15c5c83a 	sub	r2,r2,r23
    6468:	15000044 	addi	r20,r2,1
    646c:	00800044 	movi	r2,1
    6470:	d8800015 	stw	r2,0(sp)
    6474:	003f9806 	br	62d8 <__sfvwrite_r+0x288>
    6478:	b80b883a 	mov	r5,r23
    647c:	800d883a 	mov	r6,r16
    6480:	00071880 	call	7188 <memmove>
    6484:	90c00017 	ldw	r3,0(r18)
    6488:	e009883a 	mov	r4,fp
    648c:	900b883a 	mov	r5,r18
    6490:	1c07883a 	add	r3,r3,r16
    6494:	90c00015 	stw	r3,0(r18)
    6498:	8027883a 	mov	r19,r16
    649c:	00056ec0 	call	56ec <_fflush_r>
    64a0:	103f6b26 	beq	r2,zero,6250 <__sfvwrite_r+0x200>
    64a4:	003f7f06 	br	62a4 <__sfvwrite_r+0x254>
    64a8:	400b883a 	mov	r5,r8
    64ac:	e009883a 	mov	r4,fp
    64b0:	000838c0 	call	838c <_realloc_r>
    64b4:	103f7626 	beq	r2,zero,6290 <__sfvwrite_r+0x240>
    64b8:	1023883a 	mov	r17,r2
    64bc:	003f5006 	br	6200 <__sfvwrite_r+0x1b0>
    64c0:	00c00044 	movi	r3,1
    64c4:	9d000044 	addi	r20,r19,1
    64c8:	d8c00015 	stw	r3,0(sp)
    64cc:	003f8206 	br	62d8 <__sfvwrite_r+0x288>
    64d0:	9080030b 	ldhu	r2,12(r18)
    64d4:	00c00244 	movi	r3,9
    64d8:	013fffc4 	movi	r4,-1
    64dc:	10801014 	ori	r2,r2,64
    64e0:	9080030d 	sth	r2,12(r18)
    64e4:	e0c00015 	stw	r3,0(fp)
    64e8:	003f0606 	br	6104 <__sfvwrite_r+0xb4>

000064ec <_fwalk_reent>:
    64ec:	defff704 	addi	sp,sp,-36
    64f0:	dcc00315 	stw	r19,12(sp)
    64f4:	24c0b804 	addi	r19,r4,736
    64f8:	dd800615 	stw	r22,24(sp)
    64fc:	dd400515 	stw	r21,20(sp)
    6500:	dfc00815 	stw	ra,32(sp)
    6504:	ddc00715 	stw	r23,28(sp)
    6508:	dd000415 	stw	r20,16(sp)
    650c:	dc800215 	stw	r18,8(sp)
    6510:	dc400115 	stw	r17,4(sp)
    6514:	dc000015 	stw	r16,0(sp)
    6518:	202b883a 	mov	r21,r4
    651c:	282d883a 	mov	r22,r5
    6520:	00059740 	call	5974 <__sfp_lock_acquire>
    6524:	98002126 	beq	r19,zero,65ac <_fwalk_reent+0xc0>
    6528:	002f883a 	mov	r23,zero
    652c:	9c800117 	ldw	r18,4(r19)
    6530:	9c000217 	ldw	r16,8(r19)
    6534:	90bfffc4 	addi	r2,r18,-1
    6538:	10000d16 	blt	r2,zero,6570 <_fwalk_reent+0x84>
    653c:	0023883a 	mov	r17,zero
    6540:	053fffc4 	movi	r20,-1
    6544:	8080030f 	ldh	r2,12(r16)
    6548:	8c400044 	addi	r17,r17,1
    654c:	10000626 	beq	r2,zero,6568 <_fwalk_reent+0x7c>
    6550:	8080038f 	ldh	r2,14(r16)
    6554:	800b883a 	mov	r5,r16
    6558:	a809883a 	mov	r4,r21
    655c:	15000226 	beq	r2,r20,6568 <_fwalk_reent+0x7c>
    6560:	b03ee83a 	callr	r22
    6564:	b8aeb03a 	or	r23,r23,r2
    6568:	84001704 	addi	r16,r16,92
    656c:	947ff51e 	bne	r18,r17,6544 <_fwalk_reent+0x58>
    6570:	9cc00017 	ldw	r19,0(r19)
    6574:	983fed1e 	bne	r19,zero,652c <_fwalk_reent+0x40>
    6578:	00059780 	call	5978 <__sfp_lock_release>
    657c:	b805883a 	mov	r2,r23
    6580:	dfc00817 	ldw	ra,32(sp)
    6584:	ddc00717 	ldw	r23,28(sp)
    6588:	dd800617 	ldw	r22,24(sp)
    658c:	dd400517 	ldw	r21,20(sp)
    6590:	dd000417 	ldw	r20,16(sp)
    6594:	dcc00317 	ldw	r19,12(sp)
    6598:	dc800217 	ldw	r18,8(sp)
    659c:	dc400117 	ldw	r17,4(sp)
    65a0:	dc000017 	ldw	r16,0(sp)
    65a4:	dec00904 	addi	sp,sp,36
    65a8:	f800283a 	ret
    65ac:	002f883a 	mov	r23,zero
    65b0:	003ff106 	br	6578 <_fwalk_reent+0x8c>

000065b4 <_fwalk>:
    65b4:	defff804 	addi	sp,sp,-32
    65b8:	dcc00315 	stw	r19,12(sp)
    65bc:	24c0b804 	addi	r19,r4,736
    65c0:	dd400515 	stw	r21,20(sp)
    65c4:	dfc00715 	stw	ra,28(sp)
    65c8:	dd800615 	stw	r22,24(sp)
    65cc:	dd000415 	stw	r20,16(sp)
    65d0:	dc800215 	stw	r18,8(sp)
    65d4:	dc400115 	stw	r17,4(sp)
    65d8:	dc000015 	stw	r16,0(sp)
    65dc:	282b883a 	mov	r21,r5
    65e0:	00059740 	call	5974 <__sfp_lock_acquire>
    65e4:	98001f26 	beq	r19,zero,6664 <_fwalk+0xb0>
    65e8:	002d883a 	mov	r22,zero
    65ec:	9c800117 	ldw	r18,4(r19)
    65f0:	9c000217 	ldw	r16,8(r19)
    65f4:	90bfffc4 	addi	r2,r18,-1
    65f8:	10000c16 	blt	r2,zero,662c <_fwalk+0x78>
    65fc:	0023883a 	mov	r17,zero
    6600:	053fffc4 	movi	r20,-1
    6604:	8080030f 	ldh	r2,12(r16)
    6608:	8c400044 	addi	r17,r17,1
    660c:	10000526 	beq	r2,zero,6624 <_fwalk+0x70>
    6610:	8080038f 	ldh	r2,14(r16)
    6614:	8009883a 	mov	r4,r16
    6618:	15000226 	beq	r2,r20,6624 <_fwalk+0x70>
    661c:	a83ee83a 	callr	r21
    6620:	b0acb03a 	or	r22,r22,r2
    6624:	84001704 	addi	r16,r16,92
    6628:	947ff61e 	bne	r18,r17,6604 <_fwalk+0x50>
    662c:	9cc00017 	ldw	r19,0(r19)
    6630:	983fee1e 	bne	r19,zero,65ec <_fwalk+0x38>
    6634:	00059780 	call	5978 <__sfp_lock_release>
    6638:	b005883a 	mov	r2,r22
    663c:	dfc00717 	ldw	ra,28(sp)
    6640:	dd800617 	ldw	r22,24(sp)
    6644:	dd400517 	ldw	r21,20(sp)
    6648:	dd000417 	ldw	r20,16(sp)
    664c:	dcc00317 	ldw	r19,12(sp)
    6650:	dc800217 	ldw	r18,8(sp)
    6654:	dc400117 	ldw	r17,4(sp)
    6658:	dc000017 	ldw	r16,0(sp)
    665c:	dec00804 	addi	sp,sp,32
    6660:	f800283a 	ret
    6664:	002d883a 	mov	r22,zero
    6668:	003ff206 	br	6634 <_fwalk+0x80>

0000666c <__locale_charset>:
    666c:	d0a00517 	ldw	r2,-32748(gp)
    6670:	f800283a 	ret

00006674 <_localeconv_r>:
    6674:	00800074 	movhi	r2,1
    6678:	10b8a404 	addi	r2,r2,-7536
    667c:	f800283a 	ret

00006680 <localeconv>:
    6680:	00800074 	movhi	r2,1
    6684:	10bfd204 	addi	r2,r2,-184
    6688:	11000017 	ldw	r4,0(r2)
    668c:	00066741 	jmpi	6674 <_localeconv_r>

00006690 <_setlocale_r>:
    6690:	defffc04 	addi	sp,sp,-16
    6694:	00c00074 	movhi	r3,1
    6698:	18f89f04 	addi	r3,r3,-7556
    669c:	dc800215 	stw	r18,8(sp)
    66a0:	dc400115 	stw	r17,4(sp)
    66a4:	dc000015 	stw	r16,0(sp)
    66a8:	2023883a 	mov	r17,r4
    66ac:	2825883a 	mov	r18,r5
    66b0:	dfc00315 	stw	ra,12(sp)
    66b4:	3021883a 	mov	r16,r6
    66b8:	3009883a 	mov	r4,r6
    66bc:	180b883a 	mov	r5,r3
    66c0:	30000926 	beq	r6,zero,66e8 <_setlocale_r+0x58>
    66c4:	0008bac0 	call	8bac <strcmp>
    66c8:	8009883a 	mov	r4,r16
    66cc:	01400074 	movhi	r5,1
    66d0:	29788a04 	addi	r5,r5,-7640
    66d4:	10000b1e 	bne	r2,zero,6704 <_setlocale_r+0x74>
    66d8:	8c000d15 	stw	r16,52(r17)
    66dc:	8c800c15 	stw	r18,48(r17)
    66e0:	00c00074 	movhi	r3,1
    66e4:	18f89f04 	addi	r3,r3,-7556
    66e8:	1805883a 	mov	r2,r3
    66ec:	dfc00317 	ldw	ra,12(sp)
    66f0:	dc800217 	ldw	r18,8(sp)
    66f4:	dc400117 	ldw	r17,4(sp)
    66f8:	dc000017 	ldw	r16,0(sp)
    66fc:	dec00404 	addi	sp,sp,16
    6700:	f800283a 	ret
    6704:	0008bac0 	call	8bac <strcmp>
    6708:	0007883a 	mov	r3,zero
    670c:	103ff226 	beq	r2,zero,66d8 <_setlocale_r+0x48>
    6710:	003ff506 	br	66e8 <_setlocale_r+0x58>

00006714 <setlocale>:
    6714:	01800074 	movhi	r6,1
    6718:	31bfd204 	addi	r6,r6,-184
    671c:	2007883a 	mov	r3,r4
    6720:	31000017 	ldw	r4,0(r6)
    6724:	280d883a 	mov	r6,r5
    6728:	180b883a 	mov	r5,r3
    672c:	00066901 	jmpi	6690 <_setlocale_r>

00006730 <__smakebuf_r>:
    6730:	2880030b 	ldhu	r2,12(r5)
    6734:	deffed04 	addi	sp,sp,-76
    6738:	dc401015 	stw	r17,64(sp)
    673c:	1080008c 	andi	r2,r2,2
    6740:	dc000f15 	stw	r16,60(sp)
    6744:	dfc01215 	stw	ra,72(sp)
    6748:	dc801115 	stw	r18,68(sp)
    674c:	2821883a 	mov	r16,r5
    6750:	2023883a 	mov	r17,r4
    6754:	10000b26 	beq	r2,zero,6784 <__smakebuf_r+0x54>
    6758:	28c010c4 	addi	r3,r5,67
    675c:	00800044 	movi	r2,1
    6760:	28800515 	stw	r2,20(r5)
    6764:	28c00415 	stw	r3,16(r5)
    6768:	28c00015 	stw	r3,0(r5)
    676c:	dfc01217 	ldw	ra,72(sp)
    6770:	dc801117 	ldw	r18,68(sp)
    6774:	dc401017 	ldw	r17,64(sp)
    6778:	dc000f17 	ldw	r16,60(sp)
    677c:	dec01304 	addi	sp,sp,76
    6780:	f800283a 	ret
    6784:	2940038f 	ldh	r5,14(r5)
    6788:	28002116 	blt	r5,zero,6810 <__smakebuf_r+0xe0>
    678c:	d80d883a 	mov	r6,sp
    6790:	0008f3c0 	call	8f3c <_fstat_r>
    6794:	10001e16 	blt	r2,zero,6810 <__smakebuf_r+0xe0>
    6798:	d8800117 	ldw	r2,4(sp)
    679c:	00e00014 	movui	r3,32768
    67a0:	113c000c 	andi	r4,r2,61440
    67a4:	20c03126 	beq	r4,r3,686c <__smakebuf_r+0x13c>
    67a8:	8080030b 	ldhu	r2,12(r16)
    67ac:	00c80004 	movi	r3,8192
    67b0:	10820014 	ori	r2,r2,2048
    67b4:	8080030d 	sth	r2,12(r16)
    67b8:	20c01e26 	beq	r4,r3,6834 <__smakebuf_r+0x104>
    67bc:	04810004 	movi	r18,1024
    67c0:	8809883a 	mov	r4,r17
    67c4:	900b883a 	mov	r5,r18
    67c8:	00068c40 	call	68c4 <_malloc_r>
    67cc:	1009883a 	mov	r4,r2
    67d0:	10003126 	beq	r2,zero,6898 <__smakebuf_r+0x168>
    67d4:	80c0030b 	ldhu	r3,12(r16)
    67d8:	00800034 	movhi	r2,0
    67dc:	10969a04 	addi	r2,r2,23144
    67e0:	88800f15 	stw	r2,60(r17)
    67e4:	18c02014 	ori	r3,r3,128
    67e8:	84800515 	stw	r18,20(r16)
    67ec:	80c0030d 	sth	r3,12(r16)
    67f0:	81000415 	stw	r4,16(r16)
    67f4:	81000015 	stw	r4,0(r16)
    67f8:	dfc01217 	ldw	ra,72(sp)
    67fc:	dc801117 	ldw	r18,68(sp)
    6800:	dc401017 	ldw	r17,64(sp)
    6804:	dc000f17 	ldw	r16,60(sp)
    6808:	dec01304 	addi	sp,sp,76
    680c:	f800283a 	ret
    6810:	80c0030b 	ldhu	r3,12(r16)
    6814:	1880200c 	andi	r2,r3,128
    6818:	10000426 	beq	r2,zero,682c <__smakebuf_r+0xfc>
    681c:	04801004 	movi	r18,64
    6820:	18820014 	ori	r2,r3,2048
    6824:	8080030d 	sth	r2,12(r16)
    6828:	003fe506 	br	67c0 <__smakebuf_r+0x90>
    682c:	04810004 	movi	r18,1024
    6830:	003ffb06 	br	6820 <__smakebuf_r+0xf0>
    6834:	8140038f 	ldh	r5,14(r16)
    6838:	8809883a 	mov	r4,r17
    683c:	0008fb00 	call	8fb0 <_isatty_r>
    6840:	103fde26 	beq	r2,zero,67bc <__smakebuf_r+0x8c>
    6844:	8080030b 	ldhu	r2,12(r16)
    6848:	80c010c4 	addi	r3,r16,67
    684c:	04810004 	movi	r18,1024
    6850:	10800054 	ori	r2,r2,1
    6854:	8080030d 	sth	r2,12(r16)
    6858:	00800044 	movi	r2,1
    685c:	80c00415 	stw	r3,16(r16)
    6860:	80800515 	stw	r2,20(r16)
    6864:	80c00015 	stw	r3,0(r16)
    6868:	003fd506 	br	67c0 <__smakebuf_r+0x90>
    686c:	80c00a17 	ldw	r3,40(r16)
    6870:	00800074 	movhi	r2,1
    6874:	10a29a04 	addi	r2,r2,-30104
    6878:	18bfcb1e 	bne	r3,r2,67a8 <__smakebuf_r+0x78>
    687c:	8080030b 	ldhu	r2,12(r16)
    6880:	00c10004 	movi	r3,1024
    6884:	1825883a 	mov	r18,r3
    6888:	10c4b03a 	or	r2,r2,r3
    688c:	8080030d 	sth	r2,12(r16)
    6890:	80c01315 	stw	r3,76(r16)
    6894:	003fca06 	br	67c0 <__smakebuf_r+0x90>
    6898:	8100030b 	ldhu	r4,12(r16)
    689c:	2080800c 	andi	r2,r4,512
    68a0:	103fb21e 	bne	r2,zero,676c <__smakebuf_r+0x3c>
    68a4:	80c010c4 	addi	r3,r16,67
    68a8:	21000094 	ori	r4,r4,2
    68ac:	00800044 	movi	r2,1
    68b0:	80800515 	stw	r2,20(r16)
    68b4:	8100030d 	sth	r4,12(r16)
    68b8:	80c00415 	stw	r3,16(r16)
    68bc:	80c00015 	stw	r3,0(r16)
    68c0:	003faa06 	br	676c <__smakebuf_r+0x3c>

000068c4 <_malloc_r>:
    68c4:	defff604 	addi	sp,sp,-40
    68c8:	28c002c4 	addi	r3,r5,11
    68cc:	00800584 	movi	r2,22
    68d0:	dc800215 	stw	r18,8(sp)
    68d4:	dfc00915 	stw	ra,36(sp)
    68d8:	df000815 	stw	fp,32(sp)
    68dc:	ddc00715 	stw	r23,28(sp)
    68e0:	dd800615 	stw	r22,24(sp)
    68e4:	dd400515 	stw	r21,20(sp)
    68e8:	dd000415 	stw	r20,16(sp)
    68ec:	dcc00315 	stw	r19,12(sp)
    68f0:	dc400115 	stw	r17,4(sp)
    68f4:	dc000015 	stw	r16,0(sp)
    68f8:	2025883a 	mov	r18,r4
    68fc:	10c01236 	bltu	r2,r3,6948 <_malloc_r+0x84>
    6900:	04400404 	movi	r17,16
    6904:	8940142e 	bgeu	r17,r5,6958 <_malloc_r+0x94>
    6908:	00800304 	movi	r2,12
    690c:	0007883a 	mov	r3,zero
    6910:	90800015 	stw	r2,0(r18)
    6914:	1805883a 	mov	r2,r3
    6918:	dfc00917 	ldw	ra,36(sp)
    691c:	df000817 	ldw	fp,32(sp)
    6920:	ddc00717 	ldw	r23,28(sp)
    6924:	dd800617 	ldw	r22,24(sp)
    6928:	dd400517 	ldw	r21,20(sp)
    692c:	dd000417 	ldw	r20,16(sp)
    6930:	dcc00317 	ldw	r19,12(sp)
    6934:	dc800217 	ldw	r18,8(sp)
    6938:	dc400117 	ldw	r17,4(sp)
    693c:	dc000017 	ldw	r16,0(sp)
    6940:	dec00a04 	addi	sp,sp,40
    6944:	f800283a 	ret
    6948:	00bffe04 	movi	r2,-8
    694c:	18a2703a 	and	r17,r3,r2
    6950:	883fed16 	blt	r17,zero,6908 <_malloc_r+0x44>
    6954:	897fec36 	bltu	r17,r5,6908 <_malloc_r+0x44>
    6958:	9009883a 	mov	r4,r18
    695c:	000bf200 	call	bf20 <__malloc_lock>
    6960:	00807dc4 	movi	r2,503
    6964:	14402b2e 	bgeu	r2,r17,6a14 <_malloc_r+0x150>
    6968:	8806d27a 	srli	r3,r17,9
    696c:	18003f1e 	bne	r3,zero,6a6c <_malloc_r+0x1a8>
    6970:	880cd0fa 	srli	r6,r17,3
    6974:	300490fa 	slli	r2,r6,3
    6978:	02c00074 	movhi	r11,1
    697c:	5afa4c04 	addi	r11,r11,-5840
    6980:	12cb883a 	add	r5,r2,r11
    6984:	2c000317 	ldw	r16,12(r5)
    6988:	580f883a 	mov	r7,r11
    698c:	2c00041e 	bne	r5,r16,69a0 <_malloc_r+0xdc>
    6990:	00000a06 	br	69bc <_malloc_r+0xf8>
    6994:	1800860e 	bge	r3,zero,6bb0 <_malloc_r+0x2ec>
    6998:	84000317 	ldw	r16,12(r16)
    699c:	2c000726 	beq	r5,r16,69bc <_malloc_r+0xf8>
    69a0:	80800117 	ldw	r2,4(r16)
    69a4:	00ffff04 	movi	r3,-4
    69a8:	10c8703a 	and	r4,r2,r3
    69ac:	2447c83a 	sub	r3,r4,r17
    69b0:	008003c4 	movi	r2,15
    69b4:	10fff70e 	bge	r2,r3,6994 <_malloc_r+0xd0>
    69b8:	31bfffc4 	addi	r6,r6,-1
    69bc:	32400044 	addi	r9,r6,1
    69c0:	02800074 	movhi	r10,1
    69c4:	52ba4e04 	addi	r10,r10,-5832
    69c8:	54000217 	ldw	r16,8(r10)
    69cc:	8280a026 	beq	r16,r10,6c50 <_malloc_r+0x38c>
    69d0:	80800117 	ldw	r2,4(r16)
    69d4:	00ffff04 	movi	r3,-4
    69d8:	10ca703a 	and	r5,r2,r3
    69dc:	2c4dc83a 	sub	r6,r5,r17
    69e0:	008003c4 	movi	r2,15
    69e4:	11808316 	blt	r2,r6,6bf4 <_malloc_r+0x330>
    69e8:	52800315 	stw	r10,12(r10)
    69ec:	52800215 	stw	r10,8(r10)
    69f0:	30002916 	blt	r6,zero,6a98 <_malloc_r+0x1d4>
    69f4:	8147883a 	add	r3,r16,r5
    69f8:	18800117 	ldw	r2,4(r3)
    69fc:	9009883a 	mov	r4,r18
    6a00:	10800054 	ori	r2,r2,1
    6a04:	18800115 	stw	r2,4(r3)
    6a08:	000bf400 	call	bf40 <__malloc_unlock>
    6a0c:	80c00204 	addi	r3,r16,8
    6a10:	003fc006 	br	6914 <_malloc_r+0x50>
    6a14:	02c00074 	movhi	r11,1
    6a18:	5afa4c04 	addi	r11,r11,-5840
    6a1c:	8ac5883a 	add	r2,r17,r11
    6a20:	14000317 	ldw	r16,12(r2)
    6a24:	580f883a 	mov	r7,r11
    6a28:	8806d0fa 	srli	r3,r17,3
    6a2c:	14006c26 	beq	r2,r16,6be0 <_malloc_r+0x31c>
    6a30:	80c00117 	ldw	r3,4(r16)
    6a34:	00bfff04 	movi	r2,-4
    6a38:	81800317 	ldw	r6,12(r16)
    6a3c:	1886703a 	and	r3,r3,r2
    6a40:	80c7883a 	add	r3,r16,r3
    6a44:	18800117 	ldw	r2,4(r3)
    6a48:	81400217 	ldw	r5,8(r16)
    6a4c:	9009883a 	mov	r4,r18
    6a50:	10800054 	ori	r2,r2,1
    6a54:	18800115 	stw	r2,4(r3)
    6a58:	31400215 	stw	r5,8(r6)
    6a5c:	29800315 	stw	r6,12(r5)
    6a60:	000bf400 	call	bf40 <__malloc_unlock>
    6a64:	80c00204 	addi	r3,r16,8
    6a68:	003faa06 	br	6914 <_malloc_r+0x50>
    6a6c:	00800104 	movi	r2,4
    6a70:	10c0052e 	bgeu	r2,r3,6a88 <_malloc_r+0x1c4>
    6a74:	00800504 	movi	r2,20
    6a78:	10c07836 	bltu	r2,r3,6c5c <_malloc_r+0x398>
    6a7c:	198016c4 	addi	r6,r3,91
    6a80:	300490fa 	slli	r2,r6,3
    6a84:	003fbc06 	br	6978 <_malloc_r+0xb4>
    6a88:	8804d1ba 	srli	r2,r17,6
    6a8c:	11800e04 	addi	r6,r2,56
    6a90:	300490fa 	slli	r2,r6,3
    6a94:	003fb806 	br	6978 <_malloc_r+0xb4>
    6a98:	00807fc4 	movi	r2,511
    6a9c:	1140bb36 	bltu	r2,r5,6d8c <_malloc_r+0x4c8>
    6aa0:	2806d0fa 	srli	r3,r5,3
    6aa4:	573ffe04 	addi	fp,r10,-8
    6aa8:	00800044 	movi	r2,1
    6aac:	180890fa 	slli	r4,r3,3
    6ab0:	1807d0ba 	srai	r3,r3,2
    6ab4:	e1c00117 	ldw	r7,4(fp)
    6ab8:	5909883a 	add	r4,r11,r4
    6abc:	21400217 	ldw	r5,8(r4)
    6ac0:	10c4983a 	sll	r2,r2,r3
    6ac4:	81000315 	stw	r4,12(r16)
    6ac8:	81400215 	stw	r5,8(r16)
    6acc:	388eb03a 	or	r7,r7,r2
    6ad0:	2c000315 	stw	r16,12(r5)
    6ad4:	24000215 	stw	r16,8(r4)
    6ad8:	e1c00115 	stw	r7,4(fp)
    6adc:	4807883a 	mov	r3,r9
    6ae0:	4800cd16 	blt	r9,zero,6e18 <_malloc_r+0x554>
    6ae4:	1807d0ba 	srai	r3,r3,2
    6ae8:	00800044 	movi	r2,1
    6aec:	10c8983a 	sll	r4,r2,r3
    6af0:	39004436 	bltu	r7,r4,6c04 <_malloc_r+0x340>
    6af4:	21c4703a 	and	r2,r4,r7
    6af8:	10000a1e 	bne	r2,zero,6b24 <_malloc_r+0x260>
    6afc:	2109883a 	add	r4,r4,r4
    6b00:	00bfff04 	movi	r2,-4
    6b04:	4884703a 	and	r2,r9,r2
    6b08:	3906703a 	and	r3,r7,r4
    6b0c:	12400104 	addi	r9,r2,4
    6b10:	1800041e 	bne	r3,zero,6b24 <_malloc_r+0x260>
    6b14:	2109883a 	add	r4,r4,r4
    6b18:	3904703a 	and	r2,r7,r4
    6b1c:	4a400104 	addi	r9,r9,4
    6b20:	103ffc26 	beq	r2,zero,6b14 <_malloc_r+0x250>
    6b24:	480490fa 	slli	r2,r9,3
    6b28:	4819883a 	mov	r12,r9
    6b2c:	023fff04 	movi	r8,-4
    6b30:	589b883a 	add	r13,r11,r2
    6b34:	6807883a 	mov	r3,r13
    6b38:	014003c4 	movi	r5,15
    6b3c:	1c000317 	ldw	r16,12(r3)
    6b40:	1c00041e 	bne	r3,r16,6b54 <_malloc_r+0x290>
    6b44:	0000a706 	br	6de4 <_malloc_r+0x520>
    6b48:	3000ab0e 	bge	r6,zero,6df8 <_malloc_r+0x534>
    6b4c:	84000317 	ldw	r16,12(r16)
    6b50:	1c00a426 	beq	r3,r16,6de4 <_malloc_r+0x520>
    6b54:	80800117 	ldw	r2,4(r16)
    6b58:	1204703a 	and	r2,r2,r8
    6b5c:	144dc83a 	sub	r6,r2,r17
    6b60:	29bff90e 	bge	r5,r6,6b48 <_malloc_r+0x284>
    6b64:	81000317 	ldw	r4,12(r16)
    6b68:	80c00217 	ldw	r3,8(r16)
    6b6c:	89400054 	ori	r5,r17,1
    6b70:	8445883a 	add	r2,r16,r17
    6b74:	20c00215 	stw	r3,8(r4)
    6b78:	19000315 	stw	r4,12(r3)
    6b7c:	81400115 	stw	r5,4(r16)
    6b80:	1187883a 	add	r3,r2,r6
    6b84:	31000054 	ori	r4,r6,1
    6b88:	50800315 	stw	r2,12(r10)
    6b8c:	50800215 	stw	r2,8(r10)
    6b90:	19800015 	stw	r6,0(r3)
    6b94:	11000115 	stw	r4,4(r2)
    6b98:	12800215 	stw	r10,8(r2)
    6b9c:	12800315 	stw	r10,12(r2)
    6ba0:	9009883a 	mov	r4,r18
    6ba4:	000bf400 	call	bf40 <__malloc_unlock>
    6ba8:	80c00204 	addi	r3,r16,8
    6bac:	003f5906 	br	6914 <_malloc_r+0x50>
    6bb0:	8109883a 	add	r4,r16,r4
    6bb4:	20800117 	ldw	r2,4(r4)
    6bb8:	80c00217 	ldw	r3,8(r16)
    6bbc:	81400317 	ldw	r5,12(r16)
    6bc0:	10800054 	ori	r2,r2,1
    6bc4:	20800115 	stw	r2,4(r4)
    6bc8:	28c00215 	stw	r3,8(r5)
    6bcc:	19400315 	stw	r5,12(r3)
    6bd0:	9009883a 	mov	r4,r18
    6bd4:	000bf400 	call	bf40 <__malloc_unlock>
    6bd8:	80c00204 	addi	r3,r16,8
    6bdc:	003f4d06 	br	6914 <_malloc_r+0x50>
    6be0:	80800204 	addi	r2,r16,8
    6be4:	14000317 	ldw	r16,12(r2)
    6be8:	143f911e 	bne	r2,r16,6a30 <_malloc_r+0x16c>
    6bec:	1a400084 	addi	r9,r3,2
    6bf0:	003f7306 	br	69c0 <_malloc_r+0xfc>
    6bf4:	88c00054 	ori	r3,r17,1
    6bf8:	8445883a 	add	r2,r16,r17
    6bfc:	80c00115 	stw	r3,4(r16)
    6c00:	003fdf06 	br	6b80 <_malloc_r+0x2bc>
    6c04:	e4000217 	ldw	r16,8(fp)
    6c08:	00bfff04 	movi	r2,-4
    6c0c:	80c00117 	ldw	r3,4(r16)
    6c10:	802d883a 	mov	r22,r16
    6c14:	18aa703a 	and	r21,r3,r2
    6c18:	ac401636 	bltu	r21,r17,6c74 <_malloc_r+0x3b0>
    6c1c:	ac49c83a 	sub	r4,r21,r17
    6c20:	008003c4 	movi	r2,15
    6c24:	1100130e 	bge	r2,r4,6c74 <_malloc_r+0x3b0>
    6c28:	88800054 	ori	r2,r17,1
    6c2c:	8447883a 	add	r3,r16,r17
    6c30:	80800115 	stw	r2,4(r16)
    6c34:	20800054 	ori	r2,r4,1
    6c38:	18800115 	stw	r2,4(r3)
    6c3c:	e0c00215 	stw	r3,8(fp)
    6c40:	9009883a 	mov	r4,r18
    6c44:	000bf400 	call	bf40 <__malloc_unlock>
    6c48:	80c00204 	addi	r3,r16,8
    6c4c:	003f3106 	br	6914 <_malloc_r+0x50>
    6c50:	39c00117 	ldw	r7,4(r7)
    6c54:	573ffe04 	addi	fp,r10,-8
    6c58:	003fa006 	br	6adc <_malloc_r+0x218>
    6c5c:	00801504 	movi	r2,84
    6c60:	10c06736 	bltu	r2,r3,6e00 <_malloc_r+0x53c>
    6c64:	8804d33a 	srli	r2,r17,12
    6c68:	11801b84 	addi	r6,r2,110
    6c6c:	300490fa 	slli	r2,r6,3
    6c70:	003f4106 	br	6978 <_malloc_r+0xb4>
    6c74:	d0a6b117 	ldw	r2,-25916(gp)
    6c78:	d0e00717 	ldw	r3,-32740(gp)
    6c7c:	053fffc4 	movi	r20,-1
    6c80:	10800404 	addi	r2,r2,16
    6c84:	88a7883a 	add	r19,r17,r2
    6c88:	1d000326 	beq	r3,r20,6c98 <_malloc_r+0x3d4>
    6c8c:	98c3ffc4 	addi	r3,r19,4095
    6c90:	00bc0004 	movi	r2,-4096
    6c94:	18a6703a 	and	r19,r3,r2
    6c98:	9009883a 	mov	r4,r18
    6c9c:	980b883a 	mov	r5,r19
    6ca0:	00089f00 	call	89f0 <_sbrk_r>
    6ca4:	1009883a 	mov	r4,r2
    6ca8:	15000426 	beq	r2,r20,6cbc <_malloc_r+0x3f8>
    6cac:	854b883a 	add	r5,r16,r21
    6cb0:	1029883a 	mov	r20,r2
    6cb4:	11405a2e 	bgeu	r2,r5,6e20 <_malloc_r+0x55c>
    6cb8:	87000c26 	beq	r16,fp,6cec <_malloc_r+0x428>
    6cbc:	e4000217 	ldw	r16,8(fp)
    6cc0:	80c00117 	ldw	r3,4(r16)
    6cc4:	00bfff04 	movi	r2,-4
    6cc8:	1884703a 	and	r2,r3,r2
    6ccc:	14400336 	bltu	r2,r17,6cdc <_malloc_r+0x418>
    6cd0:	1449c83a 	sub	r4,r2,r17
    6cd4:	008003c4 	movi	r2,15
    6cd8:	113fd316 	blt	r2,r4,6c28 <_malloc_r+0x364>
    6cdc:	9009883a 	mov	r4,r18
    6ce0:	000bf400 	call	bf40 <__malloc_unlock>
    6ce4:	0007883a 	mov	r3,zero
    6ce8:	003f0a06 	br	6914 <_malloc_r+0x50>
    6cec:	05c00274 	movhi	r23,9
    6cf0:	bdc48b04 	addi	r23,r23,4652
    6cf4:	b8800017 	ldw	r2,0(r23)
    6cf8:	988d883a 	add	r6,r19,r2
    6cfc:	b9800015 	stw	r6,0(r23)
    6d00:	d0e00717 	ldw	r3,-32740(gp)
    6d04:	00bfffc4 	movi	r2,-1
    6d08:	18808e26 	beq	r3,r2,6f44 <_malloc_r+0x680>
    6d0c:	2145c83a 	sub	r2,r4,r5
    6d10:	3085883a 	add	r2,r6,r2
    6d14:	b8800015 	stw	r2,0(r23)
    6d18:	20c001cc 	andi	r3,r4,7
    6d1c:	18005f1e 	bne	r3,zero,6e9c <_malloc_r+0x5d8>
    6d20:	000b883a 	mov	r5,zero
    6d24:	a4c5883a 	add	r2,r20,r19
    6d28:	1083ffcc 	andi	r2,r2,4095
    6d2c:	00c40004 	movi	r3,4096
    6d30:	1887c83a 	sub	r3,r3,r2
    6d34:	28e7883a 	add	r19,r5,r3
    6d38:	9009883a 	mov	r4,r18
    6d3c:	980b883a 	mov	r5,r19
    6d40:	00089f00 	call	89f0 <_sbrk_r>
    6d44:	1007883a 	mov	r3,r2
    6d48:	00bfffc4 	movi	r2,-1
    6d4c:	18807a26 	beq	r3,r2,6f38 <_malloc_r+0x674>
    6d50:	1d05c83a 	sub	r2,r3,r20
    6d54:	9885883a 	add	r2,r19,r2
    6d58:	10c00054 	ori	r3,r2,1
    6d5c:	b8800017 	ldw	r2,0(r23)
    6d60:	a021883a 	mov	r16,r20
    6d64:	a0c00115 	stw	r3,4(r20)
    6d68:	9885883a 	add	r2,r19,r2
    6d6c:	b8800015 	stw	r2,0(r23)
    6d70:	e5000215 	stw	r20,8(fp)
    6d74:	b7003626 	beq	r22,fp,6e50 <_malloc_r+0x58c>
    6d78:	018003c4 	movi	r6,15
    6d7c:	35404b36 	bltu	r6,r21,6eac <_malloc_r+0x5e8>
    6d80:	00800044 	movi	r2,1
    6d84:	a0800115 	stw	r2,4(r20)
    6d88:	003fcd06 	br	6cc0 <_malloc_r+0x3fc>
    6d8c:	2808d27a 	srli	r4,r5,9
    6d90:	2000371e 	bne	r4,zero,6e70 <_malloc_r+0x5ac>
    6d94:	2808d0fa 	srli	r4,r5,3
    6d98:	200690fa 	slli	r3,r4,3
    6d9c:	1ad1883a 	add	r8,r3,r11
    6da0:	41800217 	ldw	r6,8(r8)
    6da4:	41805b26 	beq	r8,r6,6f14 <_malloc_r+0x650>
    6da8:	30800117 	ldw	r2,4(r6)
    6dac:	00ffff04 	movi	r3,-4
    6db0:	10c4703a 	and	r2,r2,r3
    6db4:	2880022e 	bgeu	r5,r2,6dc0 <_malloc_r+0x4fc>
    6db8:	31800217 	ldw	r6,8(r6)
    6dbc:	41bffa1e 	bne	r8,r6,6da8 <_malloc_r+0x4e4>
    6dc0:	32000317 	ldw	r8,12(r6)
    6dc4:	39c00117 	ldw	r7,4(r7)
    6dc8:	82000315 	stw	r8,12(r16)
    6dcc:	81800215 	stw	r6,8(r16)
    6dd0:	07000074 	movhi	fp,1
    6dd4:	e73a4c04 	addi	fp,fp,-5840
    6dd8:	34000315 	stw	r16,12(r6)
    6ddc:	44000215 	stw	r16,8(r8)
    6de0:	003f3e06 	br	6adc <_malloc_r+0x218>
    6de4:	63000044 	addi	r12,r12,1
    6de8:	608000cc 	andi	r2,r12,3
    6dec:	10005d26 	beq	r2,zero,6f64 <_malloc_r+0x6a0>
    6df0:	18c00204 	addi	r3,r3,8
    6df4:	003f5106 	br	6b3c <_malloc_r+0x278>
    6df8:	8089883a 	add	r4,r16,r2
    6dfc:	003f6d06 	br	6bb4 <_malloc_r+0x2f0>
    6e00:	00805504 	movi	r2,340
    6e04:	10c02036 	bltu	r2,r3,6e88 <_malloc_r+0x5c4>
    6e08:	8804d3fa 	srli	r2,r17,15
    6e0c:	11801dc4 	addi	r6,r2,119
    6e10:	300490fa 	slli	r2,r6,3
    6e14:	003ed806 	br	6978 <_malloc_r+0xb4>
    6e18:	48c000c4 	addi	r3,r9,3
    6e1c:	003f3106 	br	6ae4 <_malloc_r+0x220>
    6e20:	05c00274 	movhi	r23,9
    6e24:	bdc48b04 	addi	r23,r23,4652
    6e28:	b8800017 	ldw	r2,0(r23)
    6e2c:	988d883a 	add	r6,r19,r2
    6e30:	b9800015 	stw	r6,0(r23)
    6e34:	293fb21e 	bne	r5,r4,6d00 <_malloc_r+0x43c>
    6e38:	2083ffcc 	andi	r2,r4,4095
    6e3c:	103fb01e 	bne	r2,zero,6d00 <_malloc_r+0x43c>
    6e40:	e4000217 	ldw	r16,8(fp)
    6e44:	9d45883a 	add	r2,r19,r21
    6e48:	10800054 	ori	r2,r2,1
    6e4c:	80800115 	stw	r2,4(r16)
    6e50:	b8c00017 	ldw	r3,0(r23)
    6e54:	d0a6b217 	ldw	r2,-25912(gp)
    6e58:	10c0012e 	bgeu	r2,r3,6e60 <_malloc_r+0x59c>
    6e5c:	d0e6b215 	stw	r3,-25912(gp)
    6e60:	d0a6b317 	ldw	r2,-25908(gp)
    6e64:	10ff962e 	bgeu	r2,r3,6cc0 <_malloc_r+0x3fc>
    6e68:	d0e6b315 	stw	r3,-25908(gp)
    6e6c:	003f9406 	br	6cc0 <_malloc_r+0x3fc>
    6e70:	00800104 	movi	r2,4
    6e74:	11001e36 	bltu	r2,r4,6ef0 <_malloc_r+0x62c>
    6e78:	2804d1ba 	srli	r2,r5,6
    6e7c:	11000e04 	addi	r4,r2,56
    6e80:	200690fa 	slli	r3,r4,3
    6e84:	003fc506 	br	6d9c <_malloc_r+0x4d8>
    6e88:	00815504 	movi	r2,1364
    6e8c:	10c01d2e 	bgeu	r2,r3,6f04 <_malloc_r+0x640>
    6e90:	01801f84 	movi	r6,126
    6e94:	0080fc04 	movi	r2,1008
    6e98:	003eb706 	br	6978 <_malloc_r+0xb4>
    6e9c:	00800204 	movi	r2,8
    6ea0:	10cbc83a 	sub	r5,r2,r3
    6ea4:	2169883a 	add	r20,r4,r5
    6ea8:	003f9e06 	br	6d24 <_malloc_r+0x460>
    6eac:	00bffe04 	movi	r2,-8
    6eb0:	a93ffd04 	addi	r4,r21,-12
    6eb4:	2088703a 	and	r4,r4,r2
    6eb8:	b10b883a 	add	r5,r22,r4
    6ebc:	00c00144 	movi	r3,5
    6ec0:	28c00215 	stw	r3,8(r5)
    6ec4:	28c00115 	stw	r3,4(r5)
    6ec8:	b0800117 	ldw	r2,4(r22)
    6ecc:	1080004c 	andi	r2,r2,1
    6ed0:	2084b03a 	or	r2,r4,r2
    6ed4:	b0800115 	stw	r2,4(r22)
    6ed8:	313fdd2e 	bgeu	r6,r4,6e50 <_malloc_r+0x58c>
    6edc:	b1400204 	addi	r5,r22,8
    6ee0:	9009883a 	mov	r4,r18
    6ee4:	0005d3c0 	call	5d3c <_free_r>
    6ee8:	e4000217 	ldw	r16,8(fp)
    6eec:	003fd806 	br	6e50 <_malloc_r+0x58c>
    6ef0:	00800504 	movi	r2,20
    6ef4:	11001536 	bltu	r2,r4,6f4c <_malloc_r+0x688>
    6ef8:	210016c4 	addi	r4,r4,91
    6efc:	200690fa 	slli	r3,r4,3
    6f00:	003fa606 	br	6d9c <_malloc_r+0x4d8>
    6f04:	8804d4ba 	srli	r2,r17,18
    6f08:	11801f04 	addi	r6,r2,124
    6f0c:	300490fa 	slli	r2,r6,3
    6f10:	003e9906 	br	6978 <_malloc_r+0xb4>
    6f14:	2009d0ba 	srai	r4,r4,2
    6f18:	01400074 	movhi	r5,1
    6f1c:	297a4c04 	addi	r5,r5,-5840
    6f20:	00c00044 	movi	r3,1
    6f24:	28800117 	ldw	r2,4(r5)
    6f28:	1906983a 	sll	r3,r3,r4
    6f2c:	10c4b03a 	or	r2,r2,r3
    6f30:	28800115 	stw	r2,4(r5)
    6f34:	003fa306 	br	6dc4 <_malloc_r+0x500>
    6f38:	0027883a 	mov	r19,zero
    6f3c:	00c00044 	movi	r3,1
    6f40:	003f8606 	br	6d5c <_malloc_r+0x498>
    6f44:	d1200715 	stw	r4,-32740(gp)
    6f48:	003f7306 	br	6d18 <_malloc_r+0x454>
    6f4c:	00801504 	movi	r2,84
    6f50:	11001936 	bltu	r2,r4,6fb8 <_malloc_r+0x6f4>
    6f54:	2804d33a 	srli	r2,r5,12
    6f58:	11001b84 	addi	r4,r2,110
    6f5c:	200690fa 	slli	r3,r4,3
    6f60:	003f8e06 	br	6d9c <_malloc_r+0x4d8>
    6f64:	480b883a 	mov	r5,r9
    6f68:	6807883a 	mov	r3,r13
    6f6c:	288000cc 	andi	r2,r5,3
    6f70:	18fffe04 	addi	r3,r3,-8
    6f74:	297fffc4 	addi	r5,r5,-1
    6f78:	10001526 	beq	r2,zero,6fd0 <_malloc_r+0x70c>
    6f7c:	18800217 	ldw	r2,8(r3)
    6f80:	10fffa26 	beq	r2,r3,6f6c <_malloc_r+0x6a8>
    6f84:	2109883a 	add	r4,r4,r4
    6f88:	393f1e36 	bltu	r7,r4,6c04 <_malloc_r+0x340>
    6f8c:	203f1d26 	beq	r4,zero,6c04 <_malloc_r+0x340>
    6f90:	21c4703a 	and	r2,r4,r7
    6f94:	10000226 	beq	r2,zero,6fa0 <_malloc_r+0x6dc>
    6f98:	6013883a 	mov	r9,r12
    6f9c:	003ee106 	br	6b24 <_malloc_r+0x260>
    6fa0:	2109883a 	add	r4,r4,r4
    6fa4:	3904703a 	and	r2,r7,r4
    6fa8:	63000104 	addi	r12,r12,4
    6fac:	103ffc26 	beq	r2,zero,6fa0 <_malloc_r+0x6dc>
    6fb0:	6013883a 	mov	r9,r12
    6fb4:	003edb06 	br	6b24 <_malloc_r+0x260>
    6fb8:	00805504 	movi	r2,340
    6fbc:	11000836 	bltu	r2,r4,6fe0 <_malloc_r+0x71c>
    6fc0:	2804d3fa 	srli	r2,r5,15
    6fc4:	11001dc4 	addi	r4,r2,119
    6fc8:	200690fa 	slli	r3,r4,3
    6fcc:	003f7306 	br	6d9c <_malloc_r+0x4d8>
    6fd0:	0104303a 	nor	r2,zero,r4
    6fd4:	388e703a 	and	r7,r7,r2
    6fd8:	e1c00115 	stw	r7,4(fp)
    6fdc:	003fe906 	br	6f84 <_malloc_r+0x6c0>
    6fe0:	00815504 	movi	r2,1364
    6fe4:	1100032e 	bgeu	r2,r4,6ff4 <_malloc_r+0x730>
    6fe8:	01001f84 	movi	r4,126
    6fec:	00c0fc04 	movi	r3,1008
    6ff0:	003f6a06 	br	6d9c <_malloc_r+0x4d8>
    6ff4:	2804d4ba 	srli	r2,r5,18
    6ff8:	11001f04 	addi	r4,r2,124
    6ffc:	200690fa 	slli	r3,r4,3
    7000:	003f6606 	br	6d9c <_malloc_r+0x4d8>

00007004 <memchr>:
    7004:	008000c4 	movi	r2,3
    7008:	29403fcc 	andi	r5,r5,255
    700c:	2007883a 	mov	r3,r4
    7010:	1180022e 	bgeu	r2,r6,701c <memchr+0x18>
    7014:	2084703a 	and	r2,r4,r2
    7018:	10000b26 	beq	r2,zero,7048 <memchr+0x44>
    701c:	313fffc4 	addi	r4,r6,-1
    7020:	3000051e 	bne	r6,zero,7038 <memchr+0x34>
    7024:	00002c06 	br	70d8 <memchr+0xd4>
    7028:	213fffc4 	addi	r4,r4,-1
    702c:	00bfffc4 	movi	r2,-1
    7030:	18c00044 	addi	r3,r3,1
    7034:	20802826 	beq	r4,r2,70d8 <memchr+0xd4>
    7038:	18800003 	ldbu	r2,0(r3)
    703c:	28bffa1e 	bne	r5,r2,7028 <memchr+0x24>
    7040:	1805883a 	mov	r2,r3
    7044:	f800283a 	ret
    7048:	0011883a 	mov	r8,zero
    704c:	0007883a 	mov	r3,zero
    7050:	01c00104 	movi	r7,4
    7054:	4004923a 	slli	r2,r8,8
    7058:	18c00044 	addi	r3,r3,1
    705c:	1151883a 	add	r8,r2,r5
    7060:	19fffc1e 	bne	r3,r7,7054 <memchr+0x50>
    7064:	02bfbff4 	movhi	r10,65279
    7068:	52bfbfc4 	addi	r10,r10,-257
    706c:	02602074 	movhi	r9,32897
    7070:	4a602004 	addi	r9,r9,-32640
    7074:	02c000c4 	movi	r11,3
    7078:	20800017 	ldw	r2,0(r4)
    707c:	31bfff04 	addi	r6,r6,-4
    7080:	200f883a 	mov	r7,r4
    7084:	1204f03a 	xor	r2,r2,r8
    7088:	1287883a 	add	r3,r2,r10
    708c:	1a46703a 	and	r3,r3,r9
    7090:	0084303a 	nor	r2,zero,r2
    7094:	10c4703a 	and	r2,r2,r3
    7098:	10000b26 	beq	r2,zero,70c8 <memchr+0xc4>
    709c:	20800003 	ldbu	r2,0(r4)
    70a0:	28800f26 	beq	r5,r2,70e0 <memchr+0xdc>
    70a4:	20800043 	ldbu	r2,1(r4)
    70a8:	21c00044 	addi	r7,r4,1
    70ac:	28800c26 	beq	r5,r2,70e0 <memchr+0xdc>
    70b0:	20800083 	ldbu	r2,2(r4)
    70b4:	21c00084 	addi	r7,r4,2
    70b8:	28800926 	beq	r5,r2,70e0 <memchr+0xdc>
    70bc:	208000c3 	ldbu	r2,3(r4)
    70c0:	21c000c4 	addi	r7,r4,3
    70c4:	28800626 	beq	r5,r2,70e0 <memchr+0xdc>
    70c8:	21000104 	addi	r4,r4,4
    70cc:	59bfea36 	bltu	r11,r6,7078 <memchr+0x74>
    70d0:	2007883a 	mov	r3,r4
    70d4:	003fd106 	br	701c <memchr+0x18>
    70d8:	0005883a 	mov	r2,zero
    70dc:	f800283a 	ret
    70e0:	3805883a 	mov	r2,r7
    70e4:	f800283a 	ret

000070e8 <memcpy>:
    70e8:	01c003c4 	movi	r7,15
    70ec:	2007883a 	mov	r3,r4
    70f0:	3980032e 	bgeu	r7,r6,7100 <memcpy+0x18>
    70f4:	2904b03a 	or	r2,r5,r4
    70f8:	108000cc 	andi	r2,r2,3
    70fc:	10000926 	beq	r2,zero,7124 <memcpy+0x3c>
    7100:	30000626 	beq	r6,zero,711c <memcpy+0x34>
    7104:	30cd883a 	add	r6,r6,r3
    7108:	28800003 	ldbu	r2,0(r5)
    710c:	29400044 	addi	r5,r5,1
    7110:	18800005 	stb	r2,0(r3)
    7114:	18c00044 	addi	r3,r3,1
    7118:	30fffb1e 	bne	r6,r3,7108 <memcpy+0x20>
    711c:	2005883a 	mov	r2,r4
    7120:	f800283a 	ret
    7124:	3811883a 	mov	r8,r7
    7128:	200f883a 	mov	r7,r4
    712c:	28c00017 	ldw	r3,0(r5)
    7130:	31bffc04 	addi	r6,r6,-16
    7134:	38c00015 	stw	r3,0(r7)
    7138:	28800117 	ldw	r2,4(r5)
    713c:	38800115 	stw	r2,4(r7)
    7140:	28c00217 	ldw	r3,8(r5)
    7144:	38c00215 	stw	r3,8(r7)
    7148:	28800317 	ldw	r2,12(r5)
    714c:	29400404 	addi	r5,r5,16
    7150:	38800315 	stw	r2,12(r7)
    7154:	39c00404 	addi	r7,r7,16
    7158:	41bff436 	bltu	r8,r6,712c <memcpy+0x44>
    715c:	008000c4 	movi	r2,3
    7160:	1180072e 	bgeu	r2,r6,7180 <memcpy+0x98>
    7164:	1007883a 	mov	r3,r2
    7168:	28800017 	ldw	r2,0(r5)
    716c:	31bfff04 	addi	r6,r6,-4
    7170:	29400104 	addi	r5,r5,4
    7174:	38800015 	stw	r2,0(r7)
    7178:	39c00104 	addi	r7,r7,4
    717c:	19bffa36 	bltu	r3,r6,7168 <memcpy+0x80>
    7180:	3807883a 	mov	r3,r7
    7184:	003fde06 	br	7100 <memcpy+0x18>

00007188 <memmove>:
    7188:	2807883a 	mov	r3,r5
    718c:	2011883a 	mov	r8,r4
    7190:	29000c2e 	bgeu	r5,r4,71c4 <memmove+0x3c>
    7194:	298f883a 	add	r7,r5,r6
    7198:	21c00a2e 	bgeu	r4,r7,71c4 <memmove+0x3c>
    719c:	30000726 	beq	r6,zero,71bc <memmove+0x34>
    71a0:	2187883a 	add	r3,r4,r6
    71a4:	198dc83a 	sub	r6,r3,r6
    71a8:	39ffffc4 	addi	r7,r7,-1
    71ac:	38800003 	ldbu	r2,0(r7)
    71b0:	18ffffc4 	addi	r3,r3,-1
    71b4:	18800005 	stb	r2,0(r3)
    71b8:	19bffb1e 	bne	r3,r6,71a8 <memmove+0x20>
    71bc:	2005883a 	mov	r2,r4
    71c0:	f800283a 	ret
    71c4:	01c003c4 	movi	r7,15
    71c8:	39800a36 	bltu	r7,r6,71f4 <memmove+0x6c>
    71cc:	303ffb26 	beq	r6,zero,71bc <memmove+0x34>
    71d0:	400f883a 	mov	r7,r8
    71d4:	320d883a 	add	r6,r6,r8
    71d8:	28800003 	ldbu	r2,0(r5)
    71dc:	29400044 	addi	r5,r5,1
    71e0:	38800005 	stb	r2,0(r7)
    71e4:	39c00044 	addi	r7,r7,1
    71e8:	39bffb1e 	bne	r7,r6,71d8 <memmove+0x50>
    71ec:	2005883a 	mov	r2,r4
    71f0:	f800283a 	ret
    71f4:	1904b03a 	or	r2,r3,r4
    71f8:	108000cc 	andi	r2,r2,3
    71fc:	103ff31e 	bne	r2,zero,71cc <memmove+0x44>
    7200:	3811883a 	mov	r8,r7
    7204:	180b883a 	mov	r5,r3
    7208:	200f883a 	mov	r7,r4
    720c:	28c00017 	ldw	r3,0(r5)
    7210:	31bffc04 	addi	r6,r6,-16
    7214:	38c00015 	stw	r3,0(r7)
    7218:	28800117 	ldw	r2,4(r5)
    721c:	38800115 	stw	r2,4(r7)
    7220:	28c00217 	ldw	r3,8(r5)
    7224:	38c00215 	stw	r3,8(r7)
    7228:	28800317 	ldw	r2,12(r5)
    722c:	29400404 	addi	r5,r5,16
    7230:	38800315 	stw	r2,12(r7)
    7234:	39c00404 	addi	r7,r7,16
    7238:	41bff436 	bltu	r8,r6,720c <memmove+0x84>
    723c:	008000c4 	movi	r2,3
    7240:	1180072e 	bgeu	r2,r6,7260 <memmove+0xd8>
    7244:	1007883a 	mov	r3,r2
    7248:	28800017 	ldw	r2,0(r5)
    724c:	31bfff04 	addi	r6,r6,-4
    7250:	29400104 	addi	r5,r5,4
    7254:	38800015 	stw	r2,0(r7)
    7258:	39c00104 	addi	r7,r7,4
    725c:	19bffa36 	bltu	r3,r6,7248 <memmove+0xc0>
    7260:	3811883a 	mov	r8,r7
    7264:	003fd906 	br	71cc <memmove+0x44>

00007268 <memset>:
    7268:	008000c4 	movi	r2,3
    726c:	29403fcc 	andi	r5,r5,255
    7270:	2007883a 	mov	r3,r4
    7274:	1180022e 	bgeu	r2,r6,7280 <memset+0x18>
    7278:	2084703a 	and	r2,r4,r2
    727c:	10000826 	beq	r2,zero,72a0 <memset+0x38>
    7280:	30000526 	beq	r6,zero,7298 <memset+0x30>
    7284:	2805883a 	mov	r2,r5
    7288:	30cd883a 	add	r6,r6,r3
    728c:	18800005 	stb	r2,0(r3)
    7290:	18c00044 	addi	r3,r3,1
    7294:	19bffd1e 	bne	r3,r6,728c <memset+0x24>
    7298:	2005883a 	mov	r2,r4
    729c:	f800283a 	ret
    72a0:	2804923a 	slli	r2,r5,8
    72a4:	020003c4 	movi	r8,15
    72a8:	200f883a 	mov	r7,r4
    72ac:	2884b03a 	or	r2,r5,r2
    72b0:	1006943a 	slli	r3,r2,16
    72b4:	10c6b03a 	or	r3,r2,r3
    72b8:	41800a2e 	bgeu	r8,r6,72e4 <memset+0x7c>
    72bc:	4005883a 	mov	r2,r8
    72c0:	31bffc04 	addi	r6,r6,-16
    72c4:	38c00015 	stw	r3,0(r7)
    72c8:	38c00115 	stw	r3,4(r7)
    72cc:	38c00215 	stw	r3,8(r7)
    72d0:	38c00315 	stw	r3,12(r7)
    72d4:	39c00404 	addi	r7,r7,16
    72d8:	11bff936 	bltu	r2,r6,72c0 <memset+0x58>
    72dc:	008000c4 	movi	r2,3
    72e0:	1180052e 	bgeu	r2,r6,72f8 <memset+0x90>
    72e4:	31bfff04 	addi	r6,r6,-4
    72e8:	008000c4 	movi	r2,3
    72ec:	38c00015 	stw	r3,0(r7)
    72f0:	39c00104 	addi	r7,r7,4
    72f4:	11bffb36 	bltu	r2,r6,72e4 <memset+0x7c>
    72f8:	3807883a 	mov	r3,r7
    72fc:	003fe006 	br	7280 <memset+0x18>

00007300 <_Bfree>:
    7300:	28000826 	beq	r5,zero,7324 <_Bfree+0x24>
    7304:	28800117 	ldw	r2,4(r5)
    7308:	21001317 	ldw	r4,76(r4)
    730c:	1085883a 	add	r2,r2,r2
    7310:	1085883a 	add	r2,r2,r2
    7314:	1105883a 	add	r2,r2,r4
    7318:	10c00017 	ldw	r3,0(r2)
    731c:	28c00015 	stw	r3,0(r5)
    7320:	11400015 	stw	r5,0(r2)
    7324:	f800283a 	ret

00007328 <__hi0bits>:
    7328:	20bfffec 	andhi	r2,r4,65535
    732c:	10001426 	beq	r2,zero,7380 <__hi0bits+0x58>
    7330:	0007883a 	mov	r3,zero
    7334:	20bfc02c 	andhi	r2,r4,65280
    7338:	1000021e 	bne	r2,zero,7344 <__hi0bits+0x1c>
    733c:	2008923a 	slli	r4,r4,8
    7340:	18c00204 	addi	r3,r3,8
    7344:	20bc002c 	andhi	r2,r4,61440
    7348:	1000021e 	bne	r2,zero,7354 <__hi0bits+0x2c>
    734c:	2008913a 	slli	r4,r4,4
    7350:	18c00104 	addi	r3,r3,4
    7354:	20b0002c 	andhi	r2,r4,49152
    7358:	1000031e 	bne	r2,zero,7368 <__hi0bits+0x40>
    735c:	2105883a 	add	r2,r4,r4
    7360:	18c00084 	addi	r3,r3,2
    7364:	1089883a 	add	r4,r2,r2
    7368:	20000316 	blt	r4,zero,7378 <__hi0bits+0x50>
    736c:	2090002c 	andhi	r2,r4,16384
    7370:	10000626 	beq	r2,zero,738c <__hi0bits+0x64>
    7374:	18c00044 	addi	r3,r3,1
    7378:	1805883a 	mov	r2,r3
    737c:	f800283a 	ret
    7380:	2008943a 	slli	r4,r4,16
    7384:	00c00404 	movi	r3,16
    7388:	003fea06 	br	7334 <__hi0bits+0xc>
    738c:	00c00804 	movi	r3,32
    7390:	1805883a 	mov	r2,r3
    7394:	f800283a 	ret

00007398 <__lo0bits>:
    7398:	20c00017 	ldw	r3,0(r4)
    739c:	188001cc 	andi	r2,r3,7
    73a0:	10000a26 	beq	r2,zero,73cc <__lo0bits+0x34>
    73a4:	1880004c 	andi	r2,r3,1
    73a8:	1005003a 	cmpeq	r2,r2,zero
    73ac:	10002126 	beq	r2,zero,7434 <__lo0bits+0x9c>
    73b0:	1880008c 	andi	r2,r3,2
    73b4:	1000251e 	bne	r2,zero,744c <__lo0bits+0xb4>
    73b8:	1804d0ba 	srli	r2,r3,2
    73bc:	01400084 	movi	r5,2
    73c0:	20800015 	stw	r2,0(r4)
    73c4:	2805883a 	mov	r2,r5
    73c8:	f800283a 	ret
    73cc:	18bfffcc 	andi	r2,r3,65535
    73d0:	10001526 	beq	r2,zero,7428 <__lo0bits+0x90>
    73d4:	000b883a 	mov	r5,zero
    73d8:	18803fcc 	andi	r2,r3,255
    73dc:	1000021e 	bne	r2,zero,73e8 <__lo0bits+0x50>
    73e0:	1806d23a 	srli	r3,r3,8
    73e4:	29400204 	addi	r5,r5,8
    73e8:	188003cc 	andi	r2,r3,15
    73ec:	1000021e 	bne	r2,zero,73f8 <__lo0bits+0x60>
    73f0:	1806d13a 	srli	r3,r3,4
    73f4:	29400104 	addi	r5,r5,4
    73f8:	188000cc 	andi	r2,r3,3
    73fc:	1000021e 	bne	r2,zero,7408 <__lo0bits+0x70>
    7400:	1806d0ba 	srli	r3,r3,2
    7404:	29400084 	addi	r5,r5,2
    7408:	1880004c 	andi	r2,r3,1
    740c:	1000031e 	bne	r2,zero,741c <__lo0bits+0x84>
    7410:	1806d07a 	srli	r3,r3,1
    7414:	18000a26 	beq	r3,zero,7440 <__lo0bits+0xa8>
    7418:	29400044 	addi	r5,r5,1
    741c:	2805883a 	mov	r2,r5
    7420:	20c00015 	stw	r3,0(r4)
    7424:	f800283a 	ret
    7428:	1806d43a 	srli	r3,r3,16
    742c:	01400404 	movi	r5,16
    7430:	003fe906 	br	73d8 <__lo0bits+0x40>
    7434:	000b883a 	mov	r5,zero
    7438:	2805883a 	mov	r2,r5
    743c:	f800283a 	ret
    7440:	01400804 	movi	r5,32
    7444:	2805883a 	mov	r2,r5
    7448:	f800283a 	ret
    744c:	1804d07a 	srli	r2,r3,1
    7450:	01400044 	movi	r5,1
    7454:	20800015 	stw	r2,0(r4)
    7458:	003fda06 	br	73c4 <__lo0bits+0x2c>

0000745c <__mcmp>:
    745c:	20800417 	ldw	r2,16(r4)
    7460:	28c00417 	ldw	r3,16(r5)
    7464:	10cfc83a 	sub	r7,r2,r3
    7468:	38000c1e 	bne	r7,zero,749c <__mcmp+0x40>
    746c:	18c5883a 	add	r2,r3,r3
    7470:	1085883a 	add	r2,r2,r2
    7474:	10c00504 	addi	r3,r2,20
    7478:	21000504 	addi	r4,r4,20
    747c:	28cb883a 	add	r5,r5,r3
    7480:	2085883a 	add	r2,r4,r2
    7484:	10bfff04 	addi	r2,r2,-4
    7488:	297fff04 	addi	r5,r5,-4
    748c:	11800017 	ldw	r6,0(r2)
    7490:	28c00017 	ldw	r3,0(r5)
    7494:	30c0031e 	bne	r6,r3,74a4 <__mcmp+0x48>
    7498:	20bffa36 	bltu	r4,r2,7484 <__mcmp+0x28>
    749c:	3805883a 	mov	r2,r7
    74a0:	f800283a 	ret
    74a4:	30c00336 	bltu	r6,r3,74b4 <__mcmp+0x58>
    74a8:	01c00044 	movi	r7,1
    74ac:	3805883a 	mov	r2,r7
    74b0:	f800283a 	ret
    74b4:	01ffffc4 	movi	r7,-1
    74b8:	003ff806 	br	749c <__mcmp+0x40>

000074bc <__ulp>:
    74bc:	295ffc2c 	andhi	r5,r5,32752
    74c0:	013f3034 	movhi	r4,64704
    74c4:	290b883a 	add	r5,r5,r4
    74c8:	0145c83a 	sub	r2,zero,r5
    74cc:	1007d53a 	srai	r3,r2,20
    74d0:	000d883a 	mov	r6,zero
    74d4:	0140040e 	bge	zero,r5,74e8 <__ulp+0x2c>
    74d8:	280f883a 	mov	r7,r5
    74dc:	3807883a 	mov	r3,r7
    74e0:	3005883a 	mov	r2,r6
    74e4:	f800283a 	ret
    74e8:	008004c4 	movi	r2,19
    74ec:	193ffb04 	addi	r4,r3,-20
    74f0:	10c00c0e 	bge	r2,r3,7524 <__ulp+0x68>
    74f4:	008007c4 	movi	r2,31
    74f8:	1107c83a 	sub	r3,r2,r4
    74fc:	00800784 	movi	r2,30
    7500:	01400044 	movi	r5,1
    7504:	11000216 	blt	r2,r4,7510 <__ulp+0x54>
    7508:	00800044 	movi	r2,1
    750c:	10ca983a 	sll	r5,r2,r3
    7510:	000f883a 	mov	r7,zero
    7514:	280d883a 	mov	r6,r5
    7518:	3807883a 	mov	r3,r7
    751c:	3005883a 	mov	r2,r6
    7520:	f800283a 	ret
    7524:	00800234 	movhi	r2,8
    7528:	10cfd83a 	sra	r7,r2,r3
    752c:	000d883a 	mov	r6,zero
    7530:	3005883a 	mov	r2,r6
    7534:	3807883a 	mov	r3,r7
    7538:	f800283a 	ret

0000753c <__b2d>:
    753c:	20800417 	ldw	r2,16(r4)
    7540:	defff904 	addi	sp,sp,-28
    7544:	dd000415 	stw	r20,16(sp)
    7548:	1085883a 	add	r2,r2,r2
    754c:	25000504 	addi	r20,r4,20
    7550:	1085883a 	add	r2,r2,r2
    7554:	dc000015 	stw	r16,0(sp)
    7558:	a0a1883a 	add	r16,r20,r2
    755c:	dd400515 	stw	r21,20(sp)
    7560:	857fff17 	ldw	r21,-4(r16)
    7564:	dc400115 	stw	r17,4(sp)
    7568:	dfc00615 	stw	ra,24(sp)
    756c:	a809883a 	mov	r4,r21
    7570:	2823883a 	mov	r17,r5
    7574:	dcc00315 	stw	r19,12(sp)
    7578:	dc800215 	stw	r18,8(sp)
    757c:	00073280 	call	7328 <__hi0bits>
    7580:	100b883a 	mov	r5,r2
    7584:	00800804 	movi	r2,32
    7588:	1145c83a 	sub	r2,r2,r5
    758c:	88800015 	stw	r2,0(r17)
    7590:	00800284 	movi	r2,10
    7594:	80ffff04 	addi	r3,r16,-4
    7598:	11401416 	blt	r2,r5,75ec <__b2d+0xb0>
    759c:	008002c4 	movi	r2,11
    75a0:	1149c83a 	sub	r4,r2,r5
    75a4:	a0c02736 	bltu	r20,r3,7644 <__b2d+0x108>
    75a8:	000d883a 	mov	r6,zero
    75ac:	28800544 	addi	r2,r5,21
    75b0:	a906d83a 	srl	r3,r21,r4
    75b4:	a884983a 	sll	r2,r21,r2
    75b8:	1ccffc34 	orhi	r19,r3,16368
    75bc:	11a4b03a 	or	r18,r2,r6
    75c0:	9005883a 	mov	r2,r18
    75c4:	9807883a 	mov	r3,r19
    75c8:	dfc00617 	ldw	ra,24(sp)
    75cc:	dd400517 	ldw	r21,20(sp)
    75d0:	dd000417 	ldw	r20,16(sp)
    75d4:	dcc00317 	ldw	r19,12(sp)
    75d8:	dc800217 	ldw	r18,8(sp)
    75dc:	dc400117 	ldw	r17,4(sp)
    75e0:	dc000017 	ldw	r16,0(sp)
    75e4:	dec00704 	addi	sp,sp,28
    75e8:	f800283a 	ret
    75ec:	a0c00e36 	bltu	r20,r3,7628 <__b2d+0xec>
    75f0:	293ffd44 	addi	r4,r5,-11
    75f4:	000d883a 	mov	r6,zero
    75f8:	20000f26 	beq	r4,zero,7638 <__b2d+0xfc>
    75fc:	00800804 	movi	r2,32
    7600:	110bc83a 	sub	r5,r2,r4
    7604:	a0c01236 	bltu	r20,r3,7650 <__b2d+0x114>
    7608:	000f883a 	mov	r7,zero
    760c:	a904983a 	sll	r2,r21,r4
    7610:	3146d83a 	srl	r3,r6,r5
    7614:	3108983a 	sll	r4,r6,r4
    7618:	108ffc34 	orhi	r2,r2,16368
    761c:	18a6b03a 	or	r19,r3,r2
    7620:	3924b03a 	or	r18,r7,r4
    7624:	003fe606 	br	75c0 <__b2d+0x84>
    7628:	293ffd44 	addi	r4,r5,-11
    762c:	81bffe17 	ldw	r6,-8(r16)
    7630:	80fffe04 	addi	r3,r16,-8
    7634:	203ff11e 	bne	r4,zero,75fc <__b2d+0xc0>
    7638:	accffc34 	orhi	r19,r21,16368
    763c:	3025883a 	mov	r18,r6
    7640:	003fdf06 	br	75c0 <__b2d+0x84>
    7644:	18bfff17 	ldw	r2,-4(r3)
    7648:	110cd83a 	srl	r6,r2,r4
    764c:	003fd706 	br	75ac <__b2d+0x70>
    7650:	18bfff17 	ldw	r2,-4(r3)
    7654:	114ed83a 	srl	r7,r2,r5
    7658:	003fec06 	br	760c <__b2d+0xd0>

0000765c <__ratio>:
    765c:	defff904 	addi	sp,sp,-28
    7660:	dc400215 	stw	r17,8(sp)
    7664:	2823883a 	mov	r17,r5
    7668:	d80b883a 	mov	r5,sp
    766c:	dfc00615 	stw	ra,24(sp)
    7670:	dd000515 	stw	r20,20(sp)
    7674:	dcc00415 	stw	r19,16(sp)
    7678:	dc800315 	stw	r18,12(sp)
    767c:	2025883a 	mov	r18,r4
    7680:	000753c0 	call	753c <__b2d>
    7684:	8809883a 	mov	r4,r17
    7688:	d9400104 	addi	r5,sp,4
    768c:	1027883a 	mov	r19,r2
    7690:	1829883a 	mov	r20,r3
    7694:	000753c0 	call	753c <__b2d>
    7698:	89000417 	ldw	r4,16(r17)
    769c:	91c00417 	ldw	r7,16(r18)
    76a0:	d9800117 	ldw	r6,4(sp)
    76a4:	180b883a 	mov	r5,r3
    76a8:	390fc83a 	sub	r7,r7,r4
    76ac:	1009883a 	mov	r4,r2
    76b0:	d8800017 	ldw	r2,0(sp)
    76b4:	380e917a 	slli	r7,r7,5
    76b8:	2011883a 	mov	r8,r4
    76bc:	1185c83a 	sub	r2,r2,r6
    76c0:	11c5883a 	add	r2,r2,r7
    76c4:	1006953a 	slli	r3,r2,20
    76c8:	2813883a 	mov	r9,r5
    76cc:	00800d0e 	bge	zero,r2,7704 <__ratio+0xa8>
    76d0:	1d29883a 	add	r20,r3,r20
    76d4:	a00b883a 	mov	r5,r20
    76d8:	480f883a 	mov	r7,r9
    76dc:	9809883a 	mov	r4,r19
    76e0:	400d883a 	mov	r6,r8
    76e4:	000a6a40 	call	a6a4 <__divdf3>
    76e8:	dfc00617 	ldw	ra,24(sp)
    76ec:	dd000517 	ldw	r20,20(sp)
    76f0:	dcc00417 	ldw	r19,16(sp)
    76f4:	dc800317 	ldw	r18,12(sp)
    76f8:	dc400217 	ldw	r17,8(sp)
    76fc:	dec00704 	addi	sp,sp,28
    7700:	f800283a 	ret
    7704:	28d3c83a 	sub	r9,r5,r3
    7708:	003ff206 	br	76d4 <__ratio+0x78>

0000770c <_mprec_log10>:
    770c:	defffe04 	addi	sp,sp,-8
    7710:	008005c4 	movi	r2,23
    7714:	dc000015 	stw	r16,0(sp)
    7718:	dfc00115 	stw	ra,4(sp)
    771c:	2021883a 	mov	r16,r4
    7720:	11000c16 	blt	r2,r4,7754 <_mprec_log10+0x48>
    7724:	200490fa 	slli	r2,r4,3
    7728:	00c00074 	movhi	r3,1
    772c:	18f8b004 	addi	r3,r3,-7488
    7730:	10c5883a 	add	r2,r2,r3
    7734:	12400117 	ldw	r9,4(r2)
    7738:	12000017 	ldw	r8,0(r2)
    773c:	4807883a 	mov	r3,r9
    7740:	4005883a 	mov	r2,r8
    7744:	dfc00117 	ldw	ra,4(sp)
    7748:	dc000017 	ldw	r16,0(sp)
    774c:	dec00204 	addi	sp,sp,8
    7750:	f800283a 	ret
    7754:	0011883a 	mov	r8,zero
    7758:	024ffc34 	movhi	r9,16368
    775c:	0005883a 	mov	r2,zero
    7760:	00d00934 	movhi	r3,16420
    7764:	480b883a 	mov	r5,r9
    7768:	4009883a 	mov	r4,r8
    776c:	180f883a 	mov	r7,r3
    7770:	100d883a 	mov	r6,r2
    7774:	000a2e00 	call	a2e0 <__muldf3>
    7778:	843fffc4 	addi	r16,r16,-1
    777c:	1011883a 	mov	r8,r2
    7780:	1813883a 	mov	r9,r3
    7784:	803ff51e 	bne	r16,zero,775c <_mprec_log10+0x50>
    7788:	4005883a 	mov	r2,r8
    778c:	4807883a 	mov	r3,r9
    7790:	dfc00117 	ldw	ra,4(sp)
    7794:	dc000017 	ldw	r16,0(sp)
    7798:	dec00204 	addi	sp,sp,8
    779c:	f800283a 	ret

000077a0 <__copybits>:
    77a0:	297fffc4 	addi	r5,r5,-1
    77a4:	30800417 	ldw	r2,16(r6)
    77a8:	280bd17a 	srai	r5,r5,5
    77ac:	31800504 	addi	r6,r6,20
    77b0:	1085883a 	add	r2,r2,r2
    77b4:	294b883a 	add	r5,r5,r5
    77b8:	294b883a 	add	r5,r5,r5
    77bc:	1085883a 	add	r2,r2,r2
    77c0:	290b883a 	add	r5,r5,r4
    77c4:	3087883a 	add	r3,r6,r2
    77c8:	29400104 	addi	r5,r5,4
    77cc:	30c0052e 	bgeu	r6,r3,77e4 <__copybits+0x44>
    77d0:	30800017 	ldw	r2,0(r6)
    77d4:	31800104 	addi	r6,r6,4
    77d8:	20800015 	stw	r2,0(r4)
    77dc:	21000104 	addi	r4,r4,4
    77e0:	30fffb36 	bltu	r6,r3,77d0 <__copybits+0x30>
    77e4:	2140032e 	bgeu	r4,r5,77f4 <__copybits+0x54>
    77e8:	20000015 	stw	zero,0(r4)
    77ec:	21000104 	addi	r4,r4,4
    77f0:	217ffd36 	bltu	r4,r5,77e8 <__copybits+0x48>
    77f4:	f800283a 	ret

000077f8 <__any_on>:
    77f8:	20800417 	ldw	r2,16(r4)
    77fc:	2807d17a 	srai	r3,r5,5
    7800:	21000504 	addi	r4,r4,20
    7804:	10c00d0e 	bge	r2,r3,783c <__any_on+0x44>
    7808:	1085883a 	add	r2,r2,r2
    780c:	1085883a 	add	r2,r2,r2
    7810:	208d883a 	add	r6,r4,r2
    7814:	2180182e 	bgeu	r4,r6,7878 <__any_on+0x80>
    7818:	30bfff17 	ldw	r2,-4(r6)
    781c:	30ffff04 	addi	r3,r6,-4
    7820:	1000041e 	bne	r2,zero,7834 <__any_on+0x3c>
    7824:	20c0142e 	bgeu	r4,r3,7878 <__any_on+0x80>
    7828:	18ffff04 	addi	r3,r3,-4
    782c:	18800017 	ldw	r2,0(r3)
    7830:	103ffc26 	beq	r2,zero,7824 <__any_on+0x2c>
    7834:	00800044 	movi	r2,1
    7838:	f800283a 	ret
    783c:	18800a0e 	bge	r3,r2,7868 <__any_on+0x70>
    7840:	294007cc 	andi	r5,r5,31
    7844:	28000826 	beq	r5,zero,7868 <__any_on+0x70>
    7848:	18c5883a 	add	r2,r3,r3
    784c:	1085883a 	add	r2,r2,r2
    7850:	208d883a 	add	r6,r4,r2
    7854:	30c00017 	ldw	r3,0(r6)
    7858:	1944d83a 	srl	r2,r3,r5
    785c:	1144983a 	sll	r2,r2,r5
    7860:	18bff41e 	bne	r3,r2,7834 <__any_on+0x3c>
    7864:	003feb06 	br	7814 <__any_on+0x1c>
    7868:	18c5883a 	add	r2,r3,r3
    786c:	1085883a 	add	r2,r2,r2
    7870:	208d883a 	add	r6,r4,r2
    7874:	003fe706 	br	7814 <__any_on+0x1c>
    7878:	0005883a 	mov	r2,zero
    787c:	f800283a 	ret

00007880 <_Balloc>:
    7880:	20c01317 	ldw	r3,76(r4)
    7884:	defffb04 	addi	sp,sp,-20
    7888:	dcc00315 	stw	r19,12(sp)
    788c:	dc800215 	stw	r18,8(sp)
    7890:	dfc00415 	stw	ra,16(sp)
    7894:	2825883a 	mov	r18,r5
    7898:	dc400115 	stw	r17,4(sp)
    789c:	dc000015 	stw	r16,0(sp)
    78a0:	2027883a 	mov	r19,r4
    78a4:	01800404 	movi	r6,16
    78a8:	01400104 	movi	r5,4
    78ac:	18001726 	beq	r3,zero,790c <_Balloc+0x8c>
    78b0:	01400044 	movi	r5,1
    78b4:	9485883a 	add	r2,r18,r18
    78b8:	2ca2983a 	sll	r17,r5,r18
    78bc:	1085883a 	add	r2,r2,r2
    78c0:	10c7883a 	add	r3,r2,r3
    78c4:	1c000017 	ldw	r16,0(r3)
    78c8:	8c4d883a 	add	r6,r17,r17
    78cc:	318d883a 	add	r6,r6,r6
    78d0:	9809883a 	mov	r4,r19
    78d4:	31800504 	addi	r6,r6,20
    78d8:	80001226 	beq	r16,zero,7924 <_Balloc+0xa4>
    78dc:	80800017 	ldw	r2,0(r16)
    78e0:	18800015 	stw	r2,0(r3)
    78e4:	80000415 	stw	zero,16(r16)
    78e8:	80000315 	stw	zero,12(r16)
    78ec:	8005883a 	mov	r2,r16
    78f0:	dfc00417 	ldw	ra,16(sp)
    78f4:	dcc00317 	ldw	r19,12(sp)
    78f8:	dc800217 	ldw	r18,8(sp)
    78fc:	dc400117 	ldw	r17,4(sp)
    7900:	dc000017 	ldw	r16,0(sp)
    7904:	dec00504 	addi	sp,sp,20
    7908:	f800283a 	ret
    790c:	0008ce00 	call	8ce0 <_calloc_r>
    7910:	1007883a 	mov	r3,r2
    7914:	0021883a 	mov	r16,zero
    7918:	98801315 	stw	r2,76(r19)
    791c:	103fe41e 	bne	r2,zero,78b0 <_Balloc+0x30>
    7920:	003ff206 	br	78ec <_Balloc+0x6c>
    7924:	0008ce00 	call	8ce0 <_calloc_r>
    7928:	103ff026 	beq	r2,zero,78ec <_Balloc+0x6c>
    792c:	1021883a 	mov	r16,r2
    7930:	14800115 	stw	r18,4(r2)
    7934:	14400215 	stw	r17,8(r2)
    7938:	003fea06 	br	78e4 <_Balloc+0x64>

0000793c <__d2b>:
    793c:	defff504 	addi	sp,sp,-44
    7940:	dcc00515 	stw	r19,20(sp)
    7944:	04c00044 	movi	r19,1
    7948:	dc000215 	stw	r16,8(sp)
    794c:	2821883a 	mov	r16,r5
    7950:	980b883a 	mov	r5,r19
    7954:	ddc00915 	stw	r23,36(sp)
    7958:	dd800815 	stw	r22,32(sp)
    795c:	dd400715 	stw	r21,28(sp)
    7960:	dd000615 	stw	r20,24(sp)
    7964:	dc800415 	stw	r18,16(sp)
    7968:	dc400315 	stw	r17,12(sp)
    796c:	dfc00a15 	stw	ra,40(sp)
    7970:	3023883a 	mov	r17,r6
    7974:	382d883a 	mov	r22,r7
    7978:	ddc00b17 	ldw	r23,44(sp)
    797c:	00078800 	call	7880 <_Balloc>
    7980:	1025883a 	mov	r18,r2
    7984:	00a00034 	movhi	r2,32768
    7988:	10bfffc4 	addi	r2,r2,-1
    798c:	8888703a 	and	r4,r17,r2
    7990:	202ad53a 	srli	r21,r4,20
    7994:	00800434 	movhi	r2,16
    7998:	10bfffc4 	addi	r2,r2,-1
    799c:	8886703a 	and	r3,r17,r2
    79a0:	a829003a 	cmpeq	r20,r21,zero
    79a4:	800b883a 	mov	r5,r16
    79a8:	d8c00115 	stw	r3,4(sp)
    79ac:	94000504 	addi	r16,r18,20
    79b0:	a000021e 	bne	r20,zero,79bc <__d2b+0x80>
    79b4:	18c00434 	orhi	r3,r3,16
    79b8:	d8c00115 	stw	r3,4(sp)
    79bc:	28002726 	beq	r5,zero,7a5c <__d2b+0x120>
    79c0:	d809883a 	mov	r4,sp
    79c4:	d9400015 	stw	r5,0(sp)
    79c8:	00073980 	call	7398 <__lo0bits>
    79cc:	100d883a 	mov	r6,r2
    79d0:	10003526 	beq	r2,zero,7aa8 <__d2b+0x16c>
    79d4:	d8c00117 	ldw	r3,4(sp)
    79d8:	00800804 	movi	r2,32
    79dc:	1185c83a 	sub	r2,r2,r6
    79e0:	d9000017 	ldw	r4,0(sp)
    79e4:	1886983a 	sll	r3,r3,r2
    79e8:	1906b03a 	or	r3,r3,r4
    79ec:	90c00515 	stw	r3,20(r18)
    79f0:	d8c00117 	ldw	r3,4(sp)
    79f4:	1986d83a 	srl	r3,r3,r6
    79f8:	d8c00115 	stw	r3,4(sp)
    79fc:	180b003a 	cmpeq	r5,r3,zero
    7a00:	00800084 	movi	r2,2
    7a04:	114bc83a 	sub	r5,r2,r5
    7a08:	80c00115 	stw	r3,4(r16)
    7a0c:	91400415 	stw	r5,16(r18)
    7a10:	a0001a1e 	bne	r20,zero,7a7c <__d2b+0x140>
    7a14:	3545883a 	add	r2,r6,r21
    7a18:	10bef344 	addi	r2,r2,-1075
    7a1c:	00c00d44 	movi	r3,53
    7a20:	b0800015 	stw	r2,0(r22)
    7a24:	1987c83a 	sub	r3,r3,r6
    7a28:	b8c00015 	stw	r3,0(r23)
    7a2c:	9005883a 	mov	r2,r18
    7a30:	dfc00a17 	ldw	ra,40(sp)
    7a34:	ddc00917 	ldw	r23,36(sp)
    7a38:	dd800817 	ldw	r22,32(sp)
    7a3c:	dd400717 	ldw	r21,28(sp)
    7a40:	dd000617 	ldw	r20,24(sp)
    7a44:	dcc00517 	ldw	r19,20(sp)
    7a48:	dc800417 	ldw	r18,16(sp)
    7a4c:	dc400317 	ldw	r17,12(sp)
    7a50:	dc000217 	ldw	r16,8(sp)
    7a54:	dec00b04 	addi	sp,sp,44
    7a58:	f800283a 	ret
    7a5c:	d9000104 	addi	r4,sp,4
    7a60:	00073980 	call	7398 <__lo0bits>
    7a64:	11800804 	addi	r6,r2,32
    7a68:	d8800117 	ldw	r2,4(sp)
    7a6c:	94c00415 	stw	r19,16(r18)
    7a70:	980b883a 	mov	r5,r19
    7a74:	90800515 	stw	r2,20(r18)
    7a78:	a03fe626 	beq	r20,zero,7a14 <__d2b+0xd8>
    7a7c:	2945883a 	add	r2,r5,r5
    7a80:	1085883a 	add	r2,r2,r2
    7a84:	1405883a 	add	r2,r2,r16
    7a88:	113fff17 	ldw	r4,-4(r2)
    7a8c:	30fef384 	addi	r3,r6,-1074
    7a90:	2820917a 	slli	r16,r5,5
    7a94:	b0c00015 	stw	r3,0(r22)
    7a98:	00073280 	call	7328 <__hi0bits>
    7a9c:	80a1c83a 	sub	r16,r16,r2
    7aa0:	bc000015 	stw	r16,0(r23)
    7aa4:	003fe106 	br	7a2c <__d2b+0xf0>
    7aa8:	d8800017 	ldw	r2,0(sp)
    7aac:	90800515 	stw	r2,20(r18)
    7ab0:	d8c00117 	ldw	r3,4(sp)
    7ab4:	003fd106 	br	79fc <__d2b+0xc0>

00007ab8 <__mdiff>:
    7ab8:	defffb04 	addi	sp,sp,-20
    7abc:	dc000015 	stw	r16,0(sp)
    7ac0:	2821883a 	mov	r16,r5
    7ac4:	dc800215 	stw	r18,8(sp)
    7ac8:	300b883a 	mov	r5,r6
    7acc:	2025883a 	mov	r18,r4
    7ad0:	8009883a 	mov	r4,r16
    7ad4:	dc400115 	stw	r17,4(sp)
    7ad8:	dfc00415 	stw	ra,16(sp)
    7adc:	dcc00315 	stw	r19,12(sp)
    7ae0:	3023883a 	mov	r17,r6
    7ae4:	000745c0 	call	745c <__mcmp>
    7ae8:	10004226 	beq	r2,zero,7bf4 <__mdiff+0x13c>
    7aec:	10005016 	blt	r2,zero,7c30 <__mdiff+0x178>
    7af0:	0027883a 	mov	r19,zero
    7af4:	81400117 	ldw	r5,4(r16)
    7af8:	9009883a 	mov	r4,r18
    7afc:	00078800 	call	7880 <_Balloc>
    7b00:	1019883a 	mov	r12,r2
    7b04:	82800417 	ldw	r10,16(r16)
    7b08:	88800417 	ldw	r2,16(r17)
    7b0c:	81800504 	addi	r6,r16,20
    7b10:	5287883a 	add	r3,r10,r10
    7b14:	1085883a 	add	r2,r2,r2
    7b18:	18c7883a 	add	r3,r3,r3
    7b1c:	1085883a 	add	r2,r2,r2
    7b20:	8a000504 	addi	r8,r17,20
    7b24:	64c00315 	stw	r19,12(r12)
    7b28:	30db883a 	add	r13,r6,r3
    7b2c:	4097883a 	add	r11,r8,r2
    7b30:	61c00504 	addi	r7,r12,20
    7b34:	0013883a 	mov	r9,zero
    7b38:	31000017 	ldw	r4,0(r6)
    7b3c:	41400017 	ldw	r5,0(r8)
    7b40:	42000104 	addi	r8,r8,4
    7b44:	20bfffcc 	andi	r2,r4,65535
    7b48:	28ffffcc 	andi	r3,r5,65535
    7b4c:	10c5c83a 	sub	r2,r2,r3
    7b50:	1245883a 	add	r2,r2,r9
    7b54:	2008d43a 	srli	r4,r4,16
    7b58:	280ad43a 	srli	r5,r5,16
    7b5c:	1007d43a 	srai	r3,r2,16
    7b60:	3880000d 	sth	r2,0(r7)
    7b64:	2149c83a 	sub	r4,r4,r5
    7b68:	20c9883a 	add	r4,r4,r3
    7b6c:	3900008d 	sth	r4,2(r7)
    7b70:	31800104 	addi	r6,r6,4
    7b74:	39c00104 	addi	r7,r7,4
    7b78:	2013d43a 	srai	r9,r4,16
    7b7c:	42ffee36 	bltu	r8,r11,7b38 <__mdiff+0x80>
    7b80:	33400c2e 	bgeu	r6,r13,7bb4 <__mdiff+0xfc>
    7b84:	30800017 	ldw	r2,0(r6)
    7b88:	31800104 	addi	r6,r6,4
    7b8c:	10ffffcc 	andi	r3,r2,65535
    7b90:	1a47883a 	add	r3,r3,r9
    7b94:	1004d43a 	srli	r2,r2,16
    7b98:	1809d43a 	srai	r4,r3,16
    7b9c:	38c0000d 	sth	r3,0(r7)
    7ba0:	1105883a 	add	r2,r2,r4
    7ba4:	3880008d 	sth	r2,2(r7)
    7ba8:	1013d43a 	srai	r9,r2,16
    7bac:	39c00104 	addi	r7,r7,4
    7bb0:	337ff436 	bltu	r6,r13,7b84 <__mdiff+0xcc>
    7bb4:	38bfff17 	ldw	r2,-4(r7)
    7bb8:	38ffff04 	addi	r3,r7,-4
    7bbc:	1000041e 	bne	r2,zero,7bd0 <__mdiff+0x118>
    7bc0:	18ffff04 	addi	r3,r3,-4
    7bc4:	18800017 	ldw	r2,0(r3)
    7bc8:	52bfffc4 	addi	r10,r10,-1
    7bcc:	103ffc26 	beq	r2,zero,7bc0 <__mdiff+0x108>
    7bd0:	6005883a 	mov	r2,r12
    7bd4:	62800415 	stw	r10,16(r12)
    7bd8:	dfc00417 	ldw	ra,16(sp)
    7bdc:	dcc00317 	ldw	r19,12(sp)
    7be0:	dc800217 	ldw	r18,8(sp)
    7be4:	dc400117 	ldw	r17,4(sp)
    7be8:	dc000017 	ldw	r16,0(sp)
    7bec:	dec00504 	addi	sp,sp,20
    7bf0:	f800283a 	ret
    7bf4:	9009883a 	mov	r4,r18
    7bf8:	000b883a 	mov	r5,zero
    7bfc:	00078800 	call	7880 <_Balloc>
    7c00:	1019883a 	mov	r12,r2
    7c04:	00800044 	movi	r2,1
    7c08:	60800415 	stw	r2,16(r12)
    7c0c:	6005883a 	mov	r2,r12
    7c10:	60000515 	stw	zero,20(r12)
    7c14:	dfc00417 	ldw	ra,16(sp)
    7c18:	dcc00317 	ldw	r19,12(sp)
    7c1c:	dc800217 	ldw	r18,8(sp)
    7c20:	dc400117 	ldw	r17,4(sp)
    7c24:	dc000017 	ldw	r16,0(sp)
    7c28:	dec00504 	addi	sp,sp,20
    7c2c:	f800283a 	ret
    7c30:	880d883a 	mov	r6,r17
    7c34:	04c00044 	movi	r19,1
    7c38:	8023883a 	mov	r17,r16
    7c3c:	3021883a 	mov	r16,r6
    7c40:	003fac06 	br	7af4 <__mdiff+0x3c>

00007c44 <__lshift>:
    7c44:	defff904 	addi	sp,sp,-28
    7c48:	28800417 	ldw	r2,16(r5)
    7c4c:	dc000015 	stw	r16,0(sp)
    7c50:	3021d17a 	srai	r16,r6,5
    7c54:	28c00217 	ldw	r3,8(r5)
    7c58:	10800044 	addi	r2,r2,1
    7c5c:	dc400115 	stw	r17,4(sp)
    7c60:	80a3883a 	add	r17,r16,r2
    7c64:	dd400515 	stw	r21,20(sp)
    7c68:	dd000415 	stw	r20,16(sp)
    7c6c:	dc800215 	stw	r18,8(sp)
    7c70:	dfc00615 	stw	ra,24(sp)
    7c74:	2825883a 	mov	r18,r5
    7c78:	dcc00315 	stw	r19,12(sp)
    7c7c:	3029883a 	mov	r20,r6
    7c80:	202b883a 	mov	r21,r4
    7c84:	29400117 	ldw	r5,4(r5)
    7c88:	1c40030e 	bge	r3,r17,7c98 <__lshift+0x54>
    7c8c:	18c7883a 	add	r3,r3,r3
    7c90:	29400044 	addi	r5,r5,1
    7c94:	1c7ffd16 	blt	r3,r17,7c8c <__lshift+0x48>
    7c98:	a809883a 	mov	r4,r21
    7c9c:	00078800 	call	7880 <_Balloc>
    7ca0:	1027883a 	mov	r19,r2
    7ca4:	11400504 	addi	r5,r2,20
    7ca8:	0400090e 	bge	zero,r16,7cd0 <__lshift+0x8c>
    7cac:	2805883a 	mov	r2,r5
    7cb0:	0007883a 	mov	r3,zero
    7cb4:	18c00044 	addi	r3,r3,1
    7cb8:	10000015 	stw	zero,0(r2)
    7cbc:	10800104 	addi	r2,r2,4
    7cc0:	80fffc1e 	bne	r16,r3,7cb4 <__lshift+0x70>
    7cc4:	8405883a 	add	r2,r16,r16
    7cc8:	1085883a 	add	r2,r2,r2
    7ccc:	288b883a 	add	r5,r5,r2
    7cd0:	90800417 	ldw	r2,16(r18)
    7cd4:	91000504 	addi	r4,r18,20
    7cd8:	a18007cc 	andi	r6,r20,31
    7cdc:	1085883a 	add	r2,r2,r2
    7ce0:	1085883a 	add	r2,r2,r2
    7ce4:	208f883a 	add	r7,r4,r2
    7ce8:	30001e26 	beq	r6,zero,7d64 <__lshift+0x120>
    7cec:	00800804 	movi	r2,32
    7cf0:	1191c83a 	sub	r8,r2,r6
    7cf4:	0007883a 	mov	r3,zero
    7cf8:	20800017 	ldw	r2,0(r4)
    7cfc:	1184983a 	sll	r2,r2,r6
    7d00:	1884b03a 	or	r2,r3,r2
    7d04:	28800015 	stw	r2,0(r5)
    7d08:	20c00017 	ldw	r3,0(r4)
    7d0c:	21000104 	addi	r4,r4,4
    7d10:	29400104 	addi	r5,r5,4
    7d14:	1a06d83a 	srl	r3,r3,r8
    7d18:	21fff736 	bltu	r4,r7,7cf8 <__lshift+0xb4>
    7d1c:	28c00015 	stw	r3,0(r5)
    7d20:	18000126 	beq	r3,zero,7d28 <__lshift+0xe4>
    7d24:	8c400044 	addi	r17,r17,1
    7d28:	88bfffc4 	addi	r2,r17,-1
    7d2c:	98800415 	stw	r2,16(r19)
    7d30:	a809883a 	mov	r4,r21
    7d34:	900b883a 	mov	r5,r18
    7d38:	00073000 	call	7300 <_Bfree>
    7d3c:	9805883a 	mov	r2,r19
    7d40:	dfc00617 	ldw	ra,24(sp)
    7d44:	dd400517 	ldw	r21,20(sp)
    7d48:	dd000417 	ldw	r20,16(sp)
    7d4c:	dcc00317 	ldw	r19,12(sp)
    7d50:	dc800217 	ldw	r18,8(sp)
    7d54:	dc400117 	ldw	r17,4(sp)
    7d58:	dc000017 	ldw	r16,0(sp)
    7d5c:	dec00704 	addi	sp,sp,28
    7d60:	f800283a 	ret
    7d64:	20800017 	ldw	r2,0(r4)
    7d68:	21000104 	addi	r4,r4,4
    7d6c:	28800015 	stw	r2,0(r5)
    7d70:	29400104 	addi	r5,r5,4
    7d74:	21ffec2e 	bgeu	r4,r7,7d28 <__lshift+0xe4>
    7d78:	20800017 	ldw	r2,0(r4)
    7d7c:	21000104 	addi	r4,r4,4
    7d80:	28800015 	stw	r2,0(r5)
    7d84:	29400104 	addi	r5,r5,4
    7d88:	21fff636 	bltu	r4,r7,7d64 <__lshift+0x120>
    7d8c:	003fe606 	br	7d28 <__lshift+0xe4>

00007d90 <__multiply>:
    7d90:	defff004 	addi	sp,sp,-64
    7d94:	dc800815 	stw	r18,32(sp)
    7d98:	dc400715 	stw	r17,28(sp)
    7d9c:	2c800417 	ldw	r18,16(r5)
    7da0:	34400417 	ldw	r17,16(r6)
    7da4:	dcc00915 	stw	r19,36(sp)
    7da8:	dc000615 	stw	r16,24(sp)
    7dac:	dfc00f15 	stw	ra,60(sp)
    7db0:	df000e15 	stw	fp,56(sp)
    7db4:	ddc00d15 	stw	r23,52(sp)
    7db8:	dd800c15 	stw	r22,48(sp)
    7dbc:	dd400b15 	stw	r21,44(sp)
    7dc0:	dd000a15 	stw	r20,40(sp)
    7dc4:	2821883a 	mov	r16,r5
    7dc8:	3027883a 	mov	r19,r6
    7dcc:	9440040e 	bge	r18,r17,7de0 <__multiply+0x50>
    7dd0:	8825883a 	mov	r18,r17
    7dd4:	2c400417 	ldw	r17,16(r5)
    7dd8:	2827883a 	mov	r19,r5
    7ddc:	3021883a 	mov	r16,r6
    7de0:	80800217 	ldw	r2,8(r16)
    7de4:	9447883a 	add	r3,r18,r17
    7de8:	d8c00415 	stw	r3,16(sp)
    7dec:	81400117 	ldw	r5,4(r16)
    7df0:	10c0010e 	bge	r2,r3,7df8 <__multiply+0x68>
    7df4:	29400044 	addi	r5,r5,1
    7df8:	00078800 	call	7880 <_Balloc>
    7dfc:	d8800515 	stw	r2,20(sp)
    7e00:	d9000417 	ldw	r4,16(sp)
    7e04:	d8c00517 	ldw	r3,20(sp)
    7e08:	2105883a 	add	r2,r4,r4
    7e0c:	1085883a 	add	r2,r2,r2
    7e10:	19000504 	addi	r4,r3,20
    7e14:	2085883a 	add	r2,r4,r2
    7e18:	d8800315 	stw	r2,12(sp)
    7e1c:	2080052e 	bgeu	r4,r2,7e34 <__multiply+0xa4>
    7e20:	2005883a 	mov	r2,r4
    7e24:	d8c00317 	ldw	r3,12(sp)
    7e28:	10000015 	stw	zero,0(r2)
    7e2c:	10800104 	addi	r2,r2,4
    7e30:	10fffc36 	bltu	r2,r3,7e24 <__multiply+0x94>
    7e34:	8c45883a 	add	r2,r17,r17
    7e38:	9487883a 	add	r3,r18,r18
    7e3c:	9dc00504 	addi	r23,r19,20
    7e40:	1085883a 	add	r2,r2,r2
    7e44:	84000504 	addi	r16,r16,20
    7e48:	18c7883a 	add	r3,r3,r3
    7e4c:	b885883a 	add	r2,r23,r2
    7e50:	dc000015 	stw	r16,0(sp)
    7e54:	d8800215 	stw	r2,8(sp)
    7e58:	80f9883a 	add	fp,r16,r3
    7e5c:	b880432e 	bgeu	r23,r2,7f6c <__multiply+0x1dc>
    7e60:	d9000115 	stw	r4,4(sp)
    7e64:	b9000017 	ldw	r4,0(r23)
    7e68:	253fffcc 	andi	r20,r4,65535
    7e6c:	a0001a26 	beq	r20,zero,7ed8 <__multiply+0x148>
    7e70:	dcc00017 	ldw	r19,0(sp)
    7e74:	dc800117 	ldw	r18,4(sp)
    7e78:	002b883a 	mov	r21,zero
    7e7c:	9c400017 	ldw	r17,0(r19)
    7e80:	94000017 	ldw	r16,0(r18)
    7e84:	a009883a 	mov	r4,r20
    7e88:	897fffcc 	andi	r5,r17,65535
    7e8c:	0001ca00 	call	1ca0 <__mulsi3>
    7e90:	880ad43a 	srli	r5,r17,16
    7e94:	80ffffcc 	andi	r3,r16,65535
    7e98:	a8c7883a 	add	r3,r21,r3
    7e9c:	a009883a 	mov	r4,r20
    7ea0:	10e3883a 	add	r17,r2,r3
    7ea4:	8020d43a 	srli	r16,r16,16
    7ea8:	0001ca00 	call	1ca0 <__mulsi3>
    7eac:	8806d43a 	srli	r3,r17,16
    7eb0:	1405883a 	add	r2,r2,r16
    7eb4:	9cc00104 	addi	r19,r19,4
    7eb8:	1887883a 	add	r3,r3,r2
    7ebc:	90c0008d 	sth	r3,2(r18)
    7ec0:	9440000d 	sth	r17,0(r18)
    7ec4:	182ad43a 	srli	r21,r3,16
    7ec8:	94800104 	addi	r18,r18,4
    7ecc:	9f3feb36 	bltu	r19,fp,7e7c <__multiply+0xec>
    7ed0:	95400015 	stw	r21,0(r18)
    7ed4:	b9000017 	ldw	r4,0(r23)
    7ed8:	202ad43a 	srli	r21,r4,16
    7edc:	a8001c26 	beq	r21,zero,7f50 <__multiply+0x1c0>
    7ee0:	d9000117 	ldw	r4,4(sp)
    7ee4:	dd000017 	ldw	r20,0(sp)
    7ee8:	002d883a 	mov	r22,zero
    7eec:	24c00017 	ldw	r19,0(r4)
    7ef0:	2025883a 	mov	r18,r4
    7ef4:	9823883a 	mov	r17,r19
    7ef8:	a4000017 	ldw	r16,0(r20)
    7efc:	a809883a 	mov	r4,r21
    7f00:	a5000104 	addi	r20,r20,4
    7f04:	817fffcc 	andi	r5,r16,65535
    7f08:	0001ca00 	call	1ca0 <__mulsi3>
    7f0c:	8806d43a 	srli	r3,r17,16
    7f10:	800ad43a 	srli	r5,r16,16
    7f14:	94c0000d 	sth	r19,0(r18)
    7f18:	b0c7883a 	add	r3,r22,r3
    7f1c:	10e1883a 	add	r16,r2,r3
    7f20:	9400008d 	sth	r16,2(r18)
    7f24:	a809883a 	mov	r4,r21
    7f28:	94800104 	addi	r18,r18,4
    7f2c:	0001ca00 	call	1ca0 <__mulsi3>
    7f30:	94400017 	ldw	r17,0(r18)
    7f34:	8020d43a 	srli	r16,r16,16
    7f38:	88ffffcc 	andi	r3,r17,65535
    7f3c:	10c5883a 	add	r2,r2,r3
    7f40:	80a7883a 	add	r19,r16,r2
    7f44:	982cd43a 	srli	r22,r19,16
    7f48:	a73feb36 	bltu	r20,fp,7ef8 <__multiply+0x168>
    7f4c:	94c00015 	stw	r19,0(r18)
    7f50:	d8800217 	ldw	r2,8(sp)
    7f54:	bdc00104 	addi	r23,r23,4
    7f58:	b880042e 	bgeu	r23,r2,7f6c <__multiply+0x1dc>
    7f5c:	d8c00117 	ldw	r3,4(sp)
    7f60:	18c00104 	addi	r3,r3,4
    7f64:	d8c00115 	stw	r3,4(sp)
    7f68:	003fbe06 	br	7e64 <__multiply+0xd4>
    7f6c:	d9000417 	ldw	r4,16(sp)
    7f70:	01000c0e 	bge	zero,r4,7fa4 <__multiply+0x214>
    7f74:	d8c00317 	ldw	r3,12(sp)
    7f78:	18bfff17 	ldw	r2,-4(r3)
    7f7c:	18ffff04 	addi	r3,r3,-4
    7f80:	10000326 	beq	r2,zero,7f90 <__multiply+0x200>
    7f84:	00000706 	br	7fa4 <__multiply+0x214>
    7f88:	18800017 	ldw	r2,0(r3)
    7f8c:	1000051e 	bne	r2,zero,7fa4 <__multiply+0x214>
    7f90:	d9000417 	ldw	r4,16(sp)
    7f94:	18ffff04 	addi	r3,r3,-4
    7f98:	213fffc4 	addi	r4,r4,-1
    7f9c:	d9000415 	stw	r4,16(sp)
    7fa0:	203ff91e 	bne	r4,zero,7f88 <__multiply+0x1f8>
    7fa4:	d8800417 	ldw	r2,16(sp)
    7fa8:	d8c00517 	ldw	r3,20(sp)
    7fac:	18800415 	stw	r2,16(r3)
    7fb0:	1805883a 	mov	r2,r3
    7fb4:	dfc00f17 	ldw	ra,60(sp)
    7fb8:	df000e17 	ldw	fp,56(sp)
    7fbc:	ddc00d17 	ldw	r23,52(sp)
    7fc0:	dd800c17 	ldw	r22,48(sp)
    7fc4:	dd400b17 	ldw	r21,44(sp)
    7fc8:	dd000a17 	ldw	r20,40(sp)
    7fcc:	dcc00917 	ldw	r19,36(sp)
    7fd0:	dc800817 	ldw	r18,32(sp)
    7fd4:	dc400717 	ldw	r17,28(sp)
    7fd8:	dc000617 	ldw	r16,24(sp)
    7fdc:	dec01004 	addi	sp,sp,64
    7fe0:	f800283a 	ret

00007fe4 <__i2b>:
    7fe4:	defffd04 	addi	sp,sp,-12
    7fe8:	dc000015 	stw	r16,0(sp)
    7fec:	04000044 	movi	r16,1
    7ff0:	dc800115 	stw	r18,4(sp)
    7ff4:	2825883a 	mov	r18,r5
    7ff8:	800b883a 	mov	r5,r16
    7ffc:	dfc00215 	stw	ra,8(sp)
    8000:	00078800 	call	7880 <_Balloc>
    8004:	14000415 	stw	r16,16(r2)
    8008:	14800515 	stw	r18,20(r2)
    800c:	dfc00217 	ldw	ra,8(sp)
    8010:	dc800117 	ldw	r18,4(sp)
    8014:	dc000017 	ldw	r16,0(sp)
    8018:	dec00304 	addi	sp,sp,12
    801c:	f800283a 	ret

00008020 <__multadd>:
    8020:	defff604 	addi	sp,sp,-40
    8024:	dd800615 	stw	r22,24(sp)
    8028:	2d800417 	ldw	r22,16(r5)
    802c:	df000815 	stw	fp,32(sp)
    8030:	ddc00715 	stw	r23,28(sp)
    8034:	dd400515 	stw	r21,20(sp)
    8038:	dd000415 	stw	r20,16(sp)
    803c:	dcc00315 	stw	r19,12(sp)
    8040:	dc800215 	stw	r18,8(sp)
    8044:	dfc00915 	stw	ra,36(sp)
    8048:	dc400115 	stw	r17,4(sp)
    804c:	dc000015 	stw	r16,0(sp)
    8050:	282f883a 	mov	r23,r5
    8054:	2039883a 	mov	fp,r4
    8058:	302b883a 	mov	r21,r6
    805c:	3829883a 	mov	r20,r7
    8060:	2c800504 	addi	r18,r5,20
    8064:	0027883a 	mov	r19,zero
    8068:	94400017 	ldw	r17,0(r18)
    806c:	a80b883a 	mov	r5,r21
    8070:	9cc00044 	addi	r19,r19,1
    8074:	893fffcc 	andi	r4,r17,65535
    8078:	0001ca00 	call	1ca0 <__mulsi3>
    807c:	8808d43a 	srli	r4,r17,16
    8080:	1521883a 	add	r16,r2,r20
    8084:	a80b883a 	mov	r5,r21
    8088:	0001ca00 	call	1ca0 <__mulsi3>
    808c:	8008d43a 	srli	r4,r16,16
    8090:	843fffcc 	andi	r16,r16,65535
    8094:	1105883a 	add	r2,r2,r4
    8098:	1006943a 	slli	r3,r2,16
    809c:	1028d43a 	srli	r20,r2,16
    80a0:	1c07883a 	add	r3,r3,r16
    80a4:	90c00015 	stw	r3,0(r18)
    80a8:	94800104 	addi	r18,r18,4
    80ac:	9dbfee16 	blt	r19,r22,8068 <__multadd+0x48>
    80b0:	a0000826 	beq	r20,zero,80d4 <__multadd+0xb4>
    80b4:	b8800217 	ldw	r2,8(r23)
    80b8:	b080130e 	bge	r22,r2,8108 <__multadd+0xe8>
    80bc:	b585883a 	add	r2,r22,r22
    80c0:	1085883a 	add	r2,r2,r2
    80c4:	15c5883a 	add	r2,r2,r23
    80c8:	b0c00044 	addi	r3,r22,1
    80cc:	15000515 	stw	r20,20(r2)
    80d0:	b8c00415 	stw	r3,16(r23)
    80d4:	b805883a 	mov	r2,r23
    80d8:	dfc00917 	ldw	ra,36(sp)
    80dc:	df000817 	ldw	fp,32(sp)
    80e0:	ddc00717 	ldw	r23,28(sp)
    80e4:	dd800617 	ldw	r22,24(sp)
    80e8:	dd400517 	ldw	r21,20(sp)
    80ec:	dd000417 	ldw	r20,16(sp)
    80f0:	dcc00317 	ldw	r19,12(sp)
    80f4:	dc800217 	ldw	r18,8(sp)
    80f8:	dc400117 	ldw	r17,4(sp)
    80fc:	dc000017 	ldw	r16,0(sp)
    8100:	dec00a04 	addi	sp,sp,40
    8104:	f800283a 	ret
    8108:	b9400117 	ldw	r5,4(r23)
    810c:	e009883a 	mov	r4,fp
    8110:	29400044 	addi	r5,r5,1
    8114:	00078800 	call	7880 <_Balloc>
    8118:	b9800417 	ldw	r6,16(r23)
    811c:	b9400304 	addi	r5,r23,12
    8120:	11000304 	addi	r4,r2,12
    8124:	318d883a 	add	r6,r6,r6
    8128:	318d883a 	add	r6,r6,r6
    812c:	31800204 	addi	r6,r6,8
    8130:	1023883a 	mov	r17,r2
    8134:	00070e80 	call	70e8 <memcpy>
    8138:	b80b883a 	mov	r5,r23
    813c:	e009883a 	mov	r4,fp
    8140:	00073000 	call	7300 <_Bfree>
    8144:	882f883a 	mov	r23,r17
    8148:	003fdc06 	br	80bc <__multadd+0x9c>

0000814c <__pow5mult>:
    814c:	defffa04 	addi	sp,sp,-24
    8150:	308000cc 	andi	r2,r6,3
    8154:	dd000415 	stw	r20,16(sp)
    8158:	dcc00315 	stw	r19,12(sp)
    815c:	dc000015 	stw	r16,0(sp)
    8160:	dfc00515 	stw	ra,20(sp)
    8164:	dc800215 	stw	r18,8(sp)
    8168:	dc400115 	stw	r17,4(sp)
    816c:	3021883a 	mov	r16,r6
    8170:	2027883a 	mov	r19,r4
    8174:	2829883a 	mov	r20,r5
    8178:	10002b1e 	bne	r2,zero,8228 <__pow5mult+0xdc>
    817c:	8025d0ba 	srai	r18,r16,2
    8180:	90001b26 	beq	r18,zero,81f0 <__pow5mult+0xa4>
    8184:	9c001217 	ldw	r16,72(r19)
    8188:	8000081e 	bne	r16,zero,81ac <__pow5mult+0x60>
    818c:	00003006 	br	8250 <__pow5mult+0x104>
    8190:	800b883a 	mov	r5,r16
    8194:	800d883a 	mov	r6,r16
    8198:	9809883a 	mov	r4,r19
    819c:	90001426 	beq	r18,zero,81f0 <__pow5mult+0xa4>
    81a0:	80800017 	ldw	r2,0(r16)
    81a4:	10001b26 	beq	r2,zero,8214 <__pow5mult+0xc8>
    81a8:	1021883a 	mov	r16,r2
    81ac:	9080004c 	andi	r2,r18,1
    81b0:	1005003a 	cmpeq	r2,r2,zero
    81b4:	9025d07a 	srai	r18,r18,1
    81b8:	800d883a 	mov	r6,r16
    81bc:	9809883a 	mov	r4,r19
    81c0:	a00b883a 	mov	r5,r20
    81c4:	103ff21e 	bne	r2,zero,8190 <__pow5mult+0x44>
    81c8:	0007d900 	call	7d90 <__multiply>
    81cc:	a00b883a 	mov	r5,r20
    81d0:	9809883a 	mov	r4,r19
    81d4:	1023883a 	mov	r17,r2
    81d8:	00073000 	call	7300 <_Bfree>
    81dc:	8829883a 	mov	r20,r17
    81e0:	800b883a 	mov	r5,r16
    81e4:	800d883a 	mov	r6,r16
    81e8:	9809883a 	mov	r4,r19
    81ec:	903fec1e 	bne	r18,zero,81a0 <__pow5mult+0x54>
    81f0:	a005883a 	mov	r2,r20
    81f4:	dfc00517 	ldw	ra,20(sp)
    81f8:	dd000417 	ldw	r20,16(sp)
    81fc:	dcc00317 	ldw	r19,12(sp)
    8200:	dc800217 	ldw	r18,8(sp)
    8204:	dc400117 	ldw	r17,4(sp)
    8208:	dc000017 	ldw	r16,0(sp)
    820c:	dec00604 	addi	sp,sp,24
    8210:	f800283a 	ret
    8214:	0007d900 	call	7d90 <__multiply>
    8218:	80800015 	stw	r2,0(r16)
    821c:	1021883a 	mov	r16,r2
    8220:	10000015 	stw	zero,0(r2)
    8224:	003fe106 	br	81ac <__pow5mult+0x60>
    8228:	1085883a 	add	r2,r2,r2
    822c:	00c00074 	movhi	r3,1
    8230:	18f8f604 	addi	r3,r3,-7208
    8234:	1085883a 	add	r2,r2,r2
    8238:	10c5883a 	add	r2,r2,r3
    823c:	11bfff17 	ldw	r6,-4(r2)
    8240:	000f883a 	mov	r7,zero
    8244:	00080200 	call	8020 <__multadd>
    8248:	1029883a 	mov	r20,r2
    824c:	003fcb06 	br	817c <__pow5mult+0x30>
    8250:	9809883a 	mov	r4,r19
    8254:	01409c44 	movi	r5,625
    8258:	0007fe40 	call	7fe4 <__i2b>
    825c:	98801215 	stw	r2,72(r19)
    8260:	1021883a 	mov	r16,r2
    8264:	10000015 	stw	zero,0(r2)
    8268:	003fd006 	br	81ac <__pow5mult+0x60>

0000826c <__s2b>:
    826c:	defff904 	addi	sp,sp,-28
    8270:	dcc00315 	stw	r19,12(sp)
    8274:	dc800215 	stw	r18,8(sp)
    8278:	2827883a 	mov	r19,r5
    827c:	2025883a 	mov	r18,r4
    8280:	01400244 	movi	r5,9
    8284:	39000204 	addi	r4,r7,8
    8288:	dd000415 	stw	r20,16(sp)
    828c:	dc400115 	stw	r17,4(sp)
    8290:	dfc00615 	stw	ra,24(sp)
    8294:	dd400515 	stw	r21,20(sp)
    8298:	dc000015 	stw	r16,0(sp)
    829c:	3829883a 	mov	r20,r7
    82a0:	3023883a 	mov	r17,r6
    82a4:	0001bd00 	call	1bd0 <__divsi3>
    82a8:	00c00044 	movi	r3,1
    82ac:	1880350e 	bge	r3,r2,8384 <__s2b+0x118>
    82b0:	000b883a 	mov	r5,zero
    82b4:	18c7883a 	add	r3,r3,r3
    82b8:	29400044 	addi	r5,r5,1
    82bc:	18bffd16 	blt	r3,r2,82b4 <__s2b+0x48>
    82c0:	9009883a 	mov	r4,r18
    82c4:	00078800 	call	7880 <_Balloc>
    82c8:	1011883a 	mov	r8,r2
    82cc:	d8800717 	ldw	r2,28(sp)
    82d0:	00c00044 	movi	r3,1
    82d4:	01800244 	movi	r6,9
    82d8:	40800515 	stw	r2,20(r8)
    82dc:	40c00415 	stw	r3,16(r8)
    82e0:	3440260e 	bge	r6,r17,837c <__s2b+0x110>
    82e4:	3021883a 	mov	r16,r6
    82e8:	99ab883a 	add	r21,r19,r6
    82ec:	9c05883a 	add	r2,r19,r16
    82f0:	11c00007 	ldb	r7,0(r2)
    82f4:	400b883a 	mov	r5,r8
    82f8:	9009883a 	mov	r4,r18
    82fc:	39fff404 	addi	r7,r7,-48
    8300:	01800284 	movi	r6,10
    8304:	00080200 	call	8020 <__multadd>
    8308:	84000044 	addi	r16,r16,1
    830c:	1011883a 	mov	r8,r2
    8310:	8c3ff61e 	bne	r17,r16,82ec <__s2b+0x80>
    8314:	ac45883a 	add	r2,r21,r17
    8318:	117ffe04 	addi	r5,r2,-8
    831c:	880d883a 	mov	r6,r17
    8320:	35000c0e 	bge	r6,r20,8354 <__s2b+0xe8>
    8324:	a185c83a 	sub	r2,r20,r6
    8328:	2821883a 	mov	r16,r5
    832c:	28a3883a 	add	r17,r5,r2
    8330:	81c00007 	ldb	r7,0(r16)
    8334:	400b883a 	mov	r5,r8
    8338:	9009883a 	mov	r4,r18
    833c:	39fff404 	addi	r7,r7,-48
    8340:	01800284 	movi	r6,10
    8344:	00080200 	call	8020 <__multadd>
    8348:	84000044 	addi	r16,r16,1
    834c:	1011883a 	mov	r8,r2
    8350:	847ff71e 	bne	r16,r17,8330 <__s2b+0xc4>
    8354:	4005883a 	mov	r2,r8
    8358:	dfc00617 	ldw	ra,24(sp)
    835c:	dd400517 	ldw	r21,20(sp)
    8360:	dd000417 	ldw	r20,16(sp)
    8364:	dcc00317 	ldw	r19,12(sp)
    8368:	dc800217 	ldw	r18,8(sp)
    836c:	dc400117 	ldw	r17,4(sp)
    8370:	dc000017 	ldw	r16,0(sp)
    8374:	dec00704 	addi	sp,sp,28
    8378:	f800283a 	ret
    837c:	99400284 	addi	r5,r19,10
    8380:	003fe706 	br	8320 <__s2b+0xb4>
    8384:	000b883a 	mov	r5,zero
    8388:	003fcd06 	br	82c0 <__s2b+0x54>

0000838c <_realloc_r>:
    838c:	defff404 	addi	sp,sp,-48
    8390:	dd800815 	stw	r22,32(sp)
    8394:	dc800415 	stw	r18,16(sp)
    8398:	dc400315 	stw	r17,12(sp)
    839c:	dfc00b15 	stw	ra,44(sp)
    83a0:	df000a15 	stw	fp,40(sp)
    83a4:	ddc00915 	stw	r23,36(sp)
    83a8:	dd400715 	stw	r21,28(sp)
    83ac:	dd000615 	stw	r20,24(sp)
    83b0:	dcc00515 	stw	r19,20(sp)
    83b4:	dc000215 	stw	r16,8(sp)
    83b8:	2825883a 	mov	r18,r5
    83bc:	3023883a 	mov	r17,r6
    83c0:	202d883a 	mov	r22,r4
    83c4:	2800c926 	beq	r5,zero,86ec <_realloc_r+0x360>
    83c8:	000bf200 	call	bf20 <__malloc_lock>
    83cc:	943ffe04 	addi	r16,r18,-8
    83d0:	88c002c4 	addi	r3,r17,11
    83d4:	00800584 	movi	r2,22
    83d8:	82000117 	ldw	r8,4(r16)
    83dc:	10c01b2e 	bgeu	r2,r3,844c <_realloc_r+0xc0>
    83e0:	00bffe04 	movi	r2,-8
    83e4:	188e703a 	and	r7,r3,r2
    83e8:	3839883a 	mov	fp,r7
    83ec:	38001a16 	blt	r7,zero,8458 <_realloc_r+0xcc>
    83f0:	e4401936 	bltu	fp,r17,8458 <_realloc_r+0xcc>
    83f4:	013fff04 	movi	r4,-4
    83f8:	4126703a 	and	r19,r8,r4
    83fc:	99c02616 	blt	r19,r7,8498 <_realloc_r+0x10c>
    8400:	802b883a 	mov	r21,r16
    8404:	9829883a 	mov	r20,r19
    8408:	84000204 	addi	r16,r16,8
    840c:	a80f883a 	mov	r7,r21
    8410:	a70dc83a 	sub	r6,r20,fp
    8414:	008003c4 	movi	r2,15
    8418:	1180c136 	bltu	r2,r6,8720 <_realloc_r+0x394>
    841c:	38800117 	ldw	r2,4(r7)
    8420:	a549883a 	add	r4,r20,r21
    8424:	1080004c 	andi	r2,r2,1
    8428:	a084b03a 	or	r2,r20,r2
    842c:	38800115 	stw	r2,4(r7)
    8430:	20c00117 	ldw	r3,4(r4)
    8434:	18c00054 	ori	r3,r3,1
    8438:	20c00115 	stw	r3,4(r4)
    843c:	b009883a 	mov	r4,r22
    8440:	000bf400 	call	bf40 <__malloc_unlock>
    8444:	8023883a 	mov	r17,r16
    8448:	00000606 	br	8464 <_realloc_r+0xd8>
    844c:	01c00404 	movi	r7,16
    8450:	3839883a 	mov	fp,r7
    8454:	e47fe72e 	bgeu	fp,r17,83f4 <_realloc_r+0x68>
    8458:	00800304 	movi	r2,12
    845c:	0023883a 	mov	r17,zero
    8460:	b0800015 	stw	r2,0(r22)
    8464:	8805883a 	mov	r2,r17
    8468:	dfc00b17 	ldw	ra,44(sp)
    846c:	df000a17 	ldw	fp,40(sp)
    8470:	ddc00917 	ldw	r23,36(sp)
    8474:	dd800817 	ldw	r22,32(sp)
    8478:	dd400717 	ldw	r21,28(sp)
    847c:	dd000617 	ldw	r20,24(sp)
    8480:	dcc00517 	ldw	r19,20(sp)
    8484:	dc800417 	ldw	r18,16(sp)
    8488:	dc400317 	ldw	r17,12(sp)
    848c:	dc000217 	ldw	r16,8(sp)
    8490:	dec00c04 	addi	sp,sp,48
    8494:	f800283a 	ret
    8498:	00800074 	movhi	r2,1
    849c:	10ba4c04 	addi	r2,r2,-5840
    84a0:	12400217 	ldw	r9,8(r2)
    84a4:	84cd883a 	add	r6,r16,r19
    84a8:	802b883a 	mov	r21,r16
    84ac:	3240b926 	beq	r6,r9,8794 <_realloc_r+0x408>
    84b0:	31400117 	ldw	r5,4(r6)
    84b4:	00bfff84 	movi	r2,-2
    84b8:	2884703a 	and	r2,r5,r2
    84bc:	1185883a 	add	r2,r2,r6
    84c0:	10c00117 	ldw	r3,4(r2)
    84c4:	18c0004c 	andi	r3,r3,1
    84c8:	1807003a 	cmpeq	r3,r3,zero
    84cc:	1800a326 	beq	r3,zero,875c <_realloc_r+0x3d0>
    84d0:	2908703a 	and	r4,r5,r4
    84d4:	9929883a 	add	r20,r19,r4
    84d8:	a1c0a30e 	bge	r20,r7,8768 <_realloc_r+0x3dc>
    84dc:	4080004c 	andi	r2,r8,1
    84e0:	1000551e 	bne	r2,zero,8638 <_realloc_r+0x2ac>
    84e4:	80800017 	ldw	r2,0(r16)
    84e8:	80afc83a 	sub	r23,r16,r2
    84ec:	b8c00117 	ldw	r3,4(r23)
    84f0:	00bfff04 	movi	r2,-4
    84f4:	1884703a 	and	r2,r3,r2
    84f8:	30002e26 	beq	r6,zero,85b4 <_realloc_r+0x228>
    84fc:	3240b926 	beq	r6,r9,87e4 <_realloc_r+0x458>
    8500:	98a9883a 	add	r20,r19,r2
    8504:	2509883a 	add	r4,r4,r20
    8508:	d9000015 	stw	r4,0(sp)
    850c:	21c02a16 	blt	r4,r7,85b8 <_realloc_r+0x22c>
    8510:	30800317 	ldw	r2,12(r6)
    8514:	30c00217 	ldw	r3,8(r6)
    8518:	01400904 	movi	r5,36
    851c:	99bfff04 	addi	r6,r19,-4
    8520:	18800315 	stw	r2,12(r3)
    8524:	10c00215 	stw	r3,8(r2)
    8528:	b9000317 	ldw	r4,12(r23)
    852c:	b8800217 	ldw	r2,8(r23)
    8530:	b82b883a 	mov	r21,r23
    8534:	bc000204 	addi	r16,r23,8
    8538:	20800215 	stw	r2,8(r4)
    853c:	11000315 	stw	r4,12(r2)
    8540:	2980e436 	bltu	r5,r6,88d4 <_realloc_r+0x548>
    8544:	008004c4 	movi	r2,19
    8548:	9009883a 	mov	r4,r18
    854c:	8011883a 	mov	r8,r16
    8550:	11800f2e 	bgeu	r2,r6,8590 <_realloc_r+0x204>
    8554:	90800017 	ldw	r2,0(r18)
    8558:	ba000404 	addi	r8,r23,16
    855c:	91000204 	addi	r4,r18,8
    8560:	b8800215 	stw	r2,8(r23)
    8564:	90c00117 	ldw	r3,4(r18)
    8568:	008006c4 	movi	r2,27
    856c:	b8c00315 	stw	r3,12(r23)
    8570:	1180072e 	bgeu	r2,r6,8590 <_realloc_r+0x204>
    8574:	90c00217 	ldw	r3,8(r18)
    8578:	ba000604 	addi	r8,r23,24
    857c:	91000404 	addi	r4,r18,16
    8580:	b8c00415 	stw	r3,16(r23)
    8584:	90800317 	ldw	r2,12(r18)
    8588:	b8800515 	stw	r2,20(r23)
    858c:	3140e726 	beq	r6,r5,892c <_realloc_r+0x5a0>
    8590:	20800017 	ldw	r2,0(r4)
    8594:	dd000017 	ldw	r20,0(sp)
    8598:	b80f883a 	mov	r7,r23
    859c:	40800015 	stw	r2,0(r8)
    85a0:	20c00117 	ldw	r3,4(r4)
    85a4:	40c00115 	stw	r3,4(r8)
    85a8:	20800217 	ldw	r2,8(r4)
    85ac:	40800215 	stw	r2,8(r8)
    85b0:	003f9706 	br	8410 <_realloc_r+0x84>
    85b4:	98a9883a 	add	r20,r19,r2
    85b8:	a1c01f16 	blt	r20,r7,8638 <_realloc_r+0x2ac>
    85bc:	b8c00317 	ldw	r3,12(r23)
    85c0:	b8800217 	ldw	r2,8(r23)
    85c4:	99bfff04 	addi	r6,r19,-4
    85c8:	01400904 	movi	r5,36
    85cc:	b82b883a 	mov	r21,r23
    85d0:	18800215 	stw	r2,8(r3)
    85d4:	10c00315 	stw	r3,12(r2)
    85d8:	bc000204 	addi	r16,r23,8
    85dc:	2980c336 	bltu	r5,r6,88ec <_realloc_r+0x560>
    85e0:	008004c4 	movi	r2,19
    85e4:	9009883a 	mov	r4,r18
    85e8:	8011883a 	mov	r8,r16
    85ec:	11800f2e 	bgeu	r2,r6,862c <_realloc_r+0x2a0>
    85f0:	90800017 	ldw	r2,0(r18)
    85f4:	ba000404 	addi	r8,r23,16
    85f8:	91000204 	addi	r4,r18,8
    85fc:	b8800215 	stw	r2,8(r23)
    8600:	90c00117 	ldw	r3,4(r18)
    8604:	008006c4 	movi	r2,27
    8608:	b8c00315 	stw	r3,12(r23)
    860c:	1180072e 	bgeu	r2,r6,862c <_realloc_r+0x2a0>
    8610:	90c00217 	ldw	r3,8(r18)
    8614:	ba000604 	addi	r8,r23,24
    8618:	91000404 	addi	r4,r18,16
    861c:	b8c00415 	stw	r3,16(r23)
    8620:	90800317 	ldw	r2,12(r18)
    8624:	b8800515 	stw	r2,20(r23)
    8628:	3140c726 	beq	r6,r5,8948 <_realloc_r+0x5bc>
    862c:	20800017 	ldw	r2,0(r4)
    8630:	b80f883a 	mov	r7,r23
    8634:	003fd906 	br	859c <_realloc_r+0x210>
    8638:	880b883a 	mov	r5,r17
    863c:	b009883a 	mov	r4,r22
    8640:	00068c40 	call	68c4 <_malloc_r>
    8644:	1023883a 	mov	r17,r2
    8648:	10002526 	beq	r2,zero,86e0 <_realloc_r+0x354>
    864c:	80800117 	ldw	r2,4(r16)
    8650:	00ffff84 	movi	r3,-2
    8654:	893ffe04 	addi	r4,r17,-8
    8658:	10c4703a 	and	r2,r2,r3
    865c:	8085883a 	add	r2,r16,r2
    8660:	20809526 	beq	r4,r2,88b8 <_realloc_r+0x52c>
    8664:	99bfff04 	addi	r6,r19,-4
    8668:	01c00904 	movi	r7,36
    866c:	39804536 	bltu	r7,r6,8784 <_realloc_r+0x3f8>
    8670:	008004c4 	movi	r2,19
    8674:	9009883a 	mov	r4,r18
    8678:	880b883a 	mov	r5,r17
    867c:	11800f2e 	bgeu	r2,r6,86bc <_realloc_r+0x330>
    8680:	90800017 	ldw	r2,0(r18)
    8684:	89400204 	addi	r5,r17,8
    8688:	91000204 	addi	r4,r18,8
    868c:	88800015 	stw	r2,0(r17)
    8690:	90c00117 	ldw	r3,4(r18)
    8694:	008006c4 	movi	r2,27
    8698:	88c00115 	stw	r3,4(r17)
    869c:	1180072e 	bgeu	r2,r6,86bc <_realloc_r+0x330>
    86a0:	90c00217 	ldw	r3,8(r18)
    86a4:	89400404 	addi	r5,r17,16
    86a8:	91000404 	addi	r4,r18,16
    86ac:	88c00215 	stw	r3,8(r17)
    86b0:	90800317 	ldw	r2,12(r18)
    86b4:	88800315 	stw	r2,12(r17)
    86b8:	31c09126 	beq	r6,r7,8900 <_realloc_r+0x574>
    86bc:	20800017 	ldw	r2,0(r4)
    86c0:	28800015 	stw	r2,0(r5)
    86c4:	20c00117 	ldw	r3,4(r4)
    86c8:	28c00115 	stw	r3,4(r5)
    86cc:	20800217 	ldw	r2,8(r4)
    86d0:	28800215 	stw	r2,8(r5)
    86d4:	900b883a 	mov	r5,r18
    86d8:	b009883a 	mov	r4,r22
    86dc:	0005d3c0 	call	5d3c <_free_r>
    86e0:	b009883a 	mov	r4,r22
    86e4:	000bf400 	call	bf40 <__malloc_unlock>
    86e8:	003f5e06 	br	8464 <_realloc_r+0xd8>
    86ec:	300b883a 	mov	r5,r6
    86f0:	dfc00b17 	ldw	ra,44(sp)
    86f4:	df000a17 	ldw	fp,40(sp)
    86f8:	ddc00917 	ldw	r23,36(sp)
    86fc:	dd800817 	ldw	r22,32(sp)
    8700:	dd400717 	ldw	r21,28(sp)
    8704:	dd000617 	ldw	r20,24(sp)
    8708:	dcc00517 	ldw	r19,20(sp)
    870c:	dc800417 	ldw	r18,16(sp)
    8710:	dc400317 	ldw	r17,12(sp)
    8714:	dc000217 	ldw	r16,8(sp)
    8718:	dec00c04 	addi	sp,sp,48
    871c:	00068c41 	jmpi	68c4 <_malloc_r>
    8720:	38800117 	ldw	r2,4(r7)
    8724:	e54b883a 	add	r5,fp,r21
    8728:	31000054 	ori	r4,r6,1
    872c:	1080004c 	andi	r2,r2,1
    8730:	1704b03a 	or	r2,r2,fp
    8734:	38800115 	stw	r2,4(r7)
    8738:	29000115 	stw	r4,4(r5)
    873c:	2987883a 	add	r3,r5,r6
    8740:	18800117 	ldw	r2,4(r3)
    8744:	29400204 	addi	r5,r5,8
    8748:	b009883a 	mov	r4,r22
    874c:	10800054 	ori	r2,r2,1
    8750:	18800115 	stw	r2,4(r3)
    8754:	0005d3c0 	call	5d3c <_free_r>
    8758:	003f3806 	br	843c <_realloc_r+0xb0>
    875c:	000d883a 	mov	r6,zero
    8760:	0009883a 	mov	r4,zero
    8764:	003f5d06 	br	84dc <_realloc_r+0x150>
    8768:	30c00217 	ldw	r3,8(r6)
    876c:	30800317 	ldw	r2,12(r6)
    8770:	800f883a 	mov	r7,r16
    8774:	84000204 	addi	r16,r16,8
    8778:	10c00215 	stw	r3,8(r2)
    877c:	18800315 	stw	r2,12(r3)
    8780:	003f2306 	br	8410 <_realloc_r+0x84>
    8784:	8809883a 	mov	r4,r17
    8788:	900b883a 	mov	r5,r18
    878c:	00071880 	call	7188 <memmove>
    8790:	003fd006 	br	86d4 <_realloc_r+0x348>
    8794:	30800117 	ldw	r2,4(r6)
    8798:	e0c00404 	addi	r3,fp,16
    879c:	1108703a 	and	r4,r2,r4
    87a0:	9905883a 	add	r2,r19,r4
    87a4:	10ff4d16 	blt	r2,r3,84dc <_realloc_r+0x150>
    87a8:	1705c83a 	sub	r2,r2,fp
    87ac:	870b883a 	add	r5,r16,fp
    87b0:	10800054 	ori	r2,r2,1
    87b4:	28800115 	stw	r2,4(r5)
    87b8:	80c00117 	ldw	r3,4(r16)
    87bc:	00800074 	movhi	r2,1
    87c0:	10ba4c04 	addi	r2,r2,-5840
    87c4:	b009883a 	mov	r4,r22
    87c8:	18c0004c 	andi	r3,r3,1
    87cc:	e0c6b03a 	or	r3,fp,r3
    87d0:	11400215 	stw	r5,8(r2)
    87d4:	80c00115 	stw	r3,4(r16)
    87d8:	000bf400 	call	bf40 <__malloc_unlock>
    87dc:	84400204 	addi	r17,r16,8
    87e0:	003f2006 	br	8464 <_realloc_r+0xd8>
    87e4:	98a9883a 	add	r20,r19,r2
    87e8:	2509883a 	add	r4,r4,r20
    87ec:	e0800404 	addi	r2,fp,16
    87f0:	d9000115 	stw	r4,4(sp)
    87f4:	20bf7016 	blt	r4,r2,85b8 <_realloc_r+0x22c>
    87f8:	b8c00317 	ldw	r3,12(r23)
    87fc:	b8800217 	ldw	r2,8(r23)
    8800:	99bfff04 	addi	r6,r19,-4
    8804:	01400904 	movi	r5,36
    8808:	18800215 	stw	r2,8(r3)
    880c:	10c00315 	stw	r3,12(r2)
    8810:	bc400204 	addi	r17,r23,8
    8814:	29804136 	bltu	r5,r6,891c <_realloc_r+0x590>
    8818:	008004c4 	movi	r2,19
    881c:	9009883a 	mov	r4,r18
    8820:	880f883a 	mov	r7,r17
    8824:	11800f2e 	bgeu	r2,r6,8864 <_realloc_r+0x4d8>
    8828:	90800017 	ldw	r2,0(r18)
    882c:	b9c00404 	addi	r7,r23,16
    8830:	91000204 	addi	r4,r18,8
    8834:	b8800215 	stw	r2,8(r23)
    8838:	90c00117 	ldw	r3,4(r18)
    883c:	008006c4 	movi	r2,27
    8840:	b8c00315 	stw	r3,12(r23)
    8844:	1180072e 	bgeu	r2,r6,8864 <_realloc_r+0x4d8>
    8848:	90c00217 	ldw	r3,8(r18)
    884c:	b9c00604 	addi	r7,r23,24
    8850:	91000404 	addi	r4,r18,16
    8854:	b8c00415 	stw	r3,16(r23)
    8858:	90800317 	ldw	r2,12(r18)
    885c:	b8800515 	stw	r2,20(r23)
    8860:	31404026 	beq	r6,r5,8964 <_realloc_r+0x5d8>
    8864:	20800017 	ldw	r2,0(r4)
    8868:	38800015 	stw	r2,0(r7)
    886c:	20c00117 	ldw	r3,4(r4)
    8870:	38c00115 	stw	r3,4(r7)
    8874:	20800217 	ldw	r2,8(r4)
    8878:	38800215 	stw	r2,8(r7)
    887c:	d8c00117 	ldw	r3,4(sp)
    8880:	bf0b883a 	add	r5,r23,fp
    8884:	b009883a 	mov	r4,r22
    8888:	1f05c83a 	sub	r2,r3,fp
    888c:	10800054 	ori	r2,r2,1
    8890:	28800115 	stw	r2,4(r5)
    8894:	b8c00117 	ldw	r3,4(r23)
    8898:	00800074 	movhi	r2,1
    889c:	10ba4c04 	addi	r2,r2,-5840
    88a0:	11400215 	stw	r5,8(r2)
    88a4:	18c0004c 	andi	r3,r3,1
    88a8:	e0c6b03a 	or	r3,fp,r3
    88ac:	b8c00115 	stw	r3,4(r23)
    88b0:	000bf400 	call	bf40 <__malloc_unlock>
    88b4:	003eeb06 	br	8464 <_realloc_r+0xd8>
    88b8:	20800117 	ldw	r2,4(r4)
    88bc:	00ffff04 	movi	r3,-4
    88c0:	800f883a 	mov	r7,r16
    88c4:	10c4703a 	and	r2,r2,r3
    88c8:	98a9883a 	add	r20,r19,r2
    88cc:	84000204 	addi	r16,r16,8
    88d0:	003ecf06 	br	8410 <_realloc_r+0x84>
    88d4:	900b883a 	mov	r5,r18
    88d8:	8009883a 	mov	r4,r16
    88dc:	00071880 	call	7188 <memmove>
    88e0:	dd000017 	ldw	r20,0(sp)
    88e4:	b80f883a 	mov	r7,r23
    88e8:	003ec906 	br	8410 <_realloc_r+0x84>
    88ec:	900b883a 	mov	r5,r18
    88f0:	8009883a 	mov	r4,r16
    88f4:	00071880 	call	7188 <memmove>
    88f8:	b80f883a 	mov	r7,r23
    88fc:	003ec406 	br	8410 <_realloc_r+0x84>
    8900:	90c00417 	ldw	r3,16(r18)
    8904:	89400604 	addi	r5,r17,24
    8908:	91000604 	addi	r4,r18,24
    890c:	88c00415 	stw	r3,16(r17)
    8910:	90800517 	ldw	r2,20(r18)
    8914:	88800515 	stw	r2,20(r17)
    8918:	003f6806 	br	86bc <_realloc_r+0x330>
    891c:	900b883a 	mov	r5,r18
    8920:	8809883a 	mov	r4,r17
    8924:	00071880 	call	7188 <memmove>
    8928:	003fd406 	br	887c <_realloc_r+0x4f0>
    892c:	90c00417 	ldw	r3,16(r18)
    8930:	91000604 	addi	r4,r18,24
    8934:	ba000804 	addi	r8,r23,32
    8938:	b8c00615 	stw	r3,24(r23)
    893c:	90800517 	ldw	r2,20(r18)
    8940:	b8800715 	stw	r2,28(r23)
    8944:	003f1206 	br	8590 <_realloc_r+0x204>
    8948:	90c00417 	ldw	r3,16(r18)
    894c:	91000604 	addi	r4,r18,24
    8950:	ba000804 	addi	r8,r23,32
    8954:	b8c00615 	stw	r3,24(r23)
    8958:	90800517 	ldw	r2,20(r18)
    895c:	b8800715 	stw	r2,28(r23)
    8960:	003f3206 	br	862c <_realloc_r+0x2a0>
    8964:	90c00417 	ldw	r3,16(r18)
    8968:	91000604 	addi	r4,r18,24
    896c:	b9c00804 	addi	r7,r23,32
    8970:	b8c00615 	stw	r3,24(r23)
    8974:	90800517 	ldw	r2,20(r18)
    8978:	b8800715 	stw	r2,28(r23)
    897c:	003fb906 	br	8864 <_realloc_r+0x4d8>

00008980 <__isinfd>:
    8980:	200d883a 	mov	r6,r4
    8984:	0109c83a 	sub	r4,zero,r4
    8988:	2188b03a 	or	r4,r4,r6
    898c:	2008d7fa 	srli	r4,r4,31
    8990:	00a00034 	movhi	r2,32768
    8994:	10bfffc4 	addi	r2,r2,-1
    8998:	1144703a 	and	r2,r2,r5
    899c:	2088b03a 	or	r4,r4,r2
    89a0:	009ffc34 	movhi	r2,32752
    89a4:	1105c83a 	sub	r2,r2,r4
    89a8:	0087c83a 	sub	r3,zero,r2
    89ac:	10c4b03a 	or	r2,r2,r3
    89b0:	1004d7fa 	srli	r2,r2,31
    89b4:	00c00044 	movi	r3,1
    89b8:	1885c83a 	sub	r2,r3,r2
    89bc:	f800283a 	ret

000089c0 <__isnand>:
    89c0:	200d883a 	mov	r6,r4
    89c4:	0109c83a 	sub	r4,zero,r4
    89c8:	2188b03a 	or	r4,r4,r6
    89cc:	2008d7fa 	srli	r4,r4,31
    89d0:	00a00034 	movhi	r2,32768
    89d4:	10bfffc4 	addi	r2,r2,-1
    89d8:	1144703a 	and	r2,r2,r5
    89dc:	2088b03a 	or	r4,r4,r2
    89e0:	009ffc34 	movhi	r2,32752
    89e4:	1105c83a 	sub	r2,r2,r4
    89e8:	1004d7fa 	srli	r2,r2,31
    89ec:	f800283a 	ret

000089f0 <_sbrk_r>:
    89f0:	defffd04 	addi	sp,sp,-12
    89f4:	dc000015 	stw	r16,0(sp)
    89f8:	04000074 	movhi	r16,1
    89fc:	84068404 	addi	r16,r16,6672
    8a00:	dc400115 	stw	r17,4(sp)
    8a04:	80000015 	stw	zero,0(r16)
    8a08:	2023883a 	mov	r17,r4
    8a0c:	2809883a 	mov	r4,r5
    8a10:	dfc00215 	stw	ra,8(sp)
    8a14:	000c15c0 	call	c15c <sbrk>
    8a18:	1007883a 	mov	r3,r2
    8a1c:	00bfffc4 	movi	r2,-1
    8a20:	18800626 	beq	r3,r2,8a3c <_sbrk_r+0x4c>
    8a24:	1805883a 	mov	r2,r3
    8a28:	dfc00217 	ldw	ra,8(sp)
    8a2c:	dc400117 	ldw	r17,4(sp)
    8a30:	dc000017 	ldw	r16,0(sp)
    8a34:	dec00304 	addi	sp,sp,12
    8a38:	f800283a 	ret
    8a3c:	80800017 	ldw	r2,0(r16)
    8a40:	103ff826 	beq	r2,zero,8a24 <_sbrk_r+0x34>
    8a44:	88800015 	stw	r2,0(r17)
    8a48:	1805883a 	mov	r2,r3
    8a4c:	dfc00217 	ldw	ra,8(sp)
    8a50:	dc400117 	ldw	r17,4(sp)
    8a54:	dc000017 	ldw	r16,0(sp)
    8a58:	dec00304 	addi	sp,sp,12
    8a5c:	f800283a 	ret

00008a60 <__sclose>:
    8a60:	2940038f 	ldh	r5,14(r5)
    8a64:	0008da81 	jmpi	8da8 <_close_r>

00008a68 <__sseek>:
    8a68:	defffe04 	addi	sp,sp,-8
    8a6c:	dc000015 	stw	r16,0(sp)
    8a70:	2821883a 	mov	r16,r5
    8a74:	2940038f 	ldh	r5,14(r5)
    8a78:	dfc00115 	stw	ra,4(sp)
    8a7c:	00090200 	call	9020 <_lseek_r>
    8a80:	1007883a 	mov	r3,r2
    8a84:	00bfffc4 	movi	r2,-1
    8a88:	18800926 	beq	r3,r2,8ab0 <__sseek+0x48>
    8a8c:	8080030b 	ldhu	r2,12(r16)
    8a90:	80c01415 	stw	r3,80(r16)
    8a94:	10840014 	ori	r2,r2,4096
    8a98:	8080030d 	sth	r2,12(r16)
    8a9c:	1805883a 	mov	r2,r3
    8aa0:	dfc00117 	ldw	ra,4(sp)
    8aa4:	dc000017 	ldw	r16,0(sp)
    8aa8:	dec00204 	addi	sp,sp,8
    8aac:	f800283a 	ret
    8ab0:	8080030b 	ldhu	r2,12(r16)
    8ab4:	10bbffcc 	andi	r2,r2,61439
    8ab8:	8080030d 	sth	r2,12(r16)
    8abc:	1805883a 	mov	r2,r3
    8ac0:	dfc00117 	ldw	ra,4(sp)
    8ac4:	dc000017 	ldw	r16,0(sp)
    8ac8:	dec00204 	addi	sp,sp,8
    8acc:	f800283a 	ret

00008ad0 <__swrite>:
    8ad0:	2880030b 	ldhu	r2,12(r5)
    8ad4:	defffb04 	addi	sp,sp,-20
    8ad8:	dcc00315 	stw	r19,12(sp)
    8adc:	1080400c 	andi	r2,r2,256
    8ae0:	dc800215 	stw	r18,8(sp)
    8ae4:	dc400115 	stw	r17,4(sp)
    8ae8:	dc000015 	stw	r16,0(sp)
    8aec:	3027883a 	mov	r19,r6
    8af0:	3825883a 	mov	r18,r7
    8af4:	dfc00415 	stw	ra,16(sp)
    8af8:	2821883a 	mov	r16,r5
    8afc:	000d883a 	mov	r6,zero
    8b00:	01c00084 	movi	r7,2
    8b04:	2023883a 	mov	r17,r4
    8b08:	10000226 	beq	r2,zero,8b14 <__swrite+0x44>
    8b0c:	2940038f 	ldh	r5,14(r5)
    8b10:	00090200 	call	9020 <_lseek_r>
    8b14:	8080030b 	ldhu	r2,12(r16)
    8b18:	8140038f 	ldh	r5,14(r16)
    8b1c:	8809883a 	mov	r4,r17
    8b20:	10bbffcc 	andi	r2,r2,61439
    8b24:	980d883a 	mov	r6,r19
    8b28:	900f883a 	mov	r7,r18
    8b2c:	8080030d 	sth	r2,12(r16)
    8b30:	dfc00417 	ldw	ra,16(sp)
    8b34:	dcc00317 	ldw	r19,12(sp)
    8b38:	dc800217 	ldw	r18,8(sp)
    8b3c:	dc400117 	ldw	r17,4(sp)
    8b40:	dc000017 	ldw	r16,0(sp)
    8b44:	dec00504 	addi	sp,sp,20
    8b48:	0008c681 	jmpi	8c68 <_write_r>

00008b4c <__sread>:
    8b4c:	defffe04 	addi	sp,sp,-8
    8b50:	dc000015 	stw	r16,0(sp)
    8b54:	2821883a 	mov	r16,r5
    8b58:	2940038f 	ldh	r5,14(r5)
    8b5c:	dfc00115 	stw	ra,4(sp)
    8b60:	00090980 	call	9098 <_read_r>
    8b64:	1007883a 	mov	r3,r2
    8b68:	10000816 	blt	r2,zero,8b8c <__sread+0x40>
    8b6c:	80801417 	ldw	r2,80(r16)
    8b70:	10c5883a 	add	r2,r2,r3
    8b74:	80801415 	stw	r2,80(r16)
    8b78:	1805883a 	mov	r2,r3
    8b7c:	dfc00117 	ldw	ra,4(sp)
    8b80:	dc000017 	ldw	r16,0(sp)
    8b84:	dec00204 	addi	sp,sp,8
    8b88:	f800283a 	ret
    8b8c:	8080030b 	ldhu	r2,12(r16)
    8b90:	10bbffcc 	andi	r2,r2,61439
    8b94:	8080030d 	sth	r2,12(r16)
    8b98:	1805883a 	mov	r2,r3
    8b9c:	dfc00117 	ldw	ra,4(sp)
    8ba0:	dc000017 	ldw	r16,0(sp)
    8ba4:	dec00204 	addi	sp,sp,8
    8ba8:	f800283a 	ret

00008bac <strcmp>:
    8bac:	2144b03a 	or	r2,r4,r5
    8bb0:	108000cc 	andi	r2,r2,3
    8bb4:	10001d1e 	bne	r2,zero,8c2c <strcmp+0x80>
    8bb8:	200f883a 	mov	r7,r4
    8bbc:	28800017 	ldw	r2,0(r5)
    8bc0:	21000017 	ldw	r4,0(r4)
    8bc4:	280d883a 	mov	r6,r5
    8bc8:	2080161e 	bne	r4,r2,8c24 <strcmp+0x78>
    8bcc:	023fbff4 	movhi	r8,65279
    8bd0:	423fbfc4 	addi	r8,r8,-257
    8bd4:	2207883a 	add	r3,r4,r8
    8bd8:	01602074 	movhi	r5,32897
    8bdc:	29602004 	addi	r5,r5,-32640
    8be0:	1946703a 	and	r3,r3,r5
    8be4:	0104303a 	nor	r2,zero,r4
    8be8:	10c4703a 	and	r2,r2,r3
    8bec:	10001c1e 	bne	r2,zero,8c60 <strcmp+0xb4>
    8bf0:	4013883a 	mov	r9,r8
    8bf4:	2811883a 	mov	r8,r5
    8bf8:	00000106 	br	8c00 <strcmp+0x54>
    8bfc:	1800181e 	bne	r3,zero,8c60 <strcmp+0xb4>
    8c00:	39c00104 	addi	r7,r7,4
    8c04:	39000017 	ldw	r4,0(r7)
    8c08:	31800104 	addi	r6,r6,4
    8c0c:	31400017 	ldw	r5,0(r6)
    8c10:	2245883a 	add	r2,r4,r9
    8c14:	1204703a 	and	r2,r2,r8
    8c18:	0106303a 	nor	r3,zero,r4
    8c1c:	1886703a 	and	r3,r3,r2
    8c20:	217ff626 	beq	r4,r5,8bfc <strcmp+0x50>
    8c24:	3809883a 	mov	r4,r7
    8c28:	300b883a 	mov	r5,r6
    8c2c:	20c00007 	ldb	r3,0(r4)
    8c30:	1800051e 	bne	r3,zero,8c48 <strcmp+0x9c>
    8c34:	00000606 	br	8c50 <strcmp+0xa4>
    8c38:	21000044 	addi	r4,r4,1
    8c3c:	20c00007 	ldb	r3,0(r4)
    8c40:	29400044 	addi	r5,r5,1
    8c44:	18000226 	beq	r3,zero,8c50 <strcmp+0xa4>
    8c48:	28800007 	ldb	r2,0(r5)
    8c4c:	18bffa26 	beq	r3,r2,8c38 <strcmp+0x8c>
    8c50:	20c00003 	ldbu	r3,0(r4)
    8c54:	28800003 	ldbu	r2,0(r5)
    8c58:	1885c83a 	sub	r2,r3,r2
    8c5c:	f800283a 	ret
    8c60:	0005883a 	mov	r2,zero
    8c64:	f800283a 	ret

00008c68 <_write_r>:
    8c68:	defffd04 	addi	sp,sp,-12
    8c6c:	dc000015 	stw	r16,0(sp)
    8c70:	04000074 	movhi	r16,1
    8c74:	84068404 	addi	r16,r16,6672
    8c78:	dc400115 	stw	r17,4(sp)
    8c7c:	80000015 	stw	zero,0(r16)
    8c80:	2023883a 	mov	r17,r4
    8c84:	2809883a 	mov	r4,r5
    8c88:	300b883a 	mov	r5,r6
    8c8c:	380d883a 	mov	r6,r7
    8c90:	dfc00215 	stw	ra,8(sp)
    8c94:	000c2480 	call	c248 <write>
    8c98:	1007883a 	mov	r3,r2
    8c9c:	00bfffc4 	movi	r2,-1
    8ca0:	18800626 	beq	r3,r2,8cbc <_write_r+0x54>
    8ca4:	1805883a 	mov	r2,r3
    8ca8:	dfc00217 	ldw	ra,8(sp)
    8cac:	dc400117 	ldw	r17,4(sp)
    8cb0:	dc000017 	ldw	r16,0(sp)
    8cb4:	dec00304 	addi	sp,sp,12
    8cb8:	f800283a 	ret
    8cbc:	80800017 	ldw	r2,0(r16)
    8cc0:	103ff826 	beq	r2,zero,8ca4 <_write_r+0x3c>
    8cc4:	88800015 	stw	r2,0(r17)
    8cc8:	1805883a 	mov	r2,r3
    8ccc:	dfc00217 	ldw	ra,8(sp)
    8cd0:	dc400117 	ldw	r17,4(sp)
    8cd4:	dc000017 	ldw	r16,0(sp)
    8cd8:	dec00304 	addi	sp,sp,12
    8cdc:	f800283a 	ret

00008ce0 <_calloc_r>:
    8ce0:	defffe04 	addi	sp,sp,-8
    8ce4:	dc400015 	stw	r17,0(sp)
    8ce8:	2023883a 	mov	r17,r4
    8cec:	2809883a 	mov	r4,r5
    8cf0:	300b883a 	mov	r5,r6
    8cf4:	dfc00115 	stw	ra,4(sp)
    8cf8:	0001ca00 	call	1ca0 <__mulsi3>
    8cfc:	100b883a 	mov	r5,r2
    8d00:	8809883a 	mov	r4,r17
    8d04:	00068c40 	call	68c4 <_malloc_r>
    8d08:	1023883a 	mov	r17,r2
    8d0c:	01c00904 	movi	r7,36
    8d10:	10000d26 	beq	r2,zero,8d48 <_calloc_r+0x68>
    8d14:	10ffff17 	ldw	r3,-4(r2)
    8d18:	1009883a 	mov	r4,r2
    8d1c:	00bfff04 	movi	r2,-4
    8d20:	1886703a 	and	r3,r3,r2
    8d24:	1887883a 	add	r3,r3,r2
    8d28:	180d883a 	mov	r6,r3
    8d2c:	000b883a 	mov	r5,zero
    8d30:	38c01736 	bltu	r7,r3,8d90 <_calloc_r+0xb0>
    8d34:	008004c4 	movi	r2,19
    8d38:	10c00836 	bltu	r2,r3,8d5c <_calloc_r+0x7c>
    8d3c:	20000215 	stw	zero,8(r4)
    8d40:	20000015 	stw	zero,0(r4)
    8d44:	20000115 	stw	zero,4(r4)
    8d48:	8805883a 	mov	r2,r17
    8d4c:	dfc00117 	ldw	ra,4(sp)
    8d50:	dc400017 	ldw	r17,0(sp)
    8d54:	dec00204 	addi	sp,sp,8
    8d58:	f800283a 	ret
    8d5c:	008006c4 	movi	r2,27
    8d60:	88000015 	stw	zero,0(r17)
    8d64:	88000115 	stw	zero,4(r17)
    8d68:	89000204 	addi	r4,r17,8
    8d6c:	10fff32e 	bgeu	r2,r3,8d3c <_calloc_r+0x5c>
    8d70:	88000215 	stw	zero,8(r17)
    8d74:	88000315 	stw	zero,12(r17)
    8d78:	89000404 	addi	r4,r17,16
    8d7c:	19ffef1e 	bne	r3,r7,8d3c <_calloc_r+0x5c>
    8d80:	89000604 	addi	r4,r17,24
    8d84:	88000415 	stw	zero,16(r17)
    8d88:	88000515 	stw	zero,20(r17)
    8d8c:	003feb06 	br	8d3c <_calloc_r+0x5c>
    8d90:	00072680 	call	7268 <memset>
    8d94:	8805883a 	mov	r2,r17
    8d98:	dfc00117 	ldw	ra,4(sp)
    8d9c:	dc400017 	ldw	r17,0(sp)
    8da0:	dec00204 	addi	sp,sp,8
    8da4:	f800283a 	ret

00008da8 <_close_r>:
    8da8:	defffd04 	addi	sp,sp,-12
    8dac:	dc000015 	stw	r16,0(sp)
    8db0:	04000074 	movhi	r16,1
    8db4:	84068404 	addi	r16,r16,6672
    8db8:	dc400115 	stw	r17,4(sp)
    8dbc:	80000015 	stw	zero,0(r16)
    8dc0:	2023883a 	mov	r17,r4
    8dc4:	2809883a 	mov	r4,r5
    8dc8:	dfc00215 	stw	ra,8(sp)
    8dcc:	000b5c00 	call	b5c0 <close>
    8dd0:	1007883a 	mov	r3,r2
    8dd4:	00bfffc4 	movi	r2,-1
    8dd8:	18800626 	beq	r3,r2,8df4 <_close_r+0x4c>
    8ddc:	1805883a 	mov	r2,r3
    8de0:	dfc00217 	ldw	ra,8(sp)
    8de4:	dc400117 	ldw	r17,4(sp)
    8de8:	dc000017 	ldw	r16,0(sp)
    8dec:	dec00304 	addi	sp,sp,12
    8df0:	f800283a 	ret
    8df4:	80800017 	ldw	r2,0(r16)
    8df8:	103ff826 	beq	r2,zero,8ddc <_close_r+0x34>
    8dfc:	88800015 	stw	r2,0(r17)
    8e00:	1805883a 	mov	r2,r3
    8e04:	dfc00217 	ldw	ra,8(sp)
    8e08:	dc400117 	ldw	r17,4(sp)
    8e0c:	dc000017 	ldw	r16,0(sp)
    8e10:	dec00304 	addi	sp,sp,12
    8e14:	f800283a 	ret

00008e18 <_fclose_r>:
    8e18:	defffc04 	addi	sp,sp,-16
    8e1c:	dc400115 	stw	r17,4(sp)
    8e20:	dc000015 	stw	r16,0(sp)
    8e24:	dfc00315 	stw	ra,12(sp)
    8e28:	dc800215 	stw	r18,8(sp)
    8e2c:	2821883a 	mov	r16,r5
    8e30:	2023883a 	mov	r17,r4
    8e34:	28002926 	beq	r5,zero,8edc <_fclose_r+0xc4>
    8e38:	00059740 	call	5974 <__sfp_lock_acquire>
    8e3c:	88000226 	beq	r17,zero,8e48 <_fclose_r+0x30>
    8e40:	88800e17 	ldw	r2,56(r17)
    8e44:	10002d26 	beq	r2,zero,8efc <_fclose_r+0xe4>
    8e48:	8080030f 	ldh	r2,12(r16)
    8e4c:	10002226 	beq	r2,zero,8ed8 <_fclose_r+0xc0>
    8e50:	8809883a 	mov	r4,r17
    8e54:	800b883a 	mov	r5,r16
    8e58:	00056ec0 	call	56ec <_fflush_r>
    8e5c:	1025883a 	mov	r18,r2
    8e60:	80800b17 	ldw	r2,44(r16)
    8e64:	10000426 	beq	r2,zero,8e78 <_fclose_r+0x60>
    8e68:	81400717 	ldw	r5,28(r16)
    8e6c:	8809883a 	mov	r4,r17
    8e70:	103ee83a 	callr	r2
    8e74:	10002a16 	blt	r2,zero,8f20 <_fclose_r+0x108>
    8e78:	8080030b 	ldhu	r2,12(r16)
    8e7c:	1080200c 	andi	r2,r2,128
    8e80:	1000231e 	bne	r2,zero,8f10 <_fclose_r+0xf8>
    8e84:	81400c17 	ldw	r5,48(r16)
    8e88:	28000526 	beq	r5,zero,8ea0 <_fclose_r+0x88>
    8e8c:	80801004 	addi	r2,r16,64
    8e90:	28800226 	beq	r5,r2,8e9c <_fclose_r+0x84>
    8e94:	8809883a 	mov	r4,r17
    8e98:	0005d3c0 	call	5d3c <_free_r>
    8e9c:	80000c15 	stw	zero,48(r16)
    8ea0:	81401117 	ldw	r5,68(r16)
    8ea4:	28000326 	beq	r5,zero,8eb4 <_fclose_r+0x9c>
    8ea8:	8809883a 	mov	r4,r17
    8eac:	0005d3c0 	call	5d3c <_free_r>
    8eb0:	80001115 	stw	zero,68(r16)
    8eb4:	8000030d 	sth	zero,12(r16)
    8eb8:	00059780 	call	5978 <__sfp_lock_release>
    8ebc:	9005883a 	mov	r2,r18
    8ec0:	dfc00317 	ldw	ra,12(sp)
    8ec4:	dc800217 	ldw	r18,8(sp)
    8ec8:	dc400117 	ldw	r17,4(sp)
    8ecc:	dc000017 	ldw	r16,0(sp)
    8ed0:	dec00404 	addi	sp,sp,16
    8ed4:	f800283a 	ret
    8ed8:	00059780 	call	5978 <__sfp_lock_release>
    8edc:	0025883a 	mov	r18,zero
    8ee0:	9005883a 	mov	r2,r18
    8ee4:	dfc00317 	ldw	ra,12(sp)
    8ee8:	dc800217 	ldw	r18,8(sp)
    8eec:	dc400117 	ldw	r17,4(sp)
    8ef0:	dc000017 	ldw	r16,0(sp)
    8ef4:	dec00404 	addi	sp,sp,16
    8ef8:	f800283a 	ret
    8efc:	8809883a 	mov	r4,r17
    8f00:	00059840 	call	5984 <__sinit>
    8f04:	8080030f 	ldh	r2,12(r16)
    8f08:	103fd11e 	bne	r2,zero,8e50 <_fclose_r+0x38>
    8f0c:	003ff206 	br	8ed8 <_fclose_r+0xc0>
    8f10:	81400417 	ldw	r5,16(r16)
    8f14:	8809883a 	mov	r4,r17
    8f18:	0005d3c0 	call	5d3c <_free_r>
    8f1c:	003fd906 	br	8e84 <_fclose_r+0x6c>
    8f20:	04bfffc4 	movi	r18,-1
    8f24:	003fd406 	br	8e78 <_fclose_r+0x60>

00008f28 <fclose>:
    8f28:	00800074 	movhi	r2,1
    8f2c:	10bfd204 	addi	r2,r2,-184
    8f30:	200b883a 	mov	r5,r4
    8f34:	11000017 	ldw	r4,0(r2)
    8f38:	0008e181 	jmpi	8e18 <_fclose_r>

00008f3c <_fstat_r>:
    8f3c:	defffd04 	addi	sp,sp,-12
    8f40:	dc000015 	stw	r16,0(sp)
    8f44:	04000074 	movhi	r16,1
    8f48:	84068404 	addi	r16,r16,6672
    8f4c:	dc400115 	stw	r17,4(sp)
    8f50:	80000015 	stw	zero,0(r16)
    8f54:	2023883a 	mov	r17,r4
    8f58:	2809883a 	mov	r4,r5
    8f5c:	300b883a 	mov	r5,r6
    8f60:	dfc00215 	stw	ra,8(sp)
    8f64:	000b74c0 	call	b74c <fstat>
    8f68:	1007883a 	mov	r3,r2
    8f6c:	00bfffc4 	movi	r2,-1
    8f70:	18800626 	beq	r3,r2,8f8c <_fstat_r+0x50>
    8f74:	1805883a 	mov	r2,r3
    8f78:	dfc00217 	ldw	ra,8(sp)
    8f7c:	dc400117 	ldw	r17,4(sp)
    8f80:	dc000017 	ldw	r16,0(sp)
    8f84:	dec00304 	addi	sp,sp,12
    8f88:	f800283a 	ret
    8f8c:	80800017 	ldw	r2,0(r16)
    8f90:	103ff826 	beq	r2,zero,8f74 <_fstat_r+0x38>
    8f94:	88800015 	stw	r2,0(r17)
    8f98:	1805883a 	mov	r2,r3
    8f9c:	dfc00217 	ldw	ra,8(sp)
    8fa0:	dc400117 	ldw	r17,4(sp)
    8fa4:	dc000017 	ldw	r16,0(sp)
    8fa8:	dec00304 	addi	sp,sp,12
    8fac:	f800283a 	ret

00008fb0 <_isatty_r>:
    8fb0:	defffd04 	addi	sp,sp,-12
    8fb4:	dc000015 	stw	r16,0(sp)
    8fb8:	04000074 	movhi	r16,1
    8fbc:	84068404 	addi	r16,r16,6672
    8fc0:	dc400115 	stw	r17,4(sp)
    8fc4:	80000015 	stw	zero,0(r16)
    8fc8:	2023883a 	mov	r17,r4
    8fcc:	2809883a 	mov	r4,r5
    8fd0:	dfc00215 	stw	ra,8(sp)
    8fd4:	000bb500 	call	bb50 <isatty>
    8fd8:	1007883a 	mov	r3,r2
    8fdc:	00bfffc4 	movi	r2,-1
    8fe0:	18800626 	beq	r3,r2,8ffc <_isatty_r+0x4c>
    8fe4:	1805883a 	mov	r2,r3
    8fe8:	dfc00217 	ldw	ra,8(sp)
    8fec:	dc400117 	ldw	r17,4(sp)
    8ff0:	dc000017 	ldw	r16,0(sp)
    8ff4:	dec00304 	addi	sp,sp,12
    8ff8:	f800283a 	ret
    8ffc:	80800017 	ldw	r2,0(r16)
    9000:	103ff826 	beq	r2,zero,8fe4 <_isatty_r+0x34>
    9004:	88800015 	stw	r2,0(r17)
    9008:	1805883a 	mov	r2,r3
    900c:	dfc00217 	ldw	ra,8(sp)
    9010:	dc400117 	ldw	r17,4(sp)
    9014:	dc000017 	ldw	r16,0(sp)
    9018:	dec00304 	addi	sp,sp,12
    901c:	f800283a 	ret

00009020 <_lseek_r>:
    9020:	defffd04 	addi	sp,sp,-12
    9024:	dc000015 	stw	r16,0(sp)
    9028:	04000074 	movhi	r16,1
    902c:	84068404 	addi	r16,r16,6672
    9030:	dc400115 	stw	r17,4(sp)
    9034:	80000015 	stw	zero,0(r16)
    9038:	2023883a 	mov	r17,r4
    903c:	2809883a 	mov	r4,r5
    9040:	300b883a 	mov	r5,r6
    9044:	380d883a 	mov	r6,r7
    9048:	dfc00215 	stw	ra,8(sp)
    904c:	000bd600 	call	bd60 <lseek>
    9050:	1007883a 	mov	r3,r2
    9054:	00bfffc4 	movi	r2,-1
    9058:	18800626 	beq	r3,r2,9074 <_lseek_r+0x54>
    905c:	1805883a 	mov	r2,r3
    9060:	dfc00217 	ldw	ra,8(sp)
    9064:	dc400117 	ldw	r17,4(sp)
    9068:	dc000017 	ldw	r16,0(sp)
    906c:	dec00304 	addi	sp,sp,12
    9070:	f800283a 	ret
    9074:	80800017 	ldw	r2,0(r16)
    9078:	103ff826 	beq	r2,zero,905c <_lseek_r+0x3c>
    907c:	88800015 	stw	r2,0(r17)
    9080:	1805883a 	mov	r2,r3
    9084:	dfc00217 	ldw	ra,8(sp)
    9088:	dc400117 	ldw	r17,4(sp)
    908c:	dc000017 	ldw	r16,0(sp)
    9090:	dec00304 	addi	sp,sp,12
    9094:	f800283a 	ret

00009098 <_read_r>:
    9098:	defffd04 	addi	sp,sp,-12
    909c:	dc000015 	stw	r16,0(sp)
    90a0:	04000074 	movhi	r16,1
    90a4:	84068404 	addi	r16,r16,6672
    90a8:	dc400115 	stw	r17,4(sp)
    90ac:	80000015 	stw	zero,0(r16)
    90b0:	2023883a 	mov	r17,r4
    90b4:	2809883a 	mov	r4,r5
    90b8:	300b883a 	mov	r5,r6
    90bc:	380d883a 	mov	r6,r7
    90c0:	dfc00215 	stw	ra,8(sp)
    90c4:	000bf600 	call	bf60 <read>
    90c8:	1007883a 	mov	r3,r2
    90cc:	00bfffc4 	movi	r2,-1
    90d0:	18800626 	beq	r3,r2,90ec <_read_r+0x54>
    90d4:	1805883a 	mov	r2,r3
    90d8:	dfc00217 	ldw	ra,8(sp)
    90dc:	dc400117 	ldw	r17,4(sp)
    90e0:	dc000017 	ldw	r16,0(sp)
    90e4:	dec00304 	addi	sp,sp,12
    90e8:	f800283a 	ret
    90ec:	80800017 	ldw	r2,0(r16)
    90f0:	103ff826 	beq	r2,zero,90d4 <_read_r+0x3c>
    90f4:	88800015 	stw	r2,0(r17)
    90f8:	1805883a 	mov	r2,r3
    90fc:	dfc00217 	ldw	ra,8(sp)
    9100:	dc400117 	ldw	r17,4(sp)
    9104:	dc000017 	ldw	r16,0(sp)
    9108:	dec00304 	addi	sp,sp,12
    910c:	f800283a 	ret

00009110 <__udivdi3>:
    9110:	defff104 	addi	sp,sp,-60
    9114:	0015883a 	mov	r10,zero
    9118:	2005883a 	mov	r2,r4
    911c:	3011883a 	mov	r8,r6
    9120:	df000d15 	stw	fp,52(sp)
    9124:	dd400a15 	stw	r21,40(sp)
    9128:	dcc00815 	stw	r19,32(sp)
    912c:	dfc00e15 	stw	ra,56(sp)
    9130:	ddc00c15 	stw	r23,48(sp)
    9134:	dd800b15 	stw	r22,44(sp)
    9138:	dd000915 	stw	r20,36(sp)
    913c:	dc800715 	stw	r18,28(sp)
    9140:	dc400615 	stw	r17,24(sp)
    9144:	dc000515 	stw	r16,20(sp)
    9148:	da800315 	stw	r10,12(sp)
    914c:	4027883a 	mov	r19,r8
    9150:	1039883a 	mov	fp,r2
    9154:	282b883a 	mov	r21,r5
    9158:	da800415 	stw	r10,16(sp)
    915c:	3800401e 	bne	r7,zero,9260 <__udivdi3+0x150>
    9160:	2a006536 	bltu	r5,r8,92f8 <__udivdi3+0x1e8>
    9164:	4000b526 	beq	r8,zero,943c <__udivdi3+0x32c>
    9168:	00bfffd4 	movui	r2,65535
    916c:	14c0ad36 	bltu	r2,r19,9424 <__udivdi3+0x314>
    9170:	00803fc4 	movi	r2,255
    9174:	14c15e36 	bltu	r2,r19,96f0 <__udivdi3+0x5e0>
    9178:	000b883a 	mov	r5,zero
    917c:	0005883a 	mov	r2,zero
    9180:	9884d83a 	srl	r2,r19,r2
    9184:	01000074 	movhi	r4,1
    9188:	2138fe04 	addi	r4,r4,-7176
    918c:	01800804 	movi	r6,32
    9190:	1105883a 	add	r2,r2,r4
    9194:	10c00003 	ldbu	r3,0(r2)
    9198:	28c7883a 	add	r3,r5,r3
    919c:	30e9c83a 	sub	r20,r6,r3
    91a0:	a0010a1e 	bne	r20,zero,95cc <__udivdi3+0x4bc>
    91a4:	982ed43a 	srli	r23,r19,16
    91a8:	acebc83a 	sub	r21,r21,r19
    91ac:	9dbfffcc 	andi	r22,r19,65535
    91b0:	05000044 	movi	r20,1
    91b4:	a809883a 	mov	r4,r21
    91b8:	b80b883a 	mov	r5,r23
    91bc:	0001c900 	call	1c90 <__udivsi3>
    91c0:	100b883a 	mov	r5,r2
    91c4:	b009883a 	mov	r4,r22
    91c8:	1021883a 	mov	r16,r2
    91cc:	0001ca00 	call	1ca0 <__mulsi3>
    91d0:	a809883a 	mov	r4,r21
    91d4:	b80b883a 	mov	r5,r23
    91d8:	1023883a 	mov	r17,r2
    91dc:	0001c980 	call	1c98 <__umodsi3>
    91e0:	1004943a 	slli	r2,r2,16
    91e4:	e006d43a 	srli	r3,fp,16
    91e8:	10c4b03a 	or	r2,r2,r3
    91ec:	1440042e 	bgeu	r2,r17,9200 <__udivdi3+0xf0>
    91f0:	14c5883a 	add	r2,r2,r19
    91f4:	843fffc4 	addi	r16,r16,-1
    91f8:	14c00136 	bltu	r2,r19,9200 <__udivdi3+0xf0>
    91fc:	14415c36 	bltu	r2,r17,9770 <__udivdi3+0x660>
    9200:	1463c83a 	sub	r17,r2,r17
    9204:	8809883a 	mov	r4,r17
    9208:	b80b883a 	mov	r5,r23
    920c:	0001c900 	call	1c90 <__udivsi3>
    9210:	100b883a 	mov	r5,r2
    9214:	b009883a 	mov	r4,r22
    9218:	102b883a 	mov	r21,r2
    921c:	0001ca00 	call	1ca0 <__mulsi3>
    9220:	8809883a 	mov	r4,r17
    9224:	b80b883a 	mov	r5,r23
    9228:	1025883a 	mov	r18,r2
    922c:	0001c980 	call	1c98 <__umodsi3>
    9230:	1004943a 	slli	r2,r2,16
    9234:	e0ffffcc 	andi	r3,fp,65535
    9238:	10c4b03a 	or	r2,r2,r3
    923c:	1480042e 	bgeu	r2,r18,9250 <__udivdi3+0x140>
    9240:	9885883a 	add	r2,r19,r2
    9244:	ad7fffc4 	addi	r21,r21,-1
    9248:	14c00136 	bltu	r2,r19,9250 <__udivdi3+0x140>
    924c:	14813c36 	bltu	r2,r18,9740 <__udivdi3+0x630>
    9250:	8004943a 	slli	r2,r16,16
    9254:	a009883a 	mov	r4,r20
    9258:	a884b03a 	or	r2,r21,r2
    925c:	00001506 	br	92b4 <__udivdi3+0x1a4>
    9260:	380d883a 	mov	r6,r7
    9264:	29c06c36 	bltu	r5,r7,9418 <__udivdi3+0x308>
    9268:	00bfffd4 	movui	r2,65535
    926c:	11c06436 	bltu	r2,r7,9400 <__udivdi3+0x2f0>
    9270:	00803fc4 	movi	r2,255
    9274:	11c11836 	bltu	r2,r7,96d8 <__udivdi3+0x5c8>
    9278:	000b883a 	mov	r5,zero
    927c:	0005883a 	mov	r2,zero
    9280:	3084d83a 	srl	r2,r6,r2
    9284:	01000074 	movhi	r4,1
    9288:	2138fe04 	addi	r4,r4,-7176
    928c:	01c00804 	movi	r7,32
    9290:	1105883a 	add	r2,r2,r4
    9294:	10c00003 	ldbu	r3,0(r2)
    9298:	28c7883a 	add	r3,r5,r3
    929c:	38edc83a 	sub	r22,r7,r3
    92a0:	b000731e 	bne	r22,zero,9470 <__udivdi3+0x360>
    92a4:	35400136 	bltu	r6,r21,92ac <__udivdi3+0x19c>
    92a8:	e4c05b36 	bltu	fp,r19,9418 <__udivdi3+0x308>
    92ac:	00800044 	movi	r2,1
    92b0:	0009883a 	mov	r4,zero
    92b4:	d8800315 	stw	r2,12(sp)
    92b8:	d9400317 	ldw	r5,12(sp)
    92bc:	2007883a 	mov	r3,r4
    92c0:	d9000415 	stw	r4,16(sp)
    92c4:	2805883a 	mov	r2,r5
    92c8:	dfc00e17 	ldw	ra,56(sp)
    92cc:	df000d17 	ldw	fp,52(sp)
    92d0:	ddc00c17 	ldw	r23,48(sp)
    92d4:	dd800b17 	ldw	r22,44(sp)
    92d8:	dd400a17 	ldw	r21,40(sp)
    92dc:	dd000917 	ldw	r20,36(sp)
    92e0:	dcc00817 	ldw	r19,32(sp)
    92e4:	dc800717 	ldw	r18,28(sp)
    92e8:	dc400617 	ldw	r17,24(sp)
    92ec:	dc000517 	ldw	r16,20(sp)
    92f0:	dec00f04 	addi	sp,sp,60
    92f4:	f800283a 	ret
    92f8:	00bfffd4 	movui	r2,65535
    92fc:	12005636 	bltu	r2,r8,9458 <__udivdi3+0x348>
    9300:	00803fc4 	movi	r2,255
    9304:	12010036 	bltu	r2,r8,9708 <__udivdi3+0x5f8>
    9308:	000b883a 	mov	r5,zero
    930c:	0005883a 	mov	r2,zero
    9310:	9884d83a 	srl	r2,r19,r2
    9314:	01000074 	movhi	r4,1
    9318:	2138fe04 	addi	r4,r4,-7176
    931c:	01800804 	movi	r6,32
    9320:	1105883a 	add	r2,r2,r4
    9324:	10c00003 	ldbu	r3,0(r2)
    9328:	28c7883a 	add	r3,r5,r3
    932c:	30cbc83a 	sub	r5,r6,r3
    9330:	28000626 	beq	r5,zero,934c <__udivdi3+0x23c>
    9334:	3145c83a 	sub	r2,r6,r5
    9338:	e084d83a 	srl	r2,fp,r2
    933c:	a946983a 	sll	r3,r21,r5
    9340:	e178983a 	sll	fp,fp,r5
    9344:	9966983a 	sll	r19,r19,r5
    9348:	18aab03a 	or	r21,r3,r2
    934c:	982ed43a 	srli	r23,r19,16
    9350:	a809883a 	mov	r4,r21
    9354:	9cbfffcc 	andi	r18,r19,65535
    9358:	b80b883a 	mov	r5,r23
    935c:	0001c900 	call	1c90 <__udivsi3>
    9360:	100b883a 	mov	r5,r2
    9364:	9009883a 	mov	r4,r18
    9368:	1021883a 	mov	r16,r2
    936c:	0001ca00 	call	1ca0 <__mulsi3>
    9370:	a809883a 	mov	r4,r21
    9374:	b80b883a 	mov	r5,r23
    9378:	1023883a 	mov	r17,r2
    937c:	0001c980 	call	1c98 <__umodsi3>
    9380:	1004943a 	slli	r2,r2,16
    9384:	e006d43a 	srli	r3,fp,16
    9388:	10c4b03a 	or	r2,r2,r3
    938c:	1440042e 	bgeu	r2,r17,93a0 <__udivdi3+0x290>
    9390:	14c5883a 	add	r2,r2,r19
    9394:	843fffc4 	addi	r16,r16,-1
    9398:	14c00136 	bltu	r2,r19,93a0 <__udivdi3+0x290>
    939c:	1440ea36 	bltu	r2,r17,9748 <__udivdi3+0x638>
    93a0:	1463c83a 	sub	r17,r2,r17
    93a4:	8809883a 	mov	r4,r17
    93a8:	b80b883a 	mov	r5,r23
    93ac:	0001c900 	call	1c90 <__udivsi3>
    93b0:	100b883a 	mov	r5,r2
    93b4:	9009883a 	mov	r4,r18
    93b8:	102b883a 	mov	r21,r2
    93bc:	0001ca00 	call	1ca0 <__mulsi3>
    93c0:	8809883a 	mov	r4,r17
    93c4:	b80b883a 	mov	r5,r23
    93c8:	1025883a 	mov	r18,r2
    93cc:	0001c980 	call	1c98 <__umodsi3>
    93d0:	1004943a 	slli	r2,r2,16
    93d4:	e0ffffcc 	andi	r3,fp,65535
    93d8:	10c4b03a 	or	r2,r2,r3
    93dc:	1480042e 	bgeu	r2,r18,93f0 <__udivdi3+0x2e0>
    93e0:	9885883a 	add	r2,r19,r2
    93e4:	ad7fffc4 	addi	r21,r21,-1
    93e8:	14c00136 	bltu	r2,r19,93f0 <__udivdi3+0x2e0>
    93ec:	1480d936 	bltu	r2,r18,9754 <__udivdi3+0x644>
    93f0:	8004943a 	slli	r2,r16,16
    93f4:	0009883a 	mov	r4,zero
    93f8:	a884b03a 	or	r2,r21,r2
    93fc:	003fad06 	br	92b4 <__udivdi3+0x1a4>
    9400:	00804034 	movhi	r2,256
    9404:	10bfffc4 	addi	r2,r2,-1
    9408:	11c0b636 	bltu	r2,r7,96e4 <__udivdi3+0x5d4>
    940c:	01400404 	movi	r5,16
    9410:	2805883a 	mov	r2,r5
    9414:	003f9a06 	br	9280 <__udivdi3+0x170>
    9418:	0005883a 	mov	r2,zero
    941c:	0009883a 	mov	r4,zero
    9420:	003fa406 	br	92b4 <__udivdi3+0x1a4>
    9424:	00804034 	movhi	r2,256
    9428:	10bfffc4 	addi	r2,r2,-1
    942c:	14c0b336 	bltu	r2,r19,96fc <__udivdi3+0x5ec>
    9430:	01400404 	movi	r5,16
    9434:	2805883a 	mov	r2,r5
    9438:	003f5106 	br	9180 <__udivdi3+0x70>
    943c:	01000044 	movi	r4,1
    9440:	000b883a 	mov	r5,zero
    9444:	0001c900 	call	1c90 <__udivsi3>
    9448:	1027883a 	mov	r19,r2
    944c:	00bfffd4 	movui	r2,65535
    9450:	14fff436 	bltu	r2,r19,9424 <__udivdi3+0x314>
    9454:	003f4606 	br	9170 <__udivdi3+0x60>
    9458:	00804034 	movhi	r2,256
    945c:	10bfffc4 	addi	r2,r2,-1
    9460:	1200ac36 	bltu	r2,r8,9714 <__udivdi3+0x604>
    9464:	01400404 	movi	r5,16
    9468:	2805883a 	mov	r2,r5
    946c:	003fa806 	br	9310 <__udivdi3+0x200>
    9470:	3d85c83a 	sub	r2,r7,r22
    9474:	3588983a 	sll	r4,r6,r22
    9478:	9886d83a 	srl	r3,r19,r2
    947c:	a8a2d83a 	srl	r17,r21,r2
    9480:	e084d83a 	srl	r2,fp,r2
    9484:	20eeb03a 	or	r23,r4,r3
    9488:	b824d43a 	srli	r18,r23,16
    948c:	ad86983a 	sll	r3,r21,r22
    9490:	8809883a 	mov	r4,r17
    9494:	900b883a 	mov	r5,r18
    9498:	1886b03a 	or	r3,r3,r2
    949c:	d8c00115 	stw	r3,4(sp)
    94a0:	bc3fffcc 	andi	r16,r23,65535
    94a4:	0001c900 	call	1c90 <__udivsi3>
    94a8:	100b883a 	mov	r5,r2
    94ac:	8009883a 	mov	r4,r16
    94b0:	1029883a 	mov	r20,r2
    94b4:	0001ca00 	call	1ca0 <__mulsi3>
    94b8:	900b883a 	mov	r5,r18
    94bc:	8809883a 	mov	r4,r17
    94c0:	102b883a 	mov	r21,r2
    94c4:	0001c980 	call	1c98 <__umodsi3>
    94c8:	d9400117 	ldw	r5,4(sp)
    94cc:	1004943a 	slli	r2,r2,16
    94d0:	9da6983a 	sll	r19,r19,r22
    94d4:	2806d43a 	srli	r3,r5,16
    94d8:	10c4b03a 	or	r2,r2,r3
    94dc:	1540032e 	bgeu	r2,r21,94ec <__udivdi3+0x3dc>
    94e0:	15c5883a 	add	r2,r2,r23
    94e4:	a53fffc4 	addi	r20,r20,-1
    94e8:	15c0912e 	bgeu	r2,r23,9730 <__udivdi3+0x620>
    94ec:	1563c83a 	sub	r17,r2,r21
    94f0:	8809883a 	mov	r4,r17
    94f4:	900b883a 	mov	r5,r18
    94f8:	0001c900 	call	1c90 <__udivsi3>
    94fc:	100b883a 	mov	r5,r2
    9500:	8009883a 	mov	r4,r16
    9504:	102b883a 	mov	r21,r2
    9508:	0001ca00 	call	1ca0 <__mulsi3>
    950c:	8809883a 	mov	r4,r17
    9510:	900b883a 	mov	r5,r18
    9514:	1021883a 	mov	r16,r2
    9518:	0001c980 	call	1c98 <__umodsi3>
    951c:	da800117 	ldw	r10,4(sp)
    9520:	1004943a 	slli	r2,r2,16
    9524:	50ffffcc 	andi	r3,r10,65535
    9528:	10c6b03a 	or	r3,r2,r3
    952c:	1c00032e 	bgeu	r3,r16,953c <__udivdi3+0x42c>
    9530:	1dc7883a 	add	r3,r3,r23
    9534:	ad7fffc4 	addi	r21,r21,-1
    9538:	1dc0792e 	bgeu	r3,r23,9720 <__udivdi3+0x610>
    953c:	a004943a 	slli	r2,r20,16
    9540:	982ed43a 	srli	r23,r19,16
    9544:	9cffffcc 	andi	r19,r19,65535
    9548:	a8a4b03a 	or	r18,r21,r2
    954c:	947fffcc 	andi	r17,r18,65535
    9550:	902ad43a 	srli	r21,r18,16
    9554:	8809883a 	mov	r4,r17
    9558:	980b883a 	mov	r5,r19
    955c:	1c21c83a 	sub	r16,r3,r16
    9560:	0001ca00 	call	1ca0 <__mulsi3>
    9564:	8809883a 	mov	r4,r17
    9568:	b80b883a 	mov	r5,r23
    956c:	1029883a 	mov	r20,r2
    9570:	0001ca00 	call	1ca0 <__mulsi3>
    9574:	980b883a 	mov	r5,r19
    9578:	a809883a 	mov	r4,r21
    957c:	1023883a 	mov	r17,r2
    9580:	0001ca00 	call	1ca0 <__mulsi3>
    9584:	a809883a 	mov	r4,r21
    9588:	b80b883a 	mov	r5,r23
    958c:	1027883a 	mov	r19,r2
    9590:	0001ca00 	call	1ca0 <__mulsi3>
    9594:	1009883a 	mov	r4,r2
    9598:	a004d43a 	srli	r2,r20,16
    959c:	8ce3883a 	add	r17,r17,r19
    95a0:	1447883a 	add	r3,r2,r17
    95a4:	1cc0022e 	bgeu	r3,r19,95b0 <__udivdi3+0x4a0>
    95a8:	00800074 	movhi	r2,1
    95ac:	2089883a 	add	r4,r4,r2
    95b0:	1804d43a 	srli	r2,r3,16
    95b4:	2085883a 	add	r2,r4,r2
    95b8:	80804436 	bltu	r16,r2,96cc <__udivdi3+0x5bc>
    95bc:	80803e26 	beq	r16,r2,96b8 <__udivdi3+0x5a8>
    95c0:	9005883a 	mov	r2,r18
    95c4:	0009883a 	mov	r4,zero
    95c8:	003f3a06 	br	92b4 <__udivdi3+0x1a4>
    95cc:	9d26983a 	sll	r19,r19,r20
    95d0:	3505c83a 	sub	r2,r6,r20
    95d4:	a8a2d83a 	srl	r17,r21,r2
    95d8:	982ed43a 	srli	r23,r19,16
    95dc:	e084d83a 	srl	r2,fp,r2
    95e0:	ad06983a 	sll	r3,r21,r20
    95e4:	8809883a 	mov	r4,r17
    95e8:	b80b883a 	mov	r5,r23
    95ec:	1886b03a 	or	r3,r3,r2
    95f0:	d8c00015 	stw	r3,0(sp)
    95f4:	9dbfffcc 	andi	r22,r19,65535
    95f8:	0001c900 	call	1c90 <__udivsi3>
    95fc:	100b883a 	mov	r5,r2
    9600:	b009883a 	mov	r4,r22
    9604:	d8800215 	stw	r2,8(sp)
    9608:	0001ca00 	call	1ca0 <__mulsi3>
    960c:	8809883a 	mov	r4,r17
    9610:	b80b883a 	mov	r5,r23
    9614:	102b883a 	mov	r21,r2
    9618:	0001c980 	call	1c98 <__umodsi3>
    961c:	d9000017 	ldw	r4,0(sp)
    9620:	1004943a 	slli	r2,r2,16
    9624:	2006d43a 	srli	r3,r4,16
    9628:	10c4b03a 	or	r2,r2,r3
    962c:	1540052e 	bgeu	r2,r21,9644 <__udivdi3+0x534>
    9630:	d9400217 	ldw	r5,8(sp)
    9634:	14c5883a 	add	r2,r2,r19
    9638:	297fffc4 	addi	r5,r5,-1
    963c:	d9400215 	stw	r5,8(sp)
    9640:	14c0462e 	bgeu	r2,r19,975c <__udivdi3+0x64c>
    9644:	1563c83a 	sub	r17,r2,r21
    9648:	8809883a 	mov	r4,r17
    964c:	b80b883a 	mov	r5,r23
    9650:	0001c900 	call	1c90 <__udivsi3>
    9654:	100b883a 	mov	r5,r2
    9658:	b009883a 	mov	r4,r22
    965c:	1025883a 	mov	r18,r2
    9660:	0001ca00 	call	1ca0 <__mulsi3>
    9664:	8809883a 	mov	r4,r17
    9668:	b80b883a 	mov	r5,r23
    966c:	1021883a 	mov	r16,r2
    9670:	0001c980 	call	1c98 <__umodsi3>
    9674:	da800017 	ldw	r10,0(sp)
    9678:	1004943a 	slli	r2,r2,16
    967c:	50ffffcc 	andi	r3,r10,65535
    9680:	10c6b03a 	or	r3,r2,r3
    9684:	1c00062e 	bgeu	r3,r16,96a0 <__udivdi3+0x590>
    9688:	1cc7883a 	add	r3,r3,r19
    968c:	94bfffc4 	addi	r18,r18,-1
    9690:	1cc00336 	bltu	r3,r19,96a0 <__udivdi3+0x590>
    9694:	1c00022e 	bgeu	r3,r16,96a0 <__udivdi3+0x590>
    9698:	94bfffc4 	addi	r18,r18,-1
    969c:	1cc7883a 	add	r3,r3,r19
    96a0:	d9000217 	ldw	r4,8(sp)
    96a4:	e538983a 	sll	fp,fp,r20
    96a8:	1c2bc83a 	sub	r21,r3,r16
    96ac:	2004943a 	slli	r2,r4,16
    96b0:	90a8b03a 	or	r20,r18,r2
    96b4:	003ebf06 	br	91b4 <__udivdi3+0xa4>
    96b8:	1804943a 	slli	r2,r3,16
    96bc:	e588983a 	sll	r4,fp,r22
    96c0:	a0ffffcc 	andi	r3,r20,65535
    96c4:	10c5883a 	add	r2,r2,r3
    96c8:	20bfbd2e 	bgeu	r4,r2,95c0 <__udivdi3+0x4b0>
    96cc:	90bfffc4 	addi	r2,r18,-1
    96d0:	0009883a 	mov	r4,zero
    96d4:	003ef706 	br	92b4 <__udivdi3+0x1a4>
    96d8:	01400204 	movi	r5,8
    96dc:	2805883a 	mov	r2,r5
    96e0:	003ee706 	br	9280 <__udivdi3+0x170>
    96e4:	01400604 	movi	r5,24
    96e8:	2805883a 	mov	r2,r5
    96ec:	003ee406 	br	9280 <__udivdi3+0x170>
    96f0:	01400204 	movi	r5,8
    96f4:	2805883a 	mov	r2,r5
    96f8:	003ea106 	br	9180 <__udivdi3+0x70>
    96fc:	01400604 	movi	r5,24
    9700:	2805883a 	mov	r2,r5
    9704:	003e9e06 	br	9180 <__udivdi3+0x70>
    9708:	01400204 	movi	r5,8
    970c:	2805883a 	mov	r2,r5
    9710:	003eff06 	br	9310 <__udivdi3+0x200>
    9714:	01400604 	movi	r5,24
    9718:	2805883a 	mov	r2,r5
    971c:	003efc06 	br	9310 <__udivdi3+0x200>
    9720:	1c3f862e 	bgeu	r3,r16,953c <__udivdi3+0x42c>
    9724:	1dc7883a 	add	r3,r3,r23
    9728:	ad7fffc4 	addi	r21,r21,-1
    972c:	003f8306 	br	953c <__udivdi3+0x42c>
    9730:	157f6e2e 	bgeu	r2,r21,94ec <__udivdi3+0x3dc>
    9734:	a53fffc4 	addi	r20,r20,-1
    9738:	15c5883a 	add	r2,r2,r23
    973c:	003f6b06 	br	94ec <__udivdi3+0x3dc>
    9740:	ad7fffc4 	addi	r21,r21,-1
    9744:	003ec206 	br	9250 <__udivdi3+0x140>
    9748:	843fffc4 	addi	r16,r16,-1
    974c:	14c5883a 	add	r2,r2,r19
    9750:	003f1306 	br	93a0 <__udivdi3+0x290>
    9754:	ad7fffc4 	addi	r21,r21,-1
    9758:	003f2506 	br	93f0 <__udivdi3+0x2e0>
    975c:	157fb92e 	bgeu	r2,r21,9644 <__udivdi3+0x534>
    9760:	297fffc4 	addi	r5,r5,-1
    9764:	14c5883a 	add	r2,r2,r19
    9768:	d9400215 	stw	r5,8(sp)
    976c:	003fb506 	br	9644 <__udivdi3+0x534>
    9770:	843fffc4 	addi	r16,r16,-1
    9774:	14c5883a 	add	r2,r2,r19
    9778:	003ea106 	br	9200 <__udivdi3+0xf0>

0000977c <__umoddi3>:
    977c:	defff004 	addi	sp,sp,-64
    9780:	3011883a 	mov	r8,r6
    9784:	000d883a 	mov	r6,zero
    9788:	dd400b15 	stw	r21,44(sp)
    978c:	dcc00915 	stw	r19,36(sp)
    9790:	dc000615 	stw	r16,24(sp)
    9794:	dfc00f15 	stw	ra,60(sp)
    9798:	df000e15 	stw	fp,56(sp)
    979c:	ddc00d15 	stw	r23,52(sp)
    97a0:	dd800c15 	stw	r22,48(sp)
    97a4:	dd000a15 	stw	r20,40(sp)
    97a8:	dc800815 	stw	r18,32(sp)
    97ac:	dc400715 	stw	r17,28(sp)
    97b0:	2817883a 	mov	r11,r5
    97b4:	d9800415 	stw	r6,16(sp)
    97b8:	4027883a 	mov	r19,r8
    97bc:	d9800515 	stw	r6,20(sp)
    97c0:	2021883a 	mov	r16,r4
    97c4:	282b883a 	mov	r21,r5
    97c8:	38002c1e 	bne	r7,zero,987c <__umoddi3+0x100>
    97cc:	2a005636 	bltu	r5,r8,9928 <__umoddi3+0x1ac>
    97d0:	40009a26 	beq	r8,zero,9a3c <__umoddi3+0x2c0>
    97d4:	00bfffd4 	movui	r2,65535
    97d8:	14c09236 	bltu	r2,r19,9a24 <__umoddi3+0x2a8>
    97dc:	00803fc4 	movi	r2,255
    97e0:	14c15c36 	bltu	r2,r19,9d54 <__umoddi3+0x5d8>
    97e4:	000b883a 	mov	r5,zero
    97e8:	0005883a 	mov	r2,zero
    97ec:	9884d83a 	srl	r2,r19,r2
    97f0:	01000074 	movhi	r4,1
    97f4:	2138fe04 	addi	r4,r4,-7176
    97f8:	01800804 	movi	r6,32
    97fc:	1105883a 	add	r2,r2,r4
    9800:	10c00003 	ldbu	r3,0(r2)
    9804:	28c7883a 	add	r3,r5,r3
    9808:	30e5c83a 	sub	r18,r6,r3
    980c:	9000a41e 	bne	r18,zero,9aa0 <__umoddi3+0x324>
    9810:	982ed43a 	srli	r23,r19,16
    9814:	acebc83a 	sub	r21,r21,r19
    9818:	9d3fffcc 	andi	r20,r19,65535
    981c:	002d883a 	mov	r22,zero
    9820:	a809883a 	mov	r4,r21
    9824:	b80b883a 	mov	r5,r23
    9828:	0001c900 	call	1c90 <__udivsi3>
    982c:	100b883a 	mov	r5,r2
    9830:	a009883a 	mov	r4,r20
    9834:	0001ca00 	call	1ca0 <__mulsi3>
    9838:	a809883a 	mov	r4,r21
    983c:	b80b883a 	mov	r5,r23
    9840:	1023883a 	mov	r17,r2
    9844:	0001c980 	call	1c98 <__umodsi3>
    9848:	1004943a 	slli	r2,r2,16
    984c:	8006d43a 	srli	r3,r16,16
    9850:	10c4b03a 	or	r2,r2,r3
    9854:	1440032e 	bgeu	r2,r17,9864 <__umoddi3+0xe8>
    9858:	14c5883a 	add	r2,r2,r19
    985c:	14c00136 	bltu	r2,r19,9864 <__umoddi3+0xe8>
    9860:	14415836 	bltu	r2,r17,9dc4 <__umoddi3+0x648>
    9864:	1463c83a 	sub	r17,r2,r17
    9868:	8809883a 	mov	r4,r17
    986c:	b80b883a 	mov	r5,r23
    9870:	0001c900 	call	1c90 <__udivsi3>
    9874:	a009883a 	mov	r4,r20
    9878:	00005306 	br	99c8 <__umoddi3+0x24c>
    987c:	380d883a 	mov	r6,r7
    9880:	29c0132e 	bgeu	r5,r7,98d0 <__umoddi3+0x154>
    9884:	d9000415 	stw	r4,16(sp)
    9888:	d9400515 	stw	r5,20(sp)
    988c:	d9400417 	ldw	r5,16(sp)
    9890:	5813883a 	mov	r9,r11
    9894:	2811883a 	mov	r8,r5
    9898:	4005883a 	mov	r2,r8
    989c:	4807883a 	mov	r3,r9
    98a0:	dfc00f17 	ldw	ra,60(sp)
    98a4:	df000e17 	ldw	fp,56(sp)
    98a8:	ddc00d17 	ldw	r23,52(sp)
    98ac:	dd800c17 	ldw	r22,48(sp)
    98b0:	dd400b17 	ldw	r21,44(sp)
    98b4:	dd000a17 	ldw	r20,40(sp)
    98b8:	dcc00917 	ldw	r19,36(sp)
    98bc:	dc800817 	ldw	r18,32(sp)
    98c0:	dc400717 	ldw	r17,28(sp)
    98c4:	dc000617 	ldw	r16,24(sp)
    98c8:	dec01004 	addi	sp,sp,64
    98cc:	f800283a 	ret
    98d0:	00bfffd4 	movui	r2,65535
    98d4:	11c06636 	bltu	r2,r7,9a70 <__umoddi3+0x2f4>
    98d8:	00803fc4 	movi	r2,255
    98dc:	11c12036 	bltu	r2,r7,9d60 <__umoddi3+0x5e4>
    98e0:	000b883a 	mov	r5,zero
    98e4:	0005883a 	mov	r2,zero
    98e8:	3084d83a 	srl	r2,r6,r2
    98ec:	01000074 	movhi	r4,1
    98f0:	2138fe04 	addi	r4,r4,-7176
    98f4:	01c00804 	movi	r7,32
    98f8:	1105883a 	add	r2,r2,r4
    98fc:	10c00003 	ldbu	r3,0(r2)
    9900:	28c7883a 	add	r3,r5,r3
    9904:	38e5c83a 	sub	r18,r7,r3
    9908:	9000941e 	bne	r18,zero,9b5c <__umoddi3+0x3e0>
    990c:	35405e36 	bltu	r6,r21,9a88 <__umoddi3+0x30c>
    9910:	84c05d2e 	bgeu	r16,r19,9a88 <__umoddi3+0x30c>
    9914:	8011883a 	mov	r8,r16
    9918:	a813883a 	mov	r9,r21
    991c:	dc000415 	stw	r16,16(sp)
    9920:	dd400515 	stw	r21,20(sp)
    9924:	003fdc06 	br	9898 <__umoddi3+0x11c>
    9928:	00bfffd4 	movui	r2,65535
    992c:	12004a36 	bltu	r2,r8,9a58 <__umoddi3+0x2dc>
    9930:	00803fc4 	movi	r2,255
    9934:	12010d36 	bltu	r2,r8,9d6c <__umoddi3+0x5f0>
    9938:	000b883a 	mov	r5,zero
    993c:	0005883a 	mov	r2,zero
    9940:	9884d83a 	srl	r2,r19,r2
    9944:	01000074 	movhi	r4,1
    9948:	2138fe04 	addi	r4,r4,-7176
    994c:	01800804 	movi	r6,32
    9950:	1105883a 	add	r2,r2,r4
    9954:	10c00003 	ldbu	r3,0(r2)
    9958:	28c7883a 	add	r3,r5,r3
    995c:	30c7c83a 	sub	r3,r6,r3
    9960:	1800dc1e 	bne	r3,zero,9cd4 <__umoddi3+0x558>
    9964:	002d883a 	mov	r22,zero
    9968:	982ed43a 	srli	r23,r19,16
    996c:	a809883a 	mov	r4,r21
    9970:	9cbfffcc 	andi	r18,r19,65535
    9974:	b80b883a 	mov	r5,r23
    9978:	0001c900 	call	1c90 <__udivsi3>
    997c:	100b883a 	mov	r5,r2
    9980:	9009883a 	mov	r4,r18
    9984:	0001ca00 	call	1ca0 <__mulsi3>
    9988:	a809883a 	mov	r4,r21
    998c:	b80b883a 	mov	r5,r23
    9990:	1023883a 	mov	r17,r2
    9994:	0001c980 	call	1c98 <__umodsi3>
    9998:	1004943a 	slli	r2,r2,16
    999c:	8006d43a 	srli	r3,r16,16
    99a0:	10c4b03a 	or	r2,r2,r3
    99a4:	1440032e 	bgeu	r2,r17,99b4 <__umoddi3+0x238>
    99a8:	14c5883a 	add	r2,r2,r19
    99ac:	14c00136 	bltu	r2,r19,99b4 <__umoddi3+0x238>
    99b0:	14410236 	bltu	r2,r17,9dbc <__umoddi3+0x640>
    99b4:	1463c83a 	sub	r17,r2,r17
    99b8:	8809883a 	mov	r4,r17
    99bc:	b80b883a 	mov	r5,r23
    99c0:	0001c900 	call	1c90 <__udivsi3>
    99c4:	9009883a 	mov	r4,r18
    99c8:	100b883a 	mov	r5,r2
    99cc:	0001ca00 	call	1ca0 <__mulsi3>
    99d0:	8809883a 	mov	r4,r17
    99d4:	b80b883a 	mov	r5,r23
    99d8:	102b883a 	mov	r21,r2
    99dc:	0001c980 	call	1c98 <__umodsi3>
    99e0:	1004943a 	slli	r2,r2,16
    99e4:	80ffffcc 	andi	r3,r16,65535
    99e8:	10c4b03a 	or	r2,r2,r3
    99ec:	1540042e 	bgeu	r2,r21,9a00 <__umoddi3+0x284>
    99f0:	14c5883a 	add	r2,r2,r19
    99f4:	14c00236 	bltu	r2,r19,9a00 <__umoddi3+0x284>
    99f8:	1540012e 	bgeu	r2,r21,9a00 <__umoddi3+0x284>
    99fc:	14c5883a 	add	r2,r2,r19
    9a00:	1545c83a 	sub	r2,r2,r21
    9a04:	1584d83a 	srl	r2,r2,r22
    9a08:	0013883a 	mov	r9,zero
    9a0c:	d8800415 	stw	r2,16(sp)
    9a10:	d8c00417 	ldw	r3,16(sp)
    9a14:	0005883a 	mov	r2,zero
    9a18:	d8800515 	stw	r2,20(sp)
    9a1c:	1811883a 	mov	r8,r3
    9a20:	003f9d06 	br	9898 <__umoddi3+0x11c>
    9a24:	00804034 	movhi	r2,256
    9a28:	10bfffc4 	addi	r2,r2,-1
    9a2c:	14c0c636 	bltu	r2,r19,9d48 <__umoddi3+0x5cc>
    9a30:	01400404 	movi	r5,16
    9a34:	2805883a 	mov	r2,r5
    9a38:	003f6c06 	br	97ec <__umoddi3+0x70>
    9a3c:	01000044 	movi	r4,1
    9a40:	000b883a 	mov	r5,zero
    9a44:	0001c900 	call	1c90 <__udivsi3>
    9a48:	1027883a 	mov	r19,r2
    9a4c:	00bfffd4 	movui	r2,65535
    9a50:	14fff436 	bltu	r2,r19,9a24 <__umoddi3+0x2a8>
    9a54:	003f6106 	br	97dc <__umoddi3+0x60>
    9a58:	00804034 	movhi	r2,256
    9a5c:	10bfffc4 	addi	r2,r2,-1
    9a60:	1200c536 	bltu	r2,r8,9d78 <__umoddi3+0x5fc>
    9a64:	01400404 	movi	r5,16
    9a68:	2805883a 	mov	r2,r5
    9a6c:	003fb406 	br	9940 <__umoddi3+0x1c4>
    9a70:	00804034 	movhi	r2,256
    9a74:	10bfffc4 	addi	r2,r2,-1
    9a78:	11c0c236 	bltu	r2,r7,9d84 <__umoddi3+0x608>
    9a7c:	01400404 	movi	r5,16
    9a80:	2805883a 	mov	r2,r5
    9a84:	003f9806 	br	98e8 <__umoddi3+0x16c>
    9a88:	84c9c83a 	sub	r4,r16,r19
    9a8c:	8105803a 	cmpltu	r2,r16,r4
    9a90:	a987c83a 	sub	r3,r21,r6
    9a94:	18abc83a 	sub	r21,r3,r2
    9a98:	2021883a 	mov	r16,r4
    9a9c:	003f9d06 	br	9914 <__umoddi3+0x198>
    9aa0:	9ca6983a 	sll	r19,r19,r18
    9aa4:	3485c83a 	sub	r2,r6,r18
    9aa8:	a8a2d83a 	srl	r17,r21,r2
    9aac:	982ed43a 	srli	r23,r19,16
    9ab0:	ac86983a 	sll	r3,r21,r18
    9ab4:	8084d83a 	srl	r2,r16,r2
    9ab8:	8809883a 	mov	r4,r17
    9abc:	b80b883a 	mov	r5,r23
    9ac0:	18b8b03a 	or	fp,r3,r2
    9ac4:	9d3fffcc 	andi	r20,r19,65535
    9ac8:	0001c900 	call	1c90 <__udivsi3>
    9acc:	100b883a 	mov	r5,r2
    9ad0:	a009883a 	mov	r4,r20
    9ad4:	0001ca00 	call	1ca0 <__mulsi3>
    9ad8:	8809883a 	mov	r4,r17
    9adc:	b80b883a 	mov	r5,r23
    9ae0:	102b883a 	mov	r21,r2
    9ae4:	0001c980 	call	1c98 <__umodsi3>
    9ae8:	1004943a 	slli	r2,r2,16
    9aec:	e006d43a 	srli	r3,fp,16
    9af0:	902d883a 	mov	r22,r18
    9af4:	10c4b03a 	or	r2,r2,r3
    9af8:	1540022e 	bgeu	r2,r21,9b04 <__umoddi3+0x388>
    9afc:	14c5883a 	add	r2,r2,r19
    9b00:	14c0ab2e 	bgeu	r2,r19,9db0 <__umoddi3+0x634>
    9b04:	1563c83a 	sub	r17,r2,r21
    9b08:	8809883a 	mov	r4,r17
    9b0c:	b80b883a 	mov	r5,r23
    9b10:	0001c900 	call	1c90 <__udivsi3>
    9b14:	100b883a 	mov	r5,r2
    9b18:	a009883a 	mov	r4,r20
    9b1c:	0001ca00 	call	1ca0 <__mulsi3>
    9b20:	8809883a 	mov	r4,r17
    9b24:	b80b883a 	mov	r5,r23
    9b28:	102b883a 	mov	r21,r2
    9b2c:	0001c980 	call	1c98 <__umodsi3>
    9b30:	1004943a 	slli	r2,r2,16
    9b34:	e0ffffcc 	andi	r3,fp,65535
    9b38:	10c4b03a 	or	r2,r2,r3
    9b3c:	1540042e 	bgeu	r2,r21,9b50 <__umoddi3+0x3d4>
    9b40:	14c5883a 	add	r2,r2,r19
    9b44:	14c00236 	bltu	r2,r19,9b50 <__umoddi3+0x3d4>
    9b48:	1540012e 	bgeu	r2,r21,9b50 <__umoddi3+0x3d4>
    9b4c:	14c5883a 	add	r2,r2,r19
    9b50:	84a0983a 	sll	r16,r16,r18
    9b54:	156bc83a 	sub	r21,r2,r21
    9b58:	003f3106 	br	9820 <__umoddi3+0xa4>
    9b5c:	3c8fc83a 	sub	r7,r7,r18
    9b60:	3486983a 	sll	r3,r6,r18
    9b64:	99c4d83a 	srl	r2,r19,r7
    9b68:	a9e2d83a 	srl	r17,r21,r7
    9b6c:	ac8c983a 	sll	r6,r21,r18
    9b70:	18acb03a 	or	r22,r3,r2
    9b74:	b02ed43a 	srli	r23,r22,16
    9b78:	81c4d83a 	srl	r2,r16,r7
    9b7c:	8809883a 	mov	r4,r17
    9b80:	b80b883a 	mov	r5,r23
    9b84:	308cb03a 	or	r6,r6,r2
    9b88:	d9c00315 	stw	r7,12(sp)
    9b8c:	d9800215 	stw	r6,8(sp)
    9b90:	b53fffcc 	andi	r20,r22,65535
    9b94:	0001c900 	call	1c90 <__udivsi3>
    9b98:	100b883a 	mov	r5,r2
    9b9c:	a009883a 	mov	r4,r20
    9ba0:	1039883a 	mov	fp,r2
    9ba4:	0001ca00 	call	1ca0 <__mulsi3>
    9ba8:	8809883a 	mov	r4,r17
    9bac:	b80b883a 	mov	r5,r23
    9bb0:	102b883a 	mov	r21,r2
    9bb4:	0001c980 	call	1c98 <__umodsi3>
    9bb8:	d9000217 	ldw	r4,8(sp)
    9bbc:	1004943a 	slli	r2,r2,16
    9bc0:	9ca6983a 	sll	r19,r19,r18
    9bc4:	2006d43a 	srli	r3,r4,16
    9bc8:	84a0983a 	sll	r16,r16,r18
    9bcc:	dcc00015 	stw	r19,0(sp)
    9bd0:	10c4b03a 	or	r2,r2,r3
    9bd4:	dc000115 	stw	r16,4(sp)
    9bd8:	1540032e 	bgeu	r2,r21,9be8 <__umoddi3+0x46c>
    9bdc:	1585883a 	add	r2,r2,r22
    9be0:	e73fffc4 	addi	fp,fp,-1
    9be4:	15806e2e 	bgeu	r2,r22,9da0 <__umoddi3+0x624>
    9be8:	1563c83a 	sub	r17,r2,r21
    9bec:	8809883a 	mov	r4,r17
    9bf0:	b80b883a 	mov	r5,r23
    9bf4:	0001c900 	call	1c90 <__udivsi3>
    9bf8:	100b883a 	mov	r5,r2
    9bfc:	a009883a 	mov	r4,r20
    9c00:	1021883a 	mov	r16,r2
    9c04:	0001ca00 	call	1ca0 <__mulsi3>
    9c08:	b80b883a 	mov	r5,r23
    9c0c:	8809883a 	mov	r4,r17
    9c10:	1029883a 	mov	r20,r2
    9c14:	0001c980 	call	1c98 <__umodsi3>
    9c18:	d9400217 	ldw	r5,8(sp)
    9c1c:	1004943a 	slli	r2,r2,16
    9c20:	28ffffcc 	andi	r3,r5,65535
    9c24:	10c4b03a 	or	r2,r2,r3
    9c28:	1500032e 	bgeu	r2,r20,9c38 <__umoddi3+0x4bc>
    9c2c:	1585883a 	add	r2,r2,r22
    9c30:	843fffc4 	addi	r16,r16,-1
    9c34:	1580562e 	bgeu	r2,r22,9d90 <__umoddi3+0x614>
    9c38:	d9800017 	ldw	r6,0(sp)
    9c3c:	e022943a 	slli	r17,fp,16
    9c40:	302ed43a 	srli	r23,r6,16
    9c44:	8462b03a 	or	r17,r16,r17
    9c48:	34ffffcc 	andi	r19,r6,65535
    9c4c:	882ad43a 	srli	r21,r17,16
    9c50:	8c7fffcc 	andi	r17,r17,65535
    9c54:	8809883a 	mov	r4,r17
    9c58:	980b883a 	mov	r5,r19
    9c5c:	1521c83a 	sub	r16,r2,r20
    9c60:	0001ca00 	call	1ca0 <__mulsi3>
    9c64:	8809883a 	mov	r4,r17
    9c68:	b80b883a 	mov	r5,r23
    9c6c:	1029883a 	mov	r20,r2
    9c70:	0001ca00 	call	1ca0 <__mulsi3>
    9c74:	980b883a 	mov	r5,r19
    9c78:	a809883a 	mov	r4,r21
    9c7c:	1023883a 	mov	r17,r2
    9c80:	0001ca00 	call	1ca0 <__mulsi3>
    9c84:	a809883a 	mov	r4,r21
    9c88:	b80b883a 	mov	r5,r23
    9c8c:	1027883a 	mov	r19,r2
    9c90:	0001ca00 	call	1ca0 <__mulsi3>
    9c94:	100b883a 	mov	r5,r2
    9c98:	a004d43a 	srli	r2,r20,16
    9c9c:	8ce3883a 	add	r17,r17,r19
    9ca0:	1449883a 	add	r4,r2,r17
    9ca4:	24c0022e 	bgeu	r4,r19,9cb0 <__umoddi3+0x534>
    9ca8:	00800074 	movhi	r2,1
    9cac:	288b883a 	add	r5,r5,r2
    9cb0:	2004d43a 	srli	r2,r4,16
    9cb4:	2008943a 	slli	r4,r4,16
    9cb8:	a0ffffcc 	andi	r3,r20,65535
    9cbc:	288d883a 	add	r6,r5,r2
    9cc0:	20c9883a 	add	r4,r4,r3
    9cc4:	81800b36 	bltu	r16,r6,9cf4 <__umoddi3+0x578>
    9cc8:	81804026 	beq	r16,r6,9dcc <__umoddi3+0x650>
    9ccc:	818dc83a 	sub	r6,r16,r6
    9cd0:	00000f06 	br	9d10 <__umoddi3+0x594>
    9cd4:	30c5c83a 	sub	r2,r6,r3
    9cd8:	182d883a 	mov	r22,r3
    9cdc:	8084d83a 	srl	r2,r16,r2
    9ce0:	a8c6983a 	sll	r3,r21,r3
    9ce4:	9da6983a 	sll	r19,r19,r22
    9ce8:	85a0983a 	sll	r16,r16,r22
    9cec:	18aab03a 	or	r21,r3,r2
    9cf0:	003f1d06 	br	9968 <__umoddi3+0x1ec>
    9cf4:	d8c00017 	ldw	r3,0(sp)
    9cf8:	20c5c83a 	sub	r2,r4,r3
    9cfc:	2089803a 	cmpltu	r4,r4,r2
    9d00:	3587c83a 	sub	r3,r6,r22
    9d04:	1907c83a 	sub	r3,r3,r4
    9d08:	80cdc83a 	sub	r6,r16,r3
    9d0c:	1009883a 	mov	r4,r2
    9d10:	d9400117 	ldw	r5,4(sp)
    9d14:	2905c83a 	sub	r2,r5,r4
    9d18:	2887803a 	cmpltu	r3,r5,r2
    9d1c:	30c7c83a 	sub	r3,r6,r3
    9d20:	d9800317 	ldw	r6,12(sp)
    9d24:	1484d83a 	srl	r2,r2,r18
    9d28:	1988983a 	sll	r4,r3,r6
    9d2c:	1c86d83a 	srl	r3,r3,r18
    9d30:	2088b03a 	or	r4,r4,r2
    9d34:	2011883a 	mov	r8,r4
    9d38:	1813883a 	mov	r9,r3
    9d3c:	d9000415 	stw	r4,16(sp)
    9d40:	d8c00515 	stw	r3,20(sp)
    9d44:	003ed406 	br	9898 <__umoddi3+0x11c>
    9d48:	01400604 	movi	r5,24
    9d4c:	2805883a 	mov	r2,r5
    9d50:	003ea606 	br	97ec <__umoddi3+0x70>
    9d54:	01400204 	movi	r5,8
    9d58:	2805883a 	mov	r2,r5
    9d5c:	003ea306 	br	97ec <__umoddi3+0x70>
    9d60:	01400204 	movi	r5,8
    9d64:	2805883a 	mov	r2,r5
    9d68:	003edf06 	br	98e8 <__umoddi3+0x16c>
    9d6c:	01400204 	movi	r5,8
    9d70:	2805883a 	mov	r2,r5
    9d74:	003ef206 	br	9940 <__umoddi3+0x1c4>
    9d78:	01400604 	movi	r5,24
    9d7c:	2805883a 	mov	r2,r5
    9d80:	003eef06 	br	9940 <__umoddi3+0x1c4>
    9d84:	01400604 	movi	r5,24
    9d88:	2805883a 	mov	r2,r5
    9d8c:	003ed606 	br	98e8 <__umoddi3+0x16c>
    9d90:	153fa92e 	bgeu	r2,r20,9c38 <__umoddi3+0x4bc>
    9d94:	843fffc4 	addi	r16,r16,-1
    9d98:	1585883a 	add	r2,r2,r22
    9d9c:	003fa606 	br	9c38 <__umoddi3+0x4bc>
    9da0:	157f912e 	bgeu	r2,r21,9be8 <__umoddi3+0x46c>
    9da4:	e73fffc4 	addi	fp,fp,-1
    9da8:	1585883a 	add	r2,r2,r22
    9dac:	003f8e06 	br	9be8 <__umoddi3+0x46c>
    9db0:	157f542e 	bgeu	r2,r21,9b04 <__umoddi3+0x388>
    9db4:	14c5883a 	add	r2,r2,r19
    9db8:	003f5206 	br	9b04 <__umoddi3+0x388>
    9dbc:	14c5883a 	add	r2,r2,r19
    9dc0:	003efc06 	br	99b4 <__umoddi3+0x238>
    9dc4:	14c5883a 	add	r2,r2,r19
    9dc8:	003ea606 	br	9864 <__umoddi3+0xe8>
    9dcc:	d8800117 	ldw	r2,4(sp)
    9dd0:	113fc836 	bltu	r2,r4,9cf4 <__umoddi3+0x578>
    9dd4:	000d883a 	mov	r6,zero
    9dd8:	003fcd06 	br	9d10 <__umoddi3+0x594>

00009ddc <_fpadd_parts>:
    9ddc:	defff804 	addi	sp,sp,-32
    9de0:	dcc00315 	stw	r19,12(sp)
    9de4:	2027883a 	mov	r19,r4
    9de8:	21000017 	ldw	r4,0(r4)
    9dec:	00c00044 	movi	r3,1
    9df0:	dd400515 	stw	r21,20(sp)
    9df4:	dd000415 	stw	r20,16(sp)
    9df8:	ddc00715 	stw	r23,28(sp)
    9dfc:	dd800615 	stw	r22,24(sp)
    9e00:	dc800215 	stw	r18,8(sp)
    9e04:	dc400115 	stw	r17,4(sp)
    9e08:	dc000015 	stw	r16,0(sp)
    9e0c:	282b883a 	mov	r21,r5
    9e10:	3029883a 	mov	r20,r6
    9e14:	1900632e 	bgeu	r3,r4,9fa4 <_fpadd_parts+0x1c8>
    9e18:	28800017 	ldw	r2,0(r5)
    9e1c:	1880812e 	bgeu	r3,r2,a024 <_fpadd_parts+0x248>
    9e20:	00c00104 	movi	r3,4
    9e24:	20c0dc26 	beq	r4,r3,a198 <_fpadd_parts+0x3bc>
    9e28:	10c07e26 	beq	r2,r3,a024 <_fpadd_parts+0x248>
    9e2c:	00c00084 	movi	r3,2
    9e30:	10c06726 	beq	r2,r3,9fd0 <_fpadd_parts+0x1f4>
    9e34:	20c07b26 	beq	r4,r3,a024 <_fpadd_parts+0x248>
    9e38:	9dc00217 	ldw	r23,8(r19)
    9e3c:	28c00217 	ldw	r3,8(r5)
    9e40:	9c400317 	ldw	r17,12(r19)
    9e44:	2bc00317 	ldw	r15,12(r5)
    9e48:	b8cdc83a 	sub	r6,r23,r3
    9e4c:	9c800417 	ldw	r18,16(r19)
    9e50:	2c000417 	ldw	r16,16(r5)
    9e54:	3009883a 	mov	r4,r6
    9e58:	30009716 	blt	r6,zero,a0b8 <_fpadd_parts+0x2dc>
    9e5c:	00800fc4 	movi	r2,63
    9e60:	11806b16 	blt	r2,r6,a010 <_fpadd_parts+0x234>
    9e64:	0100a40e 	bge	zero,r4,a0f8 <_fpadd_parts+0x31c>
    9e68:	35bff804 	addi	r22,r6,-32
    9e6c:	b000bc16 	blt	r22,zero,a160 <_fpadd_parts+0x384>
    9e70:	8596d83a 	srl	r11,r16,r22
    9e74:	0019883a 	mov	r12,zero
    9e78:	0013883a 	mov	r9,zero
    9e7c:	01000044 	movi	r4,1
    9e80:	0015883a 	mov	r10,zero
    9e84:	b000be16 	blt	r22,zero,a180 <_fpadd_parts+0x3a4>
    9e88:	2590983a 	sll	r8,r4,r22
    9e8c:	000f883a 	mov	r7,zero
    9e90:	00bfffc4 	movi	r2,-1
    9e94:	3889883a 	add	r4,r7,r2
    9e98:	408b883a 	add	r5,r8,r2
    9e9c:	21cd803a 	cmpltu	r6,r4,r7
    9ea0:	314b883a 	add	r5,r6,r5
    9ea4:	7904703a 	and	r2,r15,r4
    9ea8:	8146703a 	and	r3,r16,r5
    9eac:	10c4b03a 	or	r2,r2,r3
    9eb0:	10000226 	beq	r2,zero,9ebc <_fpadd_parts+0xe0>
    9eb4:	02400044 	movi	r9,1
    9eb8:	0015883a 	mov	r10,zero
    9ebc:	5a5eb03a 	or	r15,r11,r9
    9ec0:	62a0b03a 	or	r16,r12,r10
    9ec4:	99400117 	ldw	r5,4(r19)
    9ec8:	a8800117 	ldw	r2,4(r21)
    9ecc:	28806e26 	beq	r5,r2,a088 <_fpadd_parts+0x2ac>
    9ed0:	28006626 	beq	r5,zero,a06c <_fpadd_parts+0x290>
    9ed4:	7c45c83a 	sub	r2,r15,r17
    9ed8:	7889803a 	cmpltu	r4,r15,r2
    9edc:	8487c83a 	sub	r3,r16,r18
    9ee0:	1909c83a 	sub	r4,r3,r4
    9ee4:	100d883a 	mov	r6,r2
    9ee8:	200f883a 	mov	r7,r4
    9eec:	38007716 	blt	r7,zero,a0cc <_fpadd_parts+0x2f0>
    9ef0:	a5c00215 	stw	r23,8(r20)
    9ef4:	a1c00415 	stw	r7,16(r20)
    9ef8:	a0000115 	stw	zero,4(r20)
    9efc:	a1800315 	stw	r6,12(r20)
    9f00:	a2000317 	ldw	r8,12(r20)
    9f04:	a2400417 	ldw	r9,16(r20)
    9f08:	00bfffc4 	movi	r2,-1
    9f0c:	408b883a 	add	r5,r8,r2
    9f10:	2a09803a 	cmpltu	r4,r5,r8
    9f14:	488d883a 	add	r6,r9,r2
    9f18:	01c40034 	movhi	r7,4096
    9f1c:	39ffffc4 	addi	r7,r7,-1
    9f20:	218d883a 	add	r6,r4,r6
    9f24:	39801736 	bltu	r7,r6,9f84 <_fpadd_parts+0x1a8>
    9f28:	31c06526 	beq	r6,r7,a0c0 <_fpadd_parts+0x2e4>
    9f2c:	a3000217 	ldw	r12,8(r20)
    9f30:	4209883a 	add	r4,r8,r8
    9f34:	00bfffc4 	movi	r2,-1
    9f38:	220f803a 	cmpltu	r7,r4,r8
    9f3c:	4a4b883a 	add	r5,r9,r9
    9f40:	394f883a 	add	r7,r7,r5
    9f44:	2095883a 	add	r10,r4,r2
    9f48:	3897883a 	add	r11,r7,r2
    9f4c:	510d803a 	cmpltu	r6,r10,r4
    9f50:	6099883a 	add	r12,r12,r2
    9f54:	32d7883a 	add	r11,r6,r11
    9f58:	00840034 	movhi	r2,4096
    9f5c:	10bfffc4 	addi	r2,r2,-1
    9f60:	2011883a 	mov	r8,r4
    9f64:	3813883a 	mov	r9,r7
    9f68:	a1000315 	stw	r4,12(r20)
    9f6c:	a1c00415 	stw	r7,16(r20)
    9f70:	a3000215 	stw	r12,8(r20)
    9f74:	12c00336 	bltu	r2,r11,9f84 <_fpadd_parts+0x1a8>
    9f78:	58bfed1e 	bne	r11,r2,9f30 <_fpadd_parts+0x154>
    9f7c:	00bfff84 	movi	r2,-2
    9f80:	12bfeb2e 	bgeu	r2,r10,9f30 <_fpadd_parts+0x154>
    9f84:	a2800417 	ldw	r10,16(r20)
    9f88:	008000c4 	movi	r2,3
    9f8c:	00c80034 	movhi	r3,8192
    9f90:	18ffffc4 	addi	r3,r3,-1
    9f94:	a2400317 	ldw	r9,12(r20)
    9f98:	a0800015 	stw	r2,0(r20)
    9f9c:	1a802336 	bltu	r3,r10,a02c <_fpadd_parts+0x250>
    9fa0:	a027883a 	mov	r19,r20
    9fa4:	9805883a 	mov	r2,r19
    9fa8:	ddc00717 	ldw	r23,28(sp)
    9fac:	dd800617 	ldw	r22,24(sp)
    9fb0:	dd400517 	ldw	r21,20(sp)
    9fb4:	dd000417 	ldw	r20,16(sp)
    9fb8:	dcc00317 	ldw	r19,12(sp)
    9fbc:	dc800217 	ldw	r18,8(sp)
    9fc0:	dc400117 	ldw	r17,4(sp)
    9fc4:	dc000017 	ldw	r16,0(sp)
    9fc8:	dec00804 	addi	sp,sp,32
    9fcc:	f800283a 	ret
    9fd0:	20fff41e 	bne	r4,r3,9fa4 <_fpadd_parts+0x1c8>
    9fd4:	31000015 	stw	r4,0(r6)
    9fd8:	98800117 	ldw	r2,4(r19)
    9fdc:	30800115 	stw	r2,4(r6)
    9fe0:	98c00217 	ldw	r3,8(r19)
    9fe4:	30c00215 	stw	r3,8(r6)
    9fe8:	98800317 	ldw	r2,12(r19)
    9fec:	30800315 	stw	r2,12(r6)
    9ff0:	98c00417 	ldw	r3,16(r19)
    9ff4:	30c00415 	stw	r3,16(r6)
    9ff8:	98800117 	ldw	r2,4(r19)
    9ffc:	28c00117 	ldw	r3,4(r5)
    a000:	3027883a 	mov	r19,r6
    a004:	10c4703a 	and	r2,r2,r3
    a008:	30800115 	stw	r2,4(r6)
    a00c:	003fe506 	br	9fa4 <_fpadd_parts+0x1c8>
    a010:	1dc02616 	blt	r3,r23,a0ac <_fpadd_parts+0x2d0>
    a014:	0023883a 	mov	r17,zero
    a018:	182f883a 	mov	r23,r3
    a01c:	0025883a 	mov	r18,zero
    a020:	003fa806 	br	9ec4 <_fpadd_parts+0xe8>
    a024:	a827883a 	mov	r19,r21
    a028:	003fde06 	br	9fa4 <_fpadd_parts+0x1c8>
    a02c:	01800044 	movi	r6,1
    a030:	500497fa 	slli	r2,r10,31
    a034:	4808d07a 	srli	r4,r9,1
    a038:	518ad83a 	srl	r5,r10,r6
    a03c:	a2000217 	ldw	r8,8(r20)
    a040:	1108b03a 	or	r4,r2,r4
    a044:	0007883a 	mov	r3,zero
    a048:	4984703a 	and	r2,r9,r6
    a04c:	208cb03a 	or	r6,r4,r2
    a050:	28ceb03a 	or	r7,r5,r3
    a054:	42000044 	addi	r8,r8,1
    a058:	a027883a 	mov	r19,r20
    a05c:	a1c00415 	stw	r7,16(r20)
    a060:	a2000215 	stw	r8,8(r20)
    a064:	a1800315 	stw	r6,12(r20)
    a068:	003fce06 	br	9fa4 <_fpadd_parts+0x1c8>
    a06c:	8bc5c83a 	sub	r2,r17,r15
    a070:	8889803a 	cmpltu	r4,r17,r2
    a074:	9407c83a 	sub	r3,r18,r16
    a078:	1909c83a 	sub	r4,r3,r4
    a07c:	100d883a 	mov	r6,r2
    a080:	200f883a 	mov	r7,r4
    a084:	003f9906 	br	9eec <_fpadd_parts+0x110>
    a088:	7c45883a 	add	r2,r15,r17
    a08c:	13c9803a 	cmpltu	r4,r2,r15
    a090:	8487883a 	add	r3,r16,r18
    a094:	20c9883a 	add	r4,r4,r3
    a098:	a1400115 	stw	r5,4(r20)
    a09c:	a5c00215 	stw	r23,8(r20)
    a0a0:	a0800315 	stw	r2,12(r20)
    a0a4:	a1000415 	stw	r4,16(r20)
    a0a8:	003fb606 	br	9f84 <_fpadd_parts+0x1a8>
    a0ac:	001f883a 	mov	r15,zero
    a0b0:	0021883a 	mov	r16,zero
    a0b4:	003f8306 	br	9ec4 <_fpadd_parts+0xe8>
    a0b8:	018dc83a 	sub	r6,zero,r6
    a0bc:	003f6706 	br	9e5c <_fpadd_parts+0x80>
    a0c0:	00bfff84 	movi	r2,-2
    a0c4:	117faf36 	bltu	r2,r5,9f84 <_fpadd_parts+0x1a8>
    a0c8:	003f9806 	br	9f2c <_fpadd_parts+0x150>
    a0cc:	0005883a 	mov	r2,zero
    a0d0:	1189c83a 	sub	r4,r2,r6
    a0d4:	1105803a 	cmpltu	r2,r2,r4
    a0d8:	01cbc83a 	sub	r5,zero,r7
    a0dc:	2885c83a 	sub	r2,r5,r2
    a0e0:	01800044 	movi	r6,1
    a0e4:	a1800115 	stw	r6,4(r20)
    a0e8:	a5c00215 	stw	r23,8(r20)
    a0ec:	a1000315 	stw	r4,12(r20)
    a0f0:	a0800415 	stw	r2,16(r20)
    a0f4:	003f8206 	br	9f00 <_fpadd_parts+0x124>
    a0f8:	203f7226 	beq	r4,zero,9ec4 <_fpadd_parts+0xe8>
    a0fc:	35bff804 	addi	r22,r6,-32
    a100:	b9af883a 	add	r23,r23,r6
    a104:	b0003116 	blt	r22,zero,a1cc <_fpadd_parts+0x3f0>
    a108:	959ad83a 	srl	r13,r18,r22
    a10c:	001d883a 	mov	r14,zero
    a110:	000f883a 	mov	r7,zero
    a114:	01000044 	movi	r4,1
    a118:	0011883a 	mov	r8,zero
    a11c:	b0002516 	blt	r22,zero,a1b4 <_fpadd_parts+0x3d8>
    a120:	2594983a 	sll	r10,r4,r22
    a124:	0013883a 	mov	r9,zero
    a128:	00bfffc4 	movi	r2,-1
    a12c:	4889883a 	add	r4,r9,r2
    a130:	508b883a 	add	r5,r10,r2
    a134:	224d803a 	cmpltu	r6,r4,r9
    a138:	314b883a 	add	r5,r6,r5
    a13c:	8904703a 	and	r2,r17,r4
    a140:	9146703a 	and	r3,r18,r5
    a144:	10c4b03a 	or	r2,r2,r3
    a148:	10000226 	beq	r2,zero,a154 <_fpadd_parts+0x378>
    a14c:	01c00044 	movi	r7,1
    a150:	0011883a 	mov	r8,zero
    a154:	69e2b03a 	or	r17,r13,r7
    a158:	7224b03a 	or	r18,r14,r8
    a15c:	003f5906 	br	9ec4 <_fpadd_parts+0xe8>
    a160:	8407883a 	add	r3,r16,r16
    a164:	008007c4 	movi	r2,31
    a168:	1185c83a 	sub	r2,r2,r6
    a16c:	1886983a 	sll	r3,r3,r2
    a170:	7996d83a 	srl	r11,r15,r6
    a174:	8198d83a 	srl	r12,r16,r6
    a178:	1ad6b03a 	or	r11,r3,r11
    a17c:	003f3e06 	br	9e78 <_fpadd_parts+0x9c>
    a180:	2006d07a 	srli	r3,r4,1
    a184:	008007c4 	movi	r2,31
    a188:	1185c83a 	sub	r2,r2,r6
    a18c:	1890d83a 	srl	r8,r3,r2
    a190:	218e983a 	sll	r7,r4,r6
    a194:	003f3e06 	br	9e90 <_fpadd_parts+0xb4>
    a198:	113f821e 	bne	r2,r4,9fa4 <_fpadd_parts+0x1c8>
    a19c:	28c00117 	ldw	r3,4(r5)
    a1a0:	98800117 	ldw	r2,4(r19)
    a1a4:	10ff7f26 	beq	r2,r3,9fa4 <_fpadd_parts+0x1c8>
    a1a8:	04c00074 	movhi	r19,1
    a1ac:	9cf8f904 	addi	r19,r19,-7196
    a1b0:	003f7c06 	br	9fa4 <_fpadd_parts+0x1c8>
    a1b4:	2006d07a 	srli	r3,r4,1
    a1b8:	008007c4 	movi	r2,31
    a1bc:	1185c83a 	sub	r2,r2,r6
    a1c0:	1894d83a 	srl	r10,r3,r2
    a1c4:	2192983a 	sll	r9,r4,r6
    a1c8:	003fd706 	br	a128 <_fpadd_parts+0x34c>
    a1cc:	9487883a 	add	r3,r18,r18
    a1d0:	008007c4 	movi	r2,31
    a1d4:	1185c83a 	sub	r2,r2,r6
    a1d8:	1886983a 	sll	r3,r3,r2
    a1dc:	899ad83a 	srl	r13,r17,r6
    a1e0:	919cd83a 	srl	r14,r18,r6
    a1e4:	1b5ab03a 	or	r13,r3,r13
    a1e8:	003fc906 	br	a110 <_fpadd_parts+0x334>

0000a1ec <__subdf3>:
    a1ec:	deffea04 	addi	sp,sp,-88
    a1f0:	dcc01415 	stw	r19,80(sp)
    a1f4:	dcc00404 	addi	r19,sp,16
    a1f8:	2011883a 	mov	r8,r4
    a1fc:	2813883a 	mov	r9,r5
    a200:	dc401315 	stw	r17,76(sp)
    a204:	d809883a 	mov	r4,sp
    a208:	980b883a 	mov	r5,r19
    a20c:	dc400904 	addi	r17,sp,36
    a210:	dfc01515 	stw	ra,84(sp)
    a214:	da400115 	stw	r9,4(sp)
    a218:	d9c00315 	stw	r7,12(sp)
    a21c:	da000015 	stw	r8,0(sp)
    a220:	d9800215 	stw	r6,8(sp)
    a224:	000b3c00 	call	b3c0 <__unpack_d>
    a228:	d9000204 	addi	r4,sp,8
    a22c:	880b883a 	mov	r5,r17
    a230:	000b3c00 	call	b3c0 <__unpack_d>
    a234:	d8800a17 	ldw	r2,40(sp)
    a238:	880b883a 	mov	r5,r17
    a23c:	9809883a 	mov	r4,r19
    a240:	d9800e04 	addi	r6,sp,56
    a244:	1080005c 	xori	r2,r2,1
    a248:	d8800a15 	stw	r2,40(sp)
    a24c:	0009ddc0 	call	9ddc <_fpadd_parts>
    a250:	1009883a 	mov	r4,r2
    a254:	000b0ac0 	call	b0ac <__pack_d>
    a258:	dfc01517 	ldw	ra,84(sp)
    a25c:	dcc01417 	ldw	r19,80(sp)
    a260:	dc401317 	ldw	r17,76(sp)
    a264:	dec01604 	addi	sp,sp,88
    a268:	f800283a 	ret

0000a26c <__adddf3>:
    a26c:	deffea04 	addi	sp,sp,-88
    a270:	dcc01415 	stw	r19,80(sp)
    a274:	dcc00404 	addi	r19,sp,16
    a278:	2011883a 	mov	r8,r4
    a27c:	2813883a 	mov	r9,r5
    a280:	dc401315 	stw	r17,76(sp)
    a284:	d809883a 	mov	r4,sp
    a288:	980b883a 	mov	r5,r19
    a28c:	dc400904 	addi	r17,sp,36
    a290:	dfc01515 	stw	ra,84(sp)
    a294:	da400115 	stw	r9,4(sp)
    a298:	d9c00315 	stw	r7,12(sp)
    a29c:	da000015 	stw	r8,0(sp)
    a2a0:	d9800215 	stw	r6,8(sp)
    a2a4:	000b3c00 	call	b3c0 <__unpack_d>
    a2a8:	d9000204 	addi	r4,sp,8
    a2ac:	880b883a 	mov	r5,r17
    a2b0:	000b3c00 	call	b3c0 <__unpack_d>
    a2b4:	d9800e04 	addi	r6,sp,56
    a2b8:	9809883a 	mov	r4,r19
    a2bc:	880b883a 	mov	r5,r17
    a2c0:	0009ddc0 	call	9ddc <_fpadd_parts>
    a2c4:	1009883a 	mov	r4,r2
    a2c8:	000b0ac0 	call	b0ac <__pack_d>
    a2cc:	dfc01517 	ldw	ra,84(sp)
    a2d0:	dcc01417 	ldw	r19,80(sp)
    a2d4:	dc401317 	ldw	r17,76(sp)
    a2d8:	dec01604 	addi	sp,sp,88
    a2dc:	f800283a 	ret

0000a2e0 <__muldf3>:
    a2e0:	deffe004 	addi	sp,sp,-128
    a2e4:	dc401815 	stw	r17,96(sp)
    a2e8:	dc400404 	addi	r17,sp,16
    a2ec:	2011883a 	mov	r8,r4
    a2f0:	2813883a 	mov	r9,r5
    a2f4:	dc001715 	stw	r16,92(sp)
    a2f8:	d809883a 	mov	r4,sp
    a2fc:	880b883a 	mov	r5,r17
    a300:	dc000904 	addi	r16,sp,36
    a304:	dfc01f15 	stw	ra,124(sp)
    a308:	da400115 	stw	r9,4(sp)
    a30c:	d9c00315 	stw	r7,12(sp)
    a310:	da000015 	stw	r8,0(sp)
    a314:	d9800215 	stw	r6,8(sp)
    a318:	ddc01e15 	stw	r23,120(sp)
    a31c:	dd801d15 	stw	r22,116(sp)
    a320:	dd401c15 	stw	r21,112(sp)
    a324:	dd001b15 	stw	r20,108(sp)
    a328:	dcc01a15 	stw	r19,104(sp)
    a32c:	dc801915 	stw	r18,100(sp)
    a330:	000b3c00 	call	b3c0 <__unpack_d>
    a334:	d9000204 	addi	r4,sp,8
    a338:	800b883a 	mov	r5,r16
    a33c:	000b3c00 	call	b3c0 <__unpack_d>
    a340:	d9000417 	ldw	r4,16(sp)
    a344:	00800044 	movi	r2,1
    a348:	1100102e 	bgeu	r2,r4,a38c <__muldf3+0xac>
    a34c:	d8c00917 	ldw	r3,36(sp)
    a350:	10c0062e 	bgeu	r2,r3,a36c <__muldf3+0x8c>
    a354:	00800104 	movi	r2,4
    a358:	20800a26 	beq	r4,r2,a384 <__muldf3+0xa4>
    a35c:	1880cc26 	beq	r3,r2,a690 <__muldf3+0x3b0>
    a360:	00800084 	movi	r2,2
    a364:	20800926 	beq	r4,r2,a38c <__muldf3+0xac>
    a368:	1880191e 	bne	r3,r2,a3d0 <__muldf3+0xf0>
    a36c:	d8c00a17 	ldw	r3,40(sp)
    a370:	d8800517 	ldw	r2,20(sp)
    a374:	8009883a 	mov	r4,r16
    a378:	10c4c03a 	cmpne	r2,r2,r3
    a37c:	d8800a15 	stw	r2,40(sp)
    a380:	00000706 	br	a3a0 <__muldf3+0xc0>
    a384:	00800084 	movi	r2,2
    a388:	1880c326 	beq	r3,r2,a698 <__muldf3+0x3b8>
    a38c:	d8800517 	ldw	r2,20(sp)
    a390:	d8c00a17 	ldw	r3,40(sp)
    a394:	8809883a 	mov	r4,r17
    a398:	10c4c03a 	cmpne	r2,r2,r3
    a39c:	d8800515 	stw	r2,20(sp)
    a3a0:	000b0ac0 	call	b0ac <__pack_d>
    a3a4:	dfc01f17 	ldw	ra,124(sp)
    a3a8:	ddc01e17 	ldw	r23,120(sp)
    a3ac:	dd801d17 	ldw	r22,116(sp)
    a3b0:	dd401c17 	ldw	r21,112(sp)
    a3b4:	dd001b17 	ldw	r20,108(sp)
    a3b8:	dcc01a17 	ldw	r19,104(sp)
    a3bc:	dc801917 	ldw	r18,100(sp)
    a3c0:	dc401817 	ldw	r17,96(sp)
    a3c4:	dc001717 	ldw	r16,92(sp)
    a3c8:	dec02004 	addi	sp,sp,128
    a3cc:	f800283a 	ret
    a3d0:	dd800717 	ldw	r22,28(sp)
    a3d4:	dc800c17 	ldw	r18,48(sp)
    a3d8:	002b883a 	mov	r21,zero
    a3dc:	0023883a 	mov	r17,zero
    a3e0:	a80b883a 	mov	r5,r21
    a3e4:	b00d883a 	mov	r6,r22
    a3e8:	880f883a 	mov	r7,r17
    a3ec:	ddc00817 	ldw	r23,32(sp)
    a3f0:	dcc00d17 	ldw	r19,52(sp)
    a3f4:	9009883a 	mov	r4,r18
    a3f8:	000af080 	call	af08 <__muldi3>
    a3fc:	001b883a 	mov	r13,zero
    a400:	680f883a 	mov	r7,r13
    a404:	b009883a 	mov	r4,r22
    a408:	000b883a 	mov	r5,zero
    a40c:	980d883a 	mov	r6,r19
    a410:	b82d883a 	mov	r22,r23
    a414:	002f883a 	mov	r23,zero
    a418:	db401615 	stw	r13,88(sp)
    a41c:	d8801315 	stw	r2,76(sp)
    a420:	d8c01415 	stw	r3,80(sp)
    a424:	dcc01515 	stw	r19,84(sp)
    a428:	000af080 	call	af08 <__muldi3>
    a42c:	b00d883a 	mov	r6,r22
    a430:	000b883a 	mov	r5,zero
    a434:	9009883a 	mov	r4,r18
    a438:	b80f883a 	mov	r7,r23
    a43c:	1021883a 	mov	r16,r2
    a440:	1823883a 	mov	r17,r3
    a444:	000af080 	call	af08 <__muldi3>
    a448:	8085883a 	add	r2,r16,r2
    a44c:	140d803a 	cmpltu	r6,r2,r16
    a450:	88c7883a 	add	r3,r17,r3
    a454:	30cd883a 	add	r6,r6,r3
    a458:	1029883a 	mov	r20,r2
    a45c:	302b883a 	mov	r21,r6
    a460:	da801317 	ldw	r10,76(sp)
    a464:	dac01417 	ldw	r11,80(sp)
    a468:	db001517 	ldw	r12,84(sp)
    a46c:	db401617 	ldw	r13,88(sp)
    a470:	3440612e 	bgeu	r6,r17,a5f8 <__muldf3+0x318>
    a474:	0009883a 	mov	r4,zero
    a478:	5105883a 	add	r2,r10,r4
    a47c:	128d803a 	cmpltu	r6,r2,r10
    a480:	5d07883a 	add	r3,r11,r20
    a484:	30cd883a 	add	r6,r6,r3
    a488:	0021883a 	mov	r16,zero
    a48c:	04400044 	movi	r17,1
    a490:	1025883a 	mov	r18,r2
    a494:	3027883a 	mov	r19,r6
    a498:	32c06236 	bltu	r6,r11,a624 <__muldf3+0x344>
    a49c:	59807a26 	beq	r11,r6,a688 <__muldf3+0x3a8>
    a4a0:	680b883a 	mov	r5,r13
    a4a4:	b80f883a 	mov	r7,r23
    a4a8:	6009883a 	mov	r4,r12
    a4ac:	b00d883a 	mov	r6,r22
    a4b0:	000af080 	call	af08 <__muldi3>
    a4b4:	1009883a 	mov	r4,r2
    a4b8:	000f883a 	mov	r7,zero
    a4bc:	1545883a 	add	r2,r2,r21
    a4c0:	1111803a 	cmpltu	r8,r2,r4
    a4c4:	19c7883a 	add	r3,r3,r7
    a4c8:	40c7883a 	add	r3,r8,r3
    a4cc:	88cb883a 	add	r5,r17,r3
    a4d0:	d8c00617 	ldw	r3,24(sp)
    a4d4:	8089883a 	add	r4,r16,r2
    a4d8:	d8800b17 	ldw	r2,44(sp)
    a4dc:	18c00104 	addi	r3,r3,4
    a4e0:	240d803a 	cmpltu	r6,r4,r16
    a4e4:	10c7883a 	add	r3,r2,r3
    a4e8:	2013883a 	mov	r9,r4
    a4ec:	d8800a17 	ldw	r2,40(sp)
    a4f0:	d9000517 	ldw	r4,20(sp)
    a4f4:	314d883a 	add	r6,r6,r5
    a4f8:	3015883a 	mov	r10,r6
    a4fc:	2088c03a 	cmpne	r4,r4,r2
    a500:	00880034 	movhi	r2,8192
    a504:	10bfffc4 	addi	r2,r2,-1
    a508:	d9000f15 	stw	r4,60(sp)
    a50c:	d8c01015 	stw	r3,64(sp)
    a510:	1180162e 	bgeu	r2,r6,a56c <__muldf3+0x28c>
    a514:	1811883a 	mov	r8,r3
    a518:	101f883a 	mov	r15,r2
    a51c:	980497fa 	slli	r2,r19,31
    a520:	9016d07a 	srli	r11,r18,1
    a524:	500697fa 	slli	r3,r10,31
    a528:	480cd07a 	srli	r6,r9,1
    a52c:	500ed07a 	srli	r7,r10,1
    a530:	12d6b03a 	or	r11,r2,r11
    a534:	00800044 	movi	r2,1
    a538:	198cb03a 	or	r6,r3,r6
    a53c:	4888703a 	and	r4,r9,r2
    a540:	9818d07a 	srli	r12,r19,1
    a544:	001b883a 	mov	r13,zero
    a548:	03a00034 	movhi	r14,32768
    a54c:	3013883a 	mov	r9,r6
    a550:	3815883a 	mov	r10,r7
    a554:	4091883a 	add	r8,r8,r2
    a558:	20000226 	beq	r4,zero,a564 <__muldf3+0x284>
    a55c:	5b64b03a 	or	r18,r11,r13
    a560:	63a6b03a 	or	r19,r12,r14
    a564:	7abfed36 	bltu	r15,r10,a51c <__muldf3+0x23c>
    a568:	da001015 	stw	r8,64(sp)
    a56c:	00840034 	movhi	r2,4096
    a570:	10bfffc4 	addi	r2,r2,-1
    a574:	12801436 	bltu	r2,r10,a5c8 <__muldf3+0x2e8>
    a578:	da001017 	ldw	r8,64(sp)
    a57c:	101f883a 	mov	r15,r2
    a580:	4a45883a 	add	r2,r9,r9
    a584:	124d803a 	cmpltu	r6,r2,r9
    a588:	5287883a 	add	r3,r10,r10
    a58c:	9497883a 	add	r11,r18,r18
    a590:	5c8f803a 	cmpltu	r7,r11,r18
    a594:	9cd9883a 	add	r12,r19,r19
    a598:	01000044 	movi	r4,1
    a59c:	30cd883a 	add	r6,r6,r3
    a5a0:	3b0f883a 	add	r7,r7,r12
    a5a4:	423fffc4 	addi	r8,r8,-1
    a5a8:	1013883a 	mov	r9,r2
    a5ac:	3015883a 	mov	r10,r6
    a5b0:	111ab03a 	or	r13,r2,r4
    a5b4:	98003016 	blt	r19,zero,a678 <__muldf3+0x398>
    a5b8:	5825883a 	mov	r18,r11
    a5bc:	3827883a 	mov	r19,r7
    a5c0:	7abfef2e 	bgeu	r15,r10,a580 <__muldf3+0x2a0>
    a5c4:	da001015 	stw	r8,64(sp)
    a5c8:	00803fc4 	movi	r2,255
    a5cc:	488e703a 	and	r7,r9,r2
    a5d0:	00802004 	movi	r2,128
    a5d4:	0007883a 	mov	r3,zero
    a5d8:	0011883a 	mov	r8,zero
    a5dc:	38801826 	beq	r7,r2,a640 <__muldf3+0x360>
    a5e0:	008000c4 	movi	r2,3
    a5e4:	d9000e04 	addi	r4,sp,56
    a5e8:	da801215 	stw	r10,72(sp)
    a5ec:	d8800e15 	stw	r2,56(sp)
    a5f0:	da401115 	stw	r9,68(sp)
    a5f4:	003f6a06 	br	a3a0 <__muldf3+0xc0>
    a5f8:	89802126 	beq	r17,r6,a680 <__muldf3+0x3a0>
    a5fc:	0009883a 	mov	r4,zero
    a600:	5105883a 	add	r2,r10,r4
    a604:	128d803a 	cmpltu	r6,r2,r10
    a608:	5d07883a 	add	r3,r11,r20
    a60c:	30cd883a 	add	r6,r6,r3
    a610:	0021883a 	mov	r16,zero
    a614:	0023883a 	mov	r17,zero
    a618:	1025883a 	mov	r18,r2
    a61c:	3027883a 	mov	r19,r6
    a620:	32ff9e2e 	bgeu	r6,r11,a49c <__muldf3+0x1bc>
    a624:	00800044 	movi	r2,1
    a628:	8089883a 	add	r4,r16,r2
    a62c:	240d803a 	cmpltu	r6,r4,r16
    a630:	344d883a 	add	r6,r6,r17
    a634:	2021883a 	mov	r16,r4
    a638:	3023883a 	mov	r17,r6
    a63c:	003f9806 	br	a4a0 <__muldf3+0x1c0>
    a640:	403fe71e 	bne	r8,zero,a5e0 <__muldf3+0x300>
    a644:	01004004 	movi	r4,256
    a648:	4904703a 	and	r2,r9,r4
    a64c:	10c4b03a 	or	r2,r2,r3
    a650:	103fe31e 	bne	r2,zero,a5e0 <__muldf3+0x300>
    a654:	94c4b03a 	or	r2,r18,r19
    a658:	103fe126 	beq	r2,zero,a5e0 <__muldf3+0x300>
    a65c:	49c5883a 	add	r2,r9,r7
    a660:	1251803a 	cmpltu	r8,r2,r9
    a664:	4291883a 	add	r8,r8,r10
    a668:	013fc004 	movi	r4,-256
    a66c:	1112703a 	and	r9,r2,r4
    a670:	4015883a 	mov	r10,r8
    a674:	003fda06 	br	a5e0 <__muldf3+0x300>
    a678:	6813883a 	mov	r9,r13
    a67c:	003fce06 	br	a5b8 <__muldf3+0x2d8>
    a680:	143f7c36 	bltu	r2,r16,a474 <__muldf3+0x194>
    a684:	003fdd06 	br	a5fc <__muldf3+0x31c>
    a688:	12bf852e 	bgeu	r2,r10,a4a0 <__muldf3+0x1c0>
    a68c:	003fe506 	br	a624 <__muldf3+0x344>
    a690:	00800084 	movi	r2,2
    a694:	20bf351e 	bne	r4,r2,a36c <__muldf3+0x8c>
    a698:	01000074 	movhi	r4,1
    a69c:	2138f904 	addi	r4,r4,-7196
    a6a0:	003f3f06 	br	a3a0 <__muldf3+0xc0>

0000a6a4 <__divdf3>:
    a6a4:	deffed04 	addi	sp,sp,-76
    a6a8:	dcc01115 	stw	r19,68(sp)
    a6ac:	dcc00404 	addi	r19,sp,16
    a6b0:	2011883a 	mov	r8,r4
    a6b4:	2813883a 	mov	r9,r5
    a6b8:	dc000e15 	stw	r16,56(sp)
    a6bc:	d809883a 	mov	r4,sp
    a6c0:	980b883a 	mov	r5,r19
    a6c4:	dc000904 	addi	r16,sp,36
    a6c8:	dfc01215 	stw	ra,72(sp)
    a6cc:	da400115 	stw	r9,4(sp)
    a6d0:	d9c00315 	stw	r7,12(sp)
    a6d4:	da000015 	stw	r8,0(sp)
    a6d8:	d9800215 	stw	r6,8(sp)
    a6dc:	dc801015 	stw	r18,64(sp)
    a6e0:	dc400f15 	stw	r17,60(sp)
    a6e4:	000b3c00 	call	b3c0 <__unpack_d>
    a6e8:	d9000204 	addi	r4,sp,8
    a6ec:	800b883a 	mov	r5,r16
    a6f0:	000b3c00 	call	b3c0 <__unpack_d>
    a6f4:	d9000417 	ldw	r4,16(sp)
    a6f8:	00800044 	movi	r2,1
    a6fc:	11000b2e 	bgeu	r2,r4,a72c <__divdf3+0x88>
    a700:	d9400917 	ldw	r5,36(sp)
    a704:	1140762e 	bgeu	r2,r5,a8e0 <__divdf3+0x23c>
    a708:	d8800517 	ldw	r2,20(sp)
    a70c:	d8c00a17 	ldw	r3,40(sp)
    a710:	01800104 	movi	r6,4
    a714:	10c4f03a 	xor	r2,r2,r3
    a718:	d8800515 	stw	r2,20(sp)
    a71c:	21800226 	beq	r4,r6,a728 <__divdf3+0x84>
    a720:	00800084 	movi	r2,2
    a724:	2080141e 	bne	r4,r2,a778 <__divdf3+0xd4>
    a728:	29000926 	beq	r5,r4,a750 <__divdf3+0xac>
    a72c:	9809883a 	mov	r4,r19
    a730:	000b0ac0 	call	b0ac <__pack_d>
    a734:	dfc01217 	ldw	ra,72(sp)
    a738:	dcc01117 	ldw	r19,68(sp)
    a73c:	dc801017 	ldw	r18,64(sp)
    a740:	dc400f17 	ldw	r17,60(sp)
    a744:	dc000e17 	ldw	r16,56(sp)
    a748:	dec01304 	addi	sp,sp,76
    a74c:	f800283a 	ret
    a750:	01000074 	movhi	r4,1
    a754:	2138f904 	addi	r4,r4,-7196
    a758:	000b0ac0 	call	b0ac <__pack_d>
    a75c:	dfc01217 	ldw	ra,72(sp)
    a760:	dcc01117 	ldw	r19,68(sp)
    a764:	dc801017 	ldw	r18,64(sp)
    a768:	dc400f17 	ldw	r17,60(sp)
    a76c:	dc000e17 	ldw	r16,56(sp)
    a770:	dec01304 	addi	sp,sp,76
    a774:	f800283a 	ret
    a778:	29805b26 	beq	r5,r6,a8e8 <__divdf3+0x244>
    a77c:	28802d26 	beq	r5,r2,a834 <__divdf3+0x190>
    a780:	d8c00617 	ldw	r3,24(sp)
    a784:	d8800b17 	ldw	r2,44(sp)
    a788:	d9c00817 	ldw	r7,32(sp)
    a78c:	dc400d17 	ldw	r17,52(sp)
    a790:	188bc83a 	sub	r5,r3,r2
    a794:	d9800717 	ldw	r6,28(sp)
    a798:	dc000c17 	ldw	r16,48(sp)
    a79c:	d9400615 	stw	r5,24(sp)
    a7a0:	3c403836 	bltu	r7,r17,a884 <__divdf3+0x1e0>
    a7a4:	89c03626 	beq	r17,r7,a880 <__divdf3+0x1dc>
    a7a8:	0015883a 	mov	r10,zero
    a7ac:	001d883a 	mov	r14,zero
    a7b0:	02c40034 	movhi	r11,4096
    a7b4:	001f883a 	mov	r15,zero
    a7b8:	003f883a 	mov	ra,zero
    a7bc:	04800f44 	movi	r18,61
    a7c0:	00000f06 	br	a800 <__divdf3+0x15c>
    a7c4:	601d883a 	mov	r14,r12
    a7c8:	681f883a 	mov	r15,r13
    a7cc:	400d883a 	mov	r6,r8
    a7d0:	100f883a 	mov	r7,r2
    a7d4:	3191883a 	add	r8,r6,r6
    a7d8:	5808d07a 	srli	r4,r11,1
    a7dc:	4185803a 	cmpltu	r2,r8,r6
    a7e0:	39d3883a 	add	r9,r7,r7
    a7e4:	28c6b03a 	or	r3,r5,r3
    a7e8:	1245883a 	add	r2,r2,r9
    a7ec:	1815883a 	mov	r10,r3
    a7f0:	2017883a 	mov	r11,r4
    a7f4:	400d883a 	mov	r6,r8
    a7f8:	100f883a 	mov	r7,r2
    a7fc:	fc801726 	beq	ra,r18,a85c <__divdf3+0x1b8>
    a800:	580a97fa 	slli	r5,r11,31
    a804:	5006d07a 	srli	r3,r10,1
    a808:	ffc00044 	addi	ra,ra,1
    a80c:	3c7ff136 	bltu	r7,r17,a7d4 <__divdf3+0x130>
    a810:	3411c83a 	sub	r8,r6,r16
    a814:	3205803a 	cmpltu	r2,r6,r8
    a818:	3c53c83a 	sub	r9,r7,r17
    a81c:	7298b03a 	or	r12,r14,r10
    a820:	7adab03a 	or	r13,r15,r11
    a824:	4885c83a 	sub	r2,r9,r2
    a828:	89ffe61e 	bne	r17,r7,a7c4 <__divdf3+0x120>
    a82c:	343fe936 	bltu	r6,r16,a7d4 <__divdf3+0x130>
    a830:	003fe406 	br	a7c4 <__divdf3+0x120>
    a834:	9809883a 	mov	r4,r19
    a838:	d9800415 	stw	r6,16(sp)
    a83c:	000b0ac0 	call	b0ac <__pack_d>
    a840:	dfc01217 	ldw	ra,72(sp)
    a844:	dcc01117 	ldw	r19,68(sp)
    a848:	dc801017 	ldw	r18,64(sp)
    a84c:	dc400f17 	ldw	r17,60(sp)
    a850:	dc000e17 	ldw	r16,56(sp)
    a854:	dec01304 	addi	sp,sp,76
    a858:	f800283a 	ret
    a85c:	00803fc4 	movi	r2,255
    a860:	7090703a 	and	r8,r14,r2
    a864:	00802004 	movi	r2,128
    a868:	0007883a 	mov	r3,zero
    a86c:	0013883a 	mov	r9,zero
    a870:	40800d26 	beq	r8,r2,a8a8 <__divdf3+0x204>
    a874:	dbc00815 	stw	r15,32(sp)
    a878:	db800715 	stw	r14,28(sp)
    a87c:	003fab06 	br	a72c <__divdf3+0x88>
    a880:	343fc92e 	bgeu	r6,r16,a7a8 <__divdf3+0x104>
    a884:	3185883a 	add	r2,r6,r6
    a888:	1189803a 	cmpltu	r4,r2,r6
    a88c:	39c7883a 	add	r3,r7,r7
    a890:	20c9883a 	add	r4,r4,r3
    a894:	297fffc4 	addi	r5,r5,-1
    a898:	100d883a 	mov	r6,r2
    a89c:	200f883a 	mov	r7,r4
    a8a0:	d9400615 	stw	r5,24(sp)
    a8a4:	003fc006 	br	a7a8 <__divdf3+0x104>
    a8a8:	483ff21e 	bne	r9,zero,a874 <__divdf3+0x1d0>
    a8ac:	01004004 	movi	r4,256
    a8b0:	7104703a 	and	r2,r14,r4
    a8b4:	10c4b03a 	or	r2,r2,r3
    a8b8:	103fee1e 	bne	r2,zero,a874 <__divdf3+0x1d0>
    a8bc:	31c4b03a 	or	r2,r6,r7
    a8c0:	103fec26 	beq	r2,zero,a874 <__divdf3+0x1d0>
    a8c4:	7205883a 	add	r2,r14,r8
    a8c8:	1391803a 	cmpltu	r8,r2,r14
    a8cc:	43d1883a 	add	r8,r8,r15
    a8d0:	013fc004 	movi	r4,-256
    a8d4:	111c703a 	and	r14,r2,r4
    a8d8:	401f883a 	mov	r15,r8
    a8dc:	003fe506 	br	a874 <__divdf3+0x1d0>
    a8e0:	8009883a 	mov	r4,r16
    a8e4:	003f9206 	br	a730 <__divdf3+0x8c>
    a8e8:	9809883a 	mov	r4,r19
    a8ec:	d8000715 	stw	zero,28(sp)
    a8f0:	d8000815 	stw	zero,32(sp)
    a8f4:	d8000615 	stw	zero,24(sp)
    a8f8:	003f8d06 	br	a730 <__divdf3+0x8c>

0000a8fc <__eqdf2>:
    a8fc:	deffef04 	addi	sp,sp,-68
    a900:	dc400f15 	stw	r17,60(sp)
    a904:	dc400404 	addi	r17,sp,16
    a908:	2005883a 	mov	r2,r4
    a90c:	2807883a 	mov	r3,r5
    a910:	dc000e15 	stw	r16,56(sp)
    a914:	d809883a 	mov	r4,sp
    a918:	880b883a 	mov	r5,r17
    a91c:	dc000904 	addi	r16,sp,36
    a920:	d8c00115 	stw	r3,4(sp)
    a924:	d8800015 	stw	r2,0(sp)
    a928:	d9800215 	stw	r6,8(sp)
    a92c:	dfc01015 	stw	ra,64(sp)
    a930:	d9c00315 	stw	r7,12(sp)
    a934:	000b3c00 	call	b3c0 <__unpack_d>
    a938:	d9000204 	addi	r4,sp,8
    a93c:	800b883a 	mov	r5,r16
    a940:	000b3c00 	call	b3c0 <__unpack_d>
    a944:	d8800417 	ldw	r2,16(sp)
    a948:	00c00044 	movi	r3,1
    a94c:	180d883a 	mov	r6,r3
    a950:	1880062e 	bgeu	r3,r2,a96c <__eqdf2+0x70>
    a954:	d8800917 	ldw	r2,36(sp)
    a958:	8809883a 	mov	r4,r17
    a95c:	800b883a 	mov	r5,r16
    a960:	1880022e 	bgeu	r3,r2,a96c <__eqdf2+0x70>
    a964:	000b4f80 	call	b4f8 <__fpcmp_parts_d>
    a968:	100d883a 	mov	r6,r2
    a96c:	3005883a 	mov	r2,r6
    a970:	dfc01017 	ldw	ra,64(sp)
    a974:	dc400f17 	ldw	r17,60(sp)
    a978:	dc000e17 	ldw	r16,56(sp)
    a97c:	dec01104 	addi	sp,sp,68
    a980:	f800283a 	ret

0000a984 <__nedf2>:
    a984:	deffef04 	addi	sp,sp,-68
    a988:	dc400f15 	stw	r17,60(sp)
    a98c:	dc400404 	addi	r17,sp,16
    a990:	2005883a 	mov	r2,r4
    a994:	2807883a 	mov	r3,r5
    a998:	dc000e15 	stw	r16,56(sp)
    a99c:	d809883a 	mov	r4,sp
    a9a0:	880b883a 	mov	r5,r17
    a9a4:	dc000904 	addi	r16,sp,36
    a9a8:	d8c00115 	stw	r3,4(sp)
    a9ac:	d8800015 	stw	r2,0(sp)
    a9b0:	d9800215 	stw	r6,8(sp)
    a9b4:	dfc01015 	stw	ra,64(sp)
    a9b8:	d9c00315 	stw	r7,12(sp)
    a9bc:	000b3c00 	call	b3c0 <__unpack_d>
    a9c0:	d9000204 	addi	r4,sp,8
    a9c4:	800b883a 	mov	r5,r16
    a9c8:	000b3c00 	call	b3c0 <__unpack_d>
    a9cc:	d8800417 	ldw	r2,16(sp)
    a9d0:	00c00044 	movi	r3,1
    a9d4:	180d883a 	mov	r6,r3
    a9d8:	1880062e 	bgeu	r3,r2,a9f4 <__nedf2+0x70>
    a9dc:	d8800917 	ldw	r2,36(sp)
    a9e0:	8809883a 	mov	r4,r17
    a9e4:	800b883a 	mov	r5,r16
    a9e8:	1880022e 	bgeu	r3,r2,a9f4 <__nedf2+0x70>
    a9ec:	000b4f80 	call	b4f8 <__fpcmp_parts_d>
    a9f0:	100d883a 	mov	r6,r2
    a9f4:	3005883a 	mov	r2,r6
    a9f8:	dfc01017 	ldw	ra,64(sp)
    a9fc:	dc400f17 	ldw	r17,60(sp)
    aa00:	dc000e17 	ldw	r16,56(sp)
    aa04:	dec01104 	addi	sp,sp,68
    aa08:	f800283a 	ret

0000aa0c <__gtdf2>:
    aa0c:	deffef04 	addi	sp,sp,-68
    aa10:	dc400f15 	stw	r17,60(sp)
    aa14:	dc400404 	addi	r17,sp,16
    aa18:	2005883a 	mov	r2,r4
    aa1c:	2807883a 	mov	r3,r5
    aa20:	dc000e15 	stw	r16,56(sp)
    aa24:	d809883a 	mov	r4,sp
    aa28:	880b883a 	mov	r5,r17
    aa2c:	dc000904 	addi	r16,sp,36
    aa30:	d8c00115 	stw	r3,4(sp)
    aa34:	d8800015 	stw	r2,0(sp)
    aa38:	d9800215 	stw	r6,8(sp)
    aa3c:	dfc01015 	stw	ra,64(sp)
    aa40:	d9c00315 	stw	r7,12(sp)
    aa44:	000b3c00 	call	b3c0 <__unpack_d>
    aa48:	d9000204 	addi	r4,sp,8
    aa4c:	800b883a 	mov	r5,r16
    aa50:	000b3c00 	call	b3c0 <__unpack_d>
    aa54:	d8800417 	ldw	r2,16(sp)
    aa58:	00c00044 	movi	r3,1
    aa5c:	01bfffc4 	movi	r6,-1
    aa60:	1880062e 	bgeu	r3,r2,aa7c <__gtdf2+0x70>
    aa64:	d8800917 	ldw	r2,36(sp)
    aa68:	8809883a 	mov	r4,r17
    aa6c:	800b883a 	mov	r5,r16
    aa70:	1880022e 	bgeu	r3,r2,aa7c <__gtdf2+0x70>
    aa74:	000b4f80 	call	b4f8 <__fpcmp_parts_d>
    aa78:	100d883a 	mov	r6,r2
    aa7c:	3005883a 	mov	r2,r6
    aa80:	dfc01017 	ldw	ra,64(sp)
    aa84:	dc400f17 	ldw	r17,60(sp)
    aa88:	dc000e17 	ldw	r16,56(sp)
    aa8c:	dec01104 	addi	sp,sp,68
    aa90:	f800283a 	ret

0000aa94 <__gedf2>:
    aa94:	deffef04 	addi	sp,sp,-68
    aa98:	dc400f15 	stw	r17,60(sp)
    aa9c:	dc400404 	addi	r17,sp,16
    aaa0:	2005883a 	mov	r2,r4
    aaa4:	2807883a 	mov	r3,r5
    aaa8:	dc000e15 	stw	r16,56(sp)
    aaac:	d809883a 	mov	r4,sp
    aab0:	880b883a 	mov	r5,r17
    aab4:	dc000904 	addi	r16,sp,36
    aab8:	d8c00115 	stw	r3,4(sp)
    aabc:	d8800015 	stw	r2,0(sp)
    aac0:	d9800215 	stw	r6,8(sp)
    aac4:	dfc01015 	stw	ra,64(sp)
    aac8:	d9c00315 	stw	r7,12(sp)
    aacc:	000b3c00 	call	b3c0 <__unpack_d>
    aad0:	d9000204 	addi	r4,sp,8
    aad4:	800b883a 	mov	r5,r16
    aad8:	000b3c00 	call	b3c0 <__unpack_d>
    aadc:	d8800417 	ldw	r2,16(sp)
    aae0:	00c00044 	movi	r3,1
    aae4:	01bfffc4 	movi	r6,-1
    aae8:	1880062e 	bgeu	r3,r2,ab04 <__gedf2+0x70>
    aaec:	d8800917 	ldw	r2,36(sp)
    aaf0:	8809883a 	mov	r4,r17
    aaf4:	800b883a 	mov	r5,r16
    aaf8:	1880022e 	bgeu	r3,r2,ab04 <__gedf2+0x70>
    aafc:	000b4f80 	call	b4f8 <__fpcmp_parts_d>
    ab00:	100d883a 	mov	r6,r2
    ab04:	3005883a 	mov	r2,r6
    ab08:	dfc01017 	ldw	ra,64(sp)
    ab0c:	dc400f17 	ldw	r17,60(sp)
    ab10:	dc000e17 	ldw	r16,56(sp)
    ab14:	dec01104 	addi	sp,sp,68
    ab18:	f800283a 	ret

0000ab1c <__ltdf2>:
    ab1c:	deffef04 	addi	sp,sp,-68
    ab20:	dc400f15 	stw	r17,60(sp)
    ab24:	dc400404 	addi	r17,sp,16
    ab28:	2005883a 	mov	r2,r4
    ab2c:	2807883a 	mov	r3,r5
    ab30:	dc000e15 	stw	r16,56(sp)
    ab34:	d809883a 	mov	r4,sp
    ab38:	880b883a 	mov	r5,r17
    ab3c:	dc000904 	addi	r16,sp,36
    ab40:	d8c00115 	stw	r3,4(sp)
    ab44:	d8800015 	stw	r2,0(sp)
    ab48:	d9800215 	stw	r6,8(sp)
    ab4c:	dfc01015 	stw	ra,64(sp)
    ab50:	d9c00315 	stw	r7,12(sp)
    ab54:	000b3c00 	call	b3c0 <__unpack_d>
    ab58:	d9000204 	addi	r4,sp,8
    ab5c:	800b883a 	mov	r5,r16
    ab60:	000b3c00 	call	b3c0 <__unpack_d>
    ab64:	d8800417 	ldw	r2,16(sp)
    ab68:	00c00044 	movi	r3,1
    ab6c:	180d883a 	mov	r6,r3
    ab70:	1880062e 	bgeu	r3,r2,ab8c <__ltdf2+0x70>
    ab74:	d8800917 	ldw	r2,36(sp)
    ab78:	8809883a 	mov	r4,r17
    ab7c:	800b883a 	mov	r5,r16
    ab80:	1880022e 	bgeu	r3,r2,ab8c <__ltdf2+0x70>
    ab84:	000b4f80 	call	b4f8 <__fpcmp_parts_d>
    ab88:	100d883a 	mov	r6,r2
    ab8c:	3005883a 	mov	r2,r6
    ab90:	dfc01017 	ldw	ra,64(sp)
    ab94:	dc400f17 	ldw	r17,60(sp)
    ab98:	dc000e17 	ldw	r16,56(sp)
    ab9c:	dec01104 	addi	sp,sp,68
    aba0:	f800283a 	ret

0000aba4 <__floatsidf>:
    aba4:	2006d7fa 	srli	r3,r4,31
    aba8:	defff604 	addi	sp,sp,-40
    abac:	008000c4 	movi	r2,3
    abb0:	dfc00915 	stw	ra,36(sp)
    abb4:	dcc00815 	stw	r19,32(sp)
    abb8:	dc800715 	stw	r18,28(sp)
    abbc:	dc400615 	stw	r17,24(sp)
    abc0:	dc000515 	stw	r16,20(sp)
    abc4:	d8800015 	stw	r2,0(sp)
    abc8:	d8c00115 	stw	r3,4(sp)
    abcc:	20000f1e 	bne	r4,zero,ac0c <__floatsidf+0x68>
    abd0:	00800084 	movi	r2,2
    abd4:	d8800015 	stw	r2,0(sp)
    abd8:	d809883a 	mov	r4,sp
    abdc:	000b0ac0 	call	b0ac <__pack_d>
    abe0:	1009883a 	mov	r4,r2
    abe4:	180b883a 	mov	r5,r3
    abe8:	2005883a 	mov	r2,r4
    abec:	2807883a 	mov	r3,r5
    abf0:	dfc00917 	ldw	ra,36(sp)
    abf4:	dcc00817 	ldw	r19,32(sp)
    abf8:	dc800717 	ldw	r18,28(sp)
    abfc:	dc400617 	ldw	r17,24(sp)
    ac00:	dc000517 	ldw	r16,20(sp)
    ac04:	dec00a04 	addi	sp,sp,40
    ac08:	f800283a 	ret
    ac0c:	00800f04 	movi	r2,60
    ac10:	1807003a 	cmpeq	r3,r3,zero
    ac14:	d8800215 	stw	r2,8(sp)
    ac18:	18001126 	beq	r3,zero,ac60 <__floatsidf+0xbc>
    ac1c:	0027883a 	mov	r19,zero
    ac20:	2025883a 	mov	r18,r4
    ac24:	d9000315 	stw	r4,12(sp)
    ac28:	dcc00415 	stw	r19,16(sp)
    ac2c:	000b02c0 	call	b02c <__clzsi2>
    ac30:	11000744 	addi	r4,r2,29
    ac34:	013fe80e 	bge	zero,r4,abd8 <__floatsidf+0x34>
    ac38:	10bfff44 	addi	r2,r2,-3
    ac3c:	10000c16 	blt	r2,zero,ac70 <__floatsidf+0xcc>
    ac40:	90a2983a 	sll	r17,r18,r2
    ac44:	0021883a 	mov	r16,zero
    ac48:	d8800217 	ldw	r2,8(sp)
    ac4c:	dc400415 	stw	r17,16(sp)
    ac50:	dc000315 	stw	r16,12(sp)
    ac54:	1105c83a 	sub	r2,r2,r4
    ac58:	d8800215 	stw	r2,8(sp)
    ac5c:	003fde06 	br	abd8 <__floatsidf+0x34>
    ac60:	00a00034 	movhi	r2,32768
    ac64:	20800a26 	beq	r4,r2,ac90 <__floatsidf+0xec>
    ac68:	0109c83a 	sub	r4,zero,r4
    ac6c:	003feb06 	br	ac1c <__floatsidf+0x78>
    ac70:	9006d07a 	srli	r3,r18,1
    ac74:	008007c4 	movi	r2,31
    ac78:	1105c83a 	sub	r2,r2,r4
    ac7c:	1886d83a 	srl	r3,r3,r2
    ac80:	9922983a 	sll	r17,r19,r4
    ac84:	9120983a 	sll	r16,r18,r4
    ac88:	1c62b03a 	or	r17,r3,r17
    ac8c:	003fee06 	br	ac48 <__floatsidf+0xa4>
    ac90:	0009883a 	mov	r4,zero
    ac94:	01707834 	movhi	r5,49632
    ac98:	003fd306 	br	abe8 <__floatsidf+0x44>

0000ac9c <__fixdfsi>:
    ac9c:	defff804 	addi	sp,sp,-32
    aca0:	2005883a 	mov	r2,r4
    aca4:	2807883a 	mov	r3,r5
    aca8:	d809883a 	mov	r4,sp
    acac:	d9400204 	addi	r5,sp,8
    acb0:	d8c00115 	stw	r3,4(sp)
    acb4:	d8800015 	stw	r2,0(sp)
    acb8:	dfc00715 	stw	ra,28(sp)
    acbc:	000b3c00 	call	b3c0 <__unpack_d>
    acc0:	d8c00217 	ldw	r3,8(sp)
    acc4:	00800084 	movi	r2,2
    acc8:	1880051e 	bne	r3,r2,ace0 <__fixdfsi+0x44>
    accc:	0007883a 	mov	r3,zero
    acd0:	1805883a 	mov	r2,r3
    acd4:	dfc00717 	ldw	ra,28(sp)
    acd8:	dec00804 	addi	sp,sp,32
    acdc:	f800283a 	ret
    ace0:	00800044 	movi	r2,1
    ace4:	10fff92e 	bgeu	r2,r3,accc <__fixdfsi+0x30>
    ace8:	00800104 	movi	r2,4
    acec:	18800426 	beq	r3,r2,ad00 <__fixdfsi+0x64>
    acf0:	d8c00417 	ldw	r3,16(sp)
    acf4:	183ff516 	blt	r3,zero,accc <__fixdfsi+0x30>
    acf8:	00800784 	movi	r2,30
    acfc:	10c0080e 	bge	r2,r3,ad20 <__fixdfsi+0x84>
    ad00:	d8800317 	ldw	r2,12(sp)
    ad04:	1000121e 	bne	r2,zero,ad50 <__fixdfsi+0xb4>
    ad08:	00e00034 	movhi	r3,32768
    ad0c:	18ffffc4 	addi	r3,r3,-1
    ad10:	1805883a 	mov	r2,r3
    ad14:	dfc00717 	ldw	ra,28(sp)
    ad18:	dec00804 	addi	sp,sp,32
    ad1c:	f800283a 	ret
    ad20:	00800f04 	movi	r2,60
    ad24:	10d1c83a 	sub	r8,r2,r3
    ad28:	40bff804 	addi	r2,r8,-32
    ad2c:	d9800517 	ldw	r6,20(sp)
    ad30:	d9c00617 	ldw	r7,24(sp)
    ad34:	10000816 	blt	r2,zero,ad58 <__fixdfsi+0xbc>
    ad38:	3888d83a 	srl	r4,r7,r2
    ad3c:	d8800317 	ldw	r2,12(sp)
    ad40:	2007883a 	mov	r3,r4
    ad44:	103fe226 	beq	r2,zero,acd0 <__fixdfsi+0x34>
    ad48:	0107c83a 	sub	r3,zero,r4
    ad4c:	003fe006 	br	acd0 <__fixdfsi+0x34>
    ad50:	00e00034 	movhi	r3,32768
    ad54:	003fde06 	br	acd0 <__fixdfsi+0x34>
    ad58:	39c7883a 	add	r3,r7,r7
    ad5c:	008007c4 	movi	r2,31
    ad60:	1205c83a 	sub	r2,r2,r8
    ad64:	1886983a 	sll	r3,r3,r2
    ad68:	3208d83a 	srl	r4,r6,r8
    ad6c:	1908b03a 	or	r4,r3,r4
    ad70:	003ff206 	br	ad3c <__fixdfsi+0xa0>

0000ad74 <__floatunsidf>:
    ad74:	defff204 	addi	sp,sp,-56
    ad78:	dfc00d15 	stw	ra,52(sp)
    ad7c:	ddc00c15 	stw	r23,48(sp)
    ad80:	dd800b15 	stw	r22,44(sp)
    ad84:	dd400a15 	stw	r21,40(sp)
    ad88:	dd000915 	stw	r20,36(sp)
    ad8c:	dcc00815 	stw	r19,32(sp)
    ad90:	dc800715 	stw	r18,28(sp)
    ad94:	dc400615 	stw	r17,24(sp)
    ad98:	dc000515 	stw	r16,20(sp)
    ad9c:	d8000115 	stw	zero,4(sp)
    ada0:	20000f1e 	bne	r4,zero,ade0 <__floatunsidf+0x6c>
    ada4:	00800084 	movi	r2,2
    ada8:	d8800015 	stw	r2,0(sp)
    adac:	d809883a 	mov	r4,sp
    adb0:	000b0ac0 	call	b0ac <__pack_d>
    adb4:	dfc00d17 	ldw	ra,52(sp)
    adb8:	ddc00c17 	ldw	r23,48(sp)
    adbc:	dd800b17 	ldw	r22,44(sp)
    adc0:	dd400a17 	ldw	r21,40(sp)
    adc4:	dd000917 	ldw	r20,36(sp)
    adc8:	dcc00817 	ldw	r19,32(sp)
    adcc:	dc800717 	ldw	r18,28(sp)
    add0:	dc400617 	ldw	r17,24(sp)
    add4:	dc000517 	ldw	r16,20(sp)
    add8:	dec00e04 	addi	sp,sp,56
    addc:	f800283a 	ret
    ade0:	008000c4 	movi	r2,3
    ade4:	00c00f04 	movi	r3,60
    ade8:	002f883a 	mov	r23,zero
    adec:	202d883a 	mov	r22,r4
    adf0:	d8800015 	stw	r2,0(sp)
    adf4:	d8c00215 	stw	r3,8(sp)
    adf8:	d9000315 	stw	r4,12(sp)
    adfc:	ddc00415 	stw	r23,16(sp)
    ae00:	000b02c0 	call	b02c <__clzsi2>
    ae04:	12400744 	addi	r9,r2,29
    ae08:	48000b16 	blt	r9,zero,ae38 <__floatunsidf+0xc4>
    ae0c:	483fe726 	beq	r9,zero,adac <__floatunsidf+0x38>
    ae10:	10bfff44 	addi	r2,r2,-3
    ae14:	10002e16 	blt	r2,zero,aed0 <__floatunsidf+0x15c>
    ae18:	b0a2983a 	sll	r17,r22,r2
    ae1c:	0021883a 	mov	r16,zero
    ae20:	d8800217 	ldw	r2,8(sp)
    ae24:	dc400415 	stw	r17,16(sp)
    ae28:	dc000315 	stw	r16,12(sp)
    ae2c:	1245c83a 	sub	r2,r2,r9
    ae30:	d8800215 	stw	r2,8(sp)
    ae34:	003fdd06 	br	adac <__floatunsidf+0x38>
    ae38:	0255c83a 	sub	r10,zero,r9
    ae3c:	51bff804 	addi	r6,r10,-32
    ae40:	30001b16 	blt	r6,zero,aeb0 <__floatunsidf+0x13c>
    ae44:	b9a8d83a 	srl	r20,r23,r6
    ae48:	002b883a 	mov	r21,zero
    ae4c:	000f883a 	mov	r7,zero
    ae50:	01000044 	movi	r4,1
    ae54:	0011883a 	mov	r8,zero
    ae58:	30002516 	blt	r6,zero,aef0 <__floatunsidf+0x17c>
    ae5c:	21a6983a 	sll	r19,r4,r6
    ae60:	0025883a 	mov	r18,zero
    ae64:	00bfffc4 	movi	r2,-1
    ae68:	9089883a 	add	r4,r18,r2
    ae6c:	988b883a 	add	r5,r19,r2
    ae70:	248d803a 	cmpltu	r6,r4,r18
    ae74:	314b883a 	add	r5,r6,r5
    ae78:	b104703a 	and	r2,r22,r4
    ae7c:	b946703a 	and	r3,r23,r5
    ae80:	10c4b03a 	or	r2,r2,r3
    ae84:	10000226 	beq	r2,zero,ae90 <__floatunsidf+0x11c>
    ae88:	01c00044 	movi	r7,1
    ae8c:	0011883a 	mov	r8,zero
    ae90:	d9000217 	ldw	r4,8(sp)
    ae94:	a1c4b03a 	or	r2,r20,r7
    ae98:	aa06b03a 	or	r3,r21,r8
    ae9c:	2249c83a 	sub	r4,r4,r9
    aea0:	d8c00415 	stw	r3,16(sp)
    aea4:	d9000215 	stw	r4,8(sp)
    aea8:	d8800315 	stw	r2,12(sp)
    aeac:	003fbf06 	br	adac <__floatunsidf+0x38>
    aeb0:	bdc7883a 	add	r3,r23,r23
    aeb4:	008007c4 	movi	r2,31
    aeb8:	1285c83a 	sub	r2,r2,r10
    aebc:	1886983a 	sll	r3,r3,r2
    aec0:	b2a8d83a 	srl	r20,r22,r10
    aec4:	baaad83a 	srl	r21,r23,r10
    aec8:	1d28b03a 	or	r20,r3,r20
    aecc:	003fdf06 	br	ae4c <__floatunsidf+0xd8>
    aed0:	b006d07a 	srli	r3,r22,1
    aed4:	008007c4 	movi	r2,31
    aed8:	1245c83a 	sub	r2,r2,r9
    aedc:	1886d83a 	srl	r3,r3,r2
    aee0:	ba62983a 	sll	r17,r23,r9
    aee4:	b260983a 	sll	r16,r22,r9
    aee8:	1c62b03a 	or	r17,r3,r17
    aeec:	003fcc06 	br	ae20 <__floatunsidf+0xac>
    aef0:	2006d07a 	srli	r3,r4,1
    aef4:	008007c4 	movi	r2,31
    aef8:	1285c83a 	sub	r2,r2,r10
    aefc:	18a6d83a 	srl	r19,r3,r2
    af00:	22a4983a 	sll	r18,r4,r10
    af04:	003fd706 	br	ae64 <__floatunsidf+0xf0>

0000af08 <__muldi3>:
    af08:	defff204 	addi	sp,sp,-56
    af0c:	df000c15 	stw	fp,48(sp)
    af10:	3038d43a 	srli	fp,r6,16
    af14:	dd000815 	stw	r20,32(sp)
    af18:	dc400515 	stw	r17,20(sp)
    af1c:	2028d43a 	srli	r20,r4,16
    af20:	247fffcc 	andi	r17,r4,65535
    af24:	dc000415 	stw	r16,16(sp)
    af28:	343fffcc 	andi	r16,r6,65535
    af2c:	dcc00715 	stw	r19,28(sp)
    af30:	d9000015 	stw	r4,0(sp)
    af34:	2827883a 	mov	r19,r5
    af38:	8809883a 	mov	r4,r17
    af3c:	d9400115 	stw	r5,4(sp)
    af40:	800b883a 	mov	r5,r16
    af44:	d9800215 	stw	r6,8(sp)
    af48:	dfc00d15 	stw	ra,52(sp)
    af4c:	d9c00315 	stw	r7,12(sp)
    af50:	dd800a15 	stw	r22,40(sp)
    af54:	dd400915 	stw	r21,36(sp)
    af58:	302d883a 	mov	r22,r6
    af5c:	ddc00b15 	stw	r23,44(sp)
    af60:	dc800615 	stw	r18,24(sp)
    af64:	0001ca00 	call	1ca0 <__mulsi3>
    af68:	8809883a 	mov	r4,r17
    af6c:	e00b883a 	mov	r5,fp
    af70:	102b883a 	mov	r21,r2
    af74:	0001ca00 	call	1ca0 <__mulsi3>
    af78:	800b883a 	mov	r5,r16
    af7c:	a009883a 	mov	r4,r20
    af80:	1023883a 	mov	r17,r2
    af84:	0001ca00 	call	1ca0 <__mulsi3>
    af88:	a009883a 	mov	r4,r20
    af8c:	e00b883a 	mov	r5,fp
    af90:	1021883a 	mov	r16,r2
    af94:	0001ca00 	call	1ca0 <__mulsi3>
    af98:	a8ffffcc 	andi	r3,r21,65535
    af9c:	a82ad43a 	srli	r21,r21,16
    afa0:	8c23883a 	add	r17,r17,r16
    afa4:	1011883a 	mov	r8,r2
    afa8:	ac6b883a 	add	r21,r21,r17
    afac:	a804943a 	slli	r2,r21,16
    afb0:	b009883a 	mov	r4,r22
    afb4:	980b883a 	mov	r5,r19
    afb8:	10c7883a 	add	r3,r2,r3
    afbc:	a812d43a 	srli	r9,r21,16
    afc0:	180d883a 	mov	r6,r3
    afc4:	ac00022e 	bgeu	r21,r16,afd0 <__muldi3+0xc8>
    afc8:	00800074 	movhi	r2,1
    afcc:	4091883a 	add	r8,r8,r2
    afd0:	4267883a 	add	r19,r8,r9
    afd4:	302d883a 	mov	r22,r6
    afd8:	0001ca00 	call	1ca0 <__mulsi3>
    afdc:	d9400317 	ldw	r5,12(sp)
    afe0:	d9000017 	ldw	r4,0(sp)
    afe4:	1023883a 	mov	r17,r2
    afe8:	0001ca00 	call	1ca0 <__mulsi3>
    afec:	14cb883a 	add	r5,r2,r19
    aff0:	894b883a 	add	r5,r17,r5
    aff4:	b005883a 	mov	r2,r22
    aff8:	2807883a 	mov	r3,r5
    affc:	dfc00d17 	ldw	ra,52(sp)
    b000:	df000c17 	ldw	fp,48(sp)
    b004:	ddc00b17 	ldw	r23,44(sp)
    b008:	dd800a17 	ldw	r22,40(sp)
    b00c:	dd400917 	ldw	r21,36(sp)
    b010:	dd000817 	ldw	r20,32(sp)
    b014:	dcc00717 	ldw	r19,28(sp)
    b018:	dc800617 	ldw	r18,24(sp)
    b01c:	dc400517 	ldw	r17,20(sp)
    b020:	dc000417 	ldw	r16,16(sp)
    b024:	dec00e04 	addi	sp,sp,56
    b028:	f800283a 	ret

0000b02c <__clzsi2>:
    b02c:	00bfffd4 	movui	r2,65535
    b030:	11000e36 	bltu	r2,r4,b06c <__clzsi2+0x40>
    b034:	00803fc4 	movi	r2,255
    b038:	01400204 	movi	r5,8
    b03c:	0007883a 	mov	r3,zero
    b040:	11001036 	bltu	r2,r4,b084 <__clzsi2+0x58>
    b044:	000b883a 	mov	r5,zero
    b048:	20c6d83a 	srl	r3,r4,r3
    b04c:	00800074 	movhi	r2,1
    b050:	10b8fe04 	addi	r2,r2,-7176
    b054:	1887883a 	add	r3,r3,r2
    b058:	18800003 	ldbu	r2,0(r3)
    b05c:	00c00804 	movi	r3,32
    b060:	2885883a 	add	r2,r5,r2
    b064:	1885c83a 	sub	r2,r3,r2
    b068:	f800283a 	ret
    b06c:	01400404 	movi	r5,16
    b070:	00804034 	movhi	r2,256
    b074:	10bfffc4 	addi	r2,r2,-1
    b078:	2807883a 	mov	r3,r5
    b07c:	113ff22e 	bgeu	r2,r4,b048 <__clzsi2+0x1c>
    b080:	01400604 	movi	r5,24
    b084:	2807883a 	mov	r3,r5
    b088:	20c6d83a 	srl	r3,r4,r3
    b08c:	00800074 	movhi	r2,1
    b090:	10b8fe04 	addi	r2,r2,-7176
    b094:	1887883a 	add	r3,r3,r2
    b098:	18800003 	ldbu	r2,0(r3)
    b09c:	00c00804 	movi	r3,32
    b0a0:	2885883a 	add	r2,r5,r2
    b0a4:	1885c83a 	sub	r2,r3,r2
    b0a8:	f800283a 	ret

0000b0ac <__pack_d>:
    b0ac:	20c00017 	ldw	r3,0(r4)
    b0b0:	defffd04 	addi	sp,sp,-12
    b0b4:	dc000015 	stw	r16,0(sp)
    b0b8:	dc800215 	stw	r18,8(sp)
    b0bc:	dc400115 	stw	r17,4(sp)
    b0c0:	00800044 	movi	r2,1
    b0c4:	22000317 	ldw	r8,12(r4)
    b0c8:	001f883a 	mov	r15,zero
    b0cc:	22400417 	ldw	r9,16(r4)
    b0d0:	24000117 	ldw	r16,4(r4)
    b0d4:	10c0552e 	bgeu	r2,r3,b22c <__pack_d+0x180>
    b0d8:	00800104 	movi	r2,4
    b0dc:	18804f26 	beq	r3,r2,b21c <__pack_d+0x170>
    b0e0:	00800084 	movi	r2,2
    b0e4:	18800226 	beq	r3,r2,b0f0 <__pack_d+0x44>
    b0e8:	4244b03a 	or	r2,r8,r9
    b0ec:	10001a1e 	bne	r2,zero,b158 <__pack_d+0xac>
    b0f0:	000d883a 	mov	r6,zero
    b0f4:	000f883a 	mov	r7,zero
    b0f8:	0011883a 	mov	r8,zero
    b0fc:	00800434 	movhi	r2,16
    b100:	10bfffc4 	addi	r2,r2,-1
    b104:	301d883a 	mov	r14,r6
    b108:	3884703a 	and	r2,r7,r2
    b10c:	400a953a 	slli	r5,r8,20
    b110:	79bffc2c 	andhi	r6,r15,65520
    b114:	308cb03a 	or	r6,r6,r2
    b118:	00e00434 	movhi	r3,32784
    b11c:	18ffffc4 	addi	r3,r3,-1
    b120:	800497fa 	slli	r2,r16,31
    b124:	30c6703a 	and	r3,r6,r3
    b128:	1946b03a 	or	r3,r3,r5
    b12c:	01600034 	movhi	r5,32768
    b130:	297fffc4 	addi	r5,r5,-1
    b134:	194a703a 	and	r5,r3,r5
    b138:	288ab03a 	or	r5,r5,r2
    b13c:	2807883a 	mov	r3,r5
    b140:	7005883a 	mov	r2,r14
    b144:	dc800217 	ldw	r18,8(sp)
    b148:	dc400117 	ldw	r17,4(sp)
    b14c:	dc000017 	ldw	r16,0(sp)
    b150:	dec00304 	addi	sp,sp,12
    b154:	f800283a 	ret
    b158:	21000217 	ldw	r4,8(r4)
    b15c:	00bf0084 	movi	r2,-1022
    b160:	20803f16 	blt	r4,r2,b260 <__pack_d+0x1b4>
    b164:	0080ffc4 	movi	r2,1023
    b168:	11002c16 	blt	r2,r4,b21c <__pack_d+0x170>
    b16c:	00803fc4 	movi	r2,255
    b170:	408c703a 	and	r6,r8,r2
    b174:	00802004 	movi	r2,128
    b178:	0007883a 	mov	r3,zero
    b17c:	000f883a 	mov	r7,zero
    b180:	2280ffc4 	addi	r10,r4,1023
    b184:	30801e26 	beq	r6,r2,b200 <__pack_d+0x154>
    b188:	00801fc4 	movi	r2,127
    b18c:	4089883a 	add	r4,r8,r2
    b190:	220d803a 	cmpltu	r6,r4,r8
    b194:	324d883a 	add	r6,r6,r9
    b198:	2011883a 	mov	r8,r4
    b19c:	3013883a 	mov	r9,r6
    b1a0:	00880034 	movhi	r2,8192
    b1a4:	10bfffc4 	addi	r2,r2,-1
    b1a8:	12400d36 	bltu	r2,r9,b1e0 <__pack_d+0x134>
    b1ac:	4804963a 	slli	r2,r9,24
    b1b0:	400cd23a 	srli	r6,r8,8
    b1b4:	480ed23a 	srli	r7,r9,8
    b1b8:	013fffc4 	movi	r4,-1
    b1bc:	118cb03a 	or	r6,r2,r6
    b1c0:	01400434 	movhi	r5,16
    b1c4:	297fffc4 	addi	r5,r5,-1
    b1c8:	3104703a 	and	r2,r6,r4
    b1cc:	3946703a 	and	r3,r7,r5
    b1d0:	5201ffcc 	andi	r8,r10,2047
    b1d4:	100d883a 	mov	r6,r2
    b1d8:	180f883a 	mov	r7,r3
    b1dc:	003fc706 	br	b0fc <__pack_d+0x50>
    b1e0:	480897fa 	slli	r4,r9,31
    b1e4:	4004d07a 	srli	r2,r8,1
    b1e8:	4806d07a 	srli	r3,r9,1
    b1ec:	52800044 	addi	r10,r10,1
    b1f0:	2084b03a 	or	r2,r4,r2
    b1f4:	1011883a 	mov	r8,r2
    b1f8:	1813883a 	mov	r9,r3
    b1fc:	003feb06 	br	b1ac <__pack_d+0x100>
    b200:	383fe11e 	bne	r7,zero,b188 <__pack_d+0xdc>
    b204:	01004004 	movi	r4,256
    b208:	4104703a 	and	r2,r8,r4
    b20c:	10c4b03a 	or	r2,r2,r3
    b210:	103fe326 	beq	r2,zero,b1a0 <__pack_d+0xf4>
    b214:	3005883a 	mov	r2,r6
    b218:	003fdc06 	br	b18c <__pack_d+0xe0>
    b21c:	000d883a 	mov	r6,zero
    b220:	000f883a 	mov	r7,zero
    b224:	0201ffc4 	movi	r8,2047
    b228:	003fb406 	br	b0fc <__pack_d+0x50>
    b22c:	0005883a 	mov	r2,zero
    b230:	00c00234 	movhi	r3,8
    b234:	408cb03a 	or	r6,r8,r2
    b238:	48ceb03a 	or	r7,r9,r3
    b23c:	013fffc4 	movi	r4,-1
    b240:	01400434 	movhi	r5,16
    b244:	297fffc4 	addi	r5,r5,-1
    b248:	3104703a 	and	r2,r6,r4
    b24c:	3946703a 	and	r3,r7,r5
    b250:	100d883a 	mov	r6,r2
    b254:	180f883a 	mov	r7,r3
    b258:	0201ffc4 	movi	r8,2047
    b25c:	003fa706 	br	b0fc <__pack_d+0x50>
    b260:	1109c83a 	sub	r4,r2,r4
    b264:	00800e04 	movi	r2,56
    b268:	11004316 	blt	r2,r4,b378 <__pack_d+0x2cc>
    b26c:	21fff804 	addi	r7,r4,-32
    b270:	38004516 	blt	r7,zero,b388 <__pack_d+0x2dc>
    b274:	49d8d83a 	srl	r12,r9,r7
    b278:	001b883a 	mov	r13,zero
    b27c:	0023883a 	mov	r17,zero
    b280:	01400044 	movi	r5,1
    b284:	0025883a 	mov	r18,zero
    b288:	38004716 	blt	r7,zero,b3a8 <__pack_d+0x2fc>
    b28c:	29d6983a 	sll	r11,r5,r7
    b290:	0015883a 	mov	r10,zero
    b294:	00bfffc4 	movi	r2,-1
    b298:	5089883a 	add	r4,r10,r2
    b29c:	588b883a 	add	r5,r11,r2
    b2a0:	228d803a 	cmpltu	r6,r4,r10
    b2a4:	314b883a 	add	r5,r6,r5
    b2a8:	4104703a 	and	r2,r8,r4
    b2ac:	4946703a 	and	r3,r9,r5
    b2b0:	10c4b03a 	or	r2,r2,r3
    b2b4:	10000226 	beq	r2,zero,b2c0 <__pack_d+0x214>
    b2b8:	04400044 	movi	r17,1
    b2bc:	0025883a 	mov	r18,zero
    b2c0:	00803fc4 	movi	r2,255
    b2c4:	644eb03a 	or	r7,r12,r17
    b2c8:	3892703a 	and	r9,r7,r2
    b2cc:	00802004 	movi	r2,128
    b2d0:	6c90b03a 	or	r8,r13,r18
    b2d4:	0015883a 	mov	r10,zero
    b2d8:	48801626 	beq	r9,r2,b334 <__pack_d+0x288>
    b2dc:	01001fc4 	movi	r4,127
    b2e0:	3905883a 	add	r2,r7,r4
    b2e4:	11cd803a 	cmpltu	r6,r2,r7
    b2e8:	320d883a 	add	r6,r6,r8
    b2ec:	100f883a 	mov	r7,r2
    b2f0:	00840034 	movhi	r2,4096
    b2f4:	10bfffc4 	addi	r2,r2,-1
    b2f8:	3011883a 	mov	r8,r6
    b2fc:	0007883a 	mov	r3,zero
    b300:	11801b36 	bltu	r2,r6,b370 <__pack_d+0x2c4>
    b304:	4004963a 	slli	r2,r8,24
    b308:	3808d23a 	srli	r4,r7,8
    b30c:	400ad23a 	srli	r5,r8,8
    b310:	1813883a 	mov	r9,r3
    b314:	1108b03a 	or	r4,r2,r4
    b318:	00bfffc4 	movi	r2,-1
    b31c:	00c00434 	movhi	r3,16
    b320:	18ffffc4 	addi	r3,r3,-1
    b324:	208c703a 	and	r6,r4,r2
    b328:	28ce703a 	and	r7,r5,r3
    b32c:	4a01ffcc 	andi	r8,r9,2047
    b330:	003f7206 	br	b0fc <__pack_d+0x50>
    b334:	503fe91e 	bne	r10,zero,b2dc <__pack_d+0x230>
    b338:	01004004 	movi	r4,256
    b33c:	3904703a 	and	r2,r7,r4
    b340:	0007883a 	mov	r3,zero
    b344:	10c4b03a 	or	r2,r2,r3
    b348:	10000626 	beq	r2,zero,b364 <__pack_d+0x2b8>
    b34c:	3a45883a 	add	r2,r7,r9
    b350:	11cd803a 	cmpltu	r6,r2,r7
    b354:	320d883a 	add	r6,r6,r8
    b358:	100f883a 	mov	r7,r2
    b35c:	3011883a 	mov	r8,r6
    b360:	0007883a 	mov	r3,zero
    b364:	00840034 	movhi	r2,4096
    b368:	10bfffc4 	addi	r2,r2,-1
    b36c:	123fe52e 	bgeu	r2,r8,b304 <__pack_d+0x258>
    b370:	00c00044 	movi	r3,1
    b374:	003fe306 	br	b304 <__pack_d+0x258>
    b378:	0009883a 	mov	r4,zero
    b37c:	0013883a 	mov	r9,zero
    b380:	000b883a 	mov	r5,zero
    b384:	003fe406 	br	b318 <__pack_d+0x26c>
    b388:	4a47883a 	add	r3,r9,r9
    b38c:	008007c4 	movi	r2,31
    b390:	1105c83a 	sub	r2,r2,r4
    b394:	1886983a 	sll	r3,r3,r2
    b398:	4118d83a 	srl	r12,r8,r4
    b39c:	491ad83a 	srl	r13,r9,r4
    b3a0:	1b18b03a 	or	r12,r3,r12
    b3a4:	003fb506 	br	b27c <__pack_d+0x1d0>
    b3a8:	2806d07a 	srli	r3,r5,1
    b3ac:	008007c4 	movi	r2,31
    b3b0:	1105c83a 	sub	r2,r2,r4
    b3b4:	1896d83a 	srl	r11,r3,r2
    b3b8:	2914983a 	sll	r10,r5,r4
    b3bc:	003fb506 	br	b294 <__pack_d+0x1e8>

0000b3c0 <__unpack_d>:
    b3c0:	20c00117 	ldw	r3,4(r4)
    b3c4:	22400017 	ldw	r9,0(r4)
    b3c8:	00800434 	movhi	r2,16
    b3cc:	10bfffc4 	addi	r2,r2,-1
    b3d0:	1808d53a 	srli	r4,r3,20
    b3d4:	180cd7fa 	srli	r6,r3,31
    b3d8:	1894703a 	and	r10,r3,r2
    b3dc:	2201ffcc 	andi	r8,r4,2047
    b3e0:	281b883a 	mov	r13,r5
    b3e4:	4817883a 	mov	r11,r9
    b3e8:	29800115 	stw	r6,4(r5)
    b3ec:	5019883a 	mov	r12,r10
    b3f0:	40001e1e 	bne	r8,zero,b46c <__unpack_d+0xac>
    b3f4:	4a84b03a 	or	r2,r9,r10
    b3f8:	10001926 	beq	r2,zero,b460 <__unpack_d+0xa0>
    b3fc:	4804d63a 	srli	r2,r9,24
    b400:	500c923a 	slli	r6,r10,8
    b404:	013f0084 	movi	r4,-1022
    b408:	00c40034 	movhi	r3,4096
    b40c:	18ffffc4 	addi	r3,r3,-1
    b410:	118cb03a 	or	r6,r2,r6
    b414:	008000c4 	movi	r2,3
    b418:	480a923a 	slli	r5,r9,8
    b41c:	68800015 	stw	r2,0(r13)
    b420:	69000215 	stw	r4,8(r13)
    b424:	19800b36 	bltu	r3,r6,b454 <__unpack_d+0x94>
    b428:	200f883a 	mov	r7,r4
    b42c:	1811883a 	mov	r8,r3
    b430:	2945883a 	add	r2,r5,r5
    b434:	1149803a 	cmpltu	r4,r2,r5
    b438:	3187883a 	add	r3,r6,r6
    b43c:	20c9883a 	add	r4,r4,r3
    b440:	100b883a 	mov	r5,r2
    b444:	200d883a 	mov	r6,r4
    b448:	39ffffc4 	addi	r7,r7,-1
    b44c:	413ff82e 	bgeu	r8,r4,b430 <__unpack_d+0x70>
    b450:	69c00215 	stw	r7,8(r13)
    b454:	69800415 	stw	r6,16(r13)
    b458:	69400315 	stw	r5,12(r13)
    b45c:	f800283a 	ret
    b460:	00800084 	movi	r2,2
    b464:	28800015 	stw	r2,0(r5)
    b468:	f800283a 	ret
    b46c:	0081ffc4 	movi	r2,2047
    b470:	40800f26 	beq	r8,r2,b4b0 <__unpack_d+0xf0>
    b474:	480cd63a 	srli	r6,r9,24
    b478:	5006923a 	slli	r3,r10,8
    b47c:	4804923a 	slli	r2,r9,8
    b480:	0009883a 	mov	r4,zero
    b484:	30c6b03a 	or	r3,r6,r3
    b488:	01440034 	movhi	r5,4096
    b48c:	110cb03a 	or	r6,r2,r4
    b490:	423f0044 	addi	r8,r8,-1023
    b494:	194eb03a 	or	r7,r3,r5
    b498:	008000c4 	movi	r2,3
    b49c:	69c00415 	stw	r7,16(r13)
    b4a0:	6a000215 	stw	r8,8(r13)
    b4a4:	68800015 	stw	r2,0(r13)
    b4a8:	69800315 	stw	r6,12(r13)
    b4ac:	f800283a 	ret
    b4b0:	4a84b03a 	or	r2,r9,r10
    b4b4:	1000031e 	bne	r2,zero,b4c4 <__unpack_d+0x104>
    b4b8:	00800104 	movi	r2,4
    b4bc:	28800015 	stw	r2,0(r5)
    b4c0:	f800283a 	ret
    b4c4:	0009883a 	mov	r4,zero
    b4c8:	01400234 	movhi	r5,8
    b4cc:	4904703a 	and	r2,r9,r4
    b4d0:	5146703a 	and	r3,r10,r5
    b4d4:	10c4b03a 	or	r2,r2,r3
    b4d8:	10000526 	beq	r2,zero,b4f0 <__unpack_d+0x130>
    b4dc:	00800044 	movi	r2,1
    b4e0:	68800015 	stw	r2,0(r13)
    b4e4:	6b000415 	stw	r12,16(r13)
    b4e8:	6ac00315 	stw	r11,12(r13)
    b4ec:	f800283a 	ret
    b4f0:	68000015 	stw	zero,0(r13)
    b4f4:	003ffb06 	br	b4e4 <__unpack_d+0x124>

0000b4f8 <__fpcmp_parts_d>:
    b4f8:	21800017 	ldw	r6,0(r4)
    b4fc:	00c00044 	movi	r3,1
    b500:	19800a2e 	bgeu	r3,r6,b52c <__fpcmp_parts_d+0x34>
    b504:	28800017 	ldw	r2,0(r5)
    b508:	1880082e 	bgeu	r3,r2,b52c <__fpcmp_parts_d+0x34>
    b50c:	00c00104 	movi	r3,4
    b510:	30c02626 	beq	r6,r3,b5ac <__fpcmp_parts_d+0xb4>
    b514:	10c02226 	beq	r2,r3,b5a0 <__fpcmp_parts_d+0xa8>
    b518:	00c00084 	movi	r3,2
    b51c:	30c00526 	beq	r6,r3,b534 <__fpcmp_parts_d+0x3c>
    b520:	10c0071e 	bne	r2,r3,b540 <__fpcmp_parts_d+0x48>
    b524:	20800117 	ldw	r2,4(r4)
    b528:	1000091e 	bne	r2,zero,b550 <__fpcmp_parts_d+0x58>
    b52c:	00800044 	movi	r2,1
    b530:	f800283a 	ret
    b534:	10c01a1e 	bne	r2,r3,b5a0 <__fpcmp_parts_d+0xa8>
    b538:	0005883a 	mov	r2,zero
    b53c:	f800283a 	ret
    b540:	22000117 	ldw	r8,4(r4)
    b544:	28800117 	ldw	r2,4(r5)
    b548:	40800326 	beq	r8,r2,b558 <__fpcmp_parts_d+0x60>
    b54c:	403ff726 	beq	r8,zero,b52c <__fpcmp_parts_d+0x34>
    b550:	00bfffc4 	movi	r2,-1
    b554:	f800283a 	ret
    b558:	20c00217 	ldw	r3,8(r4)
    b55c:	28800217 	ldw	r2,8(r5)
    b560:	10fffa16 	blt	r2,r3,b54c <__fpcmp_parts_d+0x54>
    b564:	18800916 	blt	r3,r2,b58c <__fpcmp_parts_d+0x94>
    b568:	21c00417 	ldw	r7,16(r4)
    b56c:	28c00417 	ldw	r3,16(r5)
    b570:	21800317 	ldw	r6,12(r4)
    b574:	28800317 	ldw	r2,12(r5)
    b578:	19fff436 	bltu	r3,r7,b54c <__fpcmp_parts_d+0x54>
    b57c:	38c00526 	beq	r7,r3,b594 <__fpcmp_parts_d+0x9c>
    b580:	38c00236 	bltu	r7,r3,b58c <__fpcmp_parts_d+0x94>
    b584:	19ffec1e 	bne	r3,r7,b538 <__fpcmp_parts_d+0x40>
    b588:	30bfeb2e 	bgeu	r6,r2,b538 <__fpcmp_parts_d+0x40>
    b58c:	403fe71e 	bne	r8,zero,b52c <__fpcmp_parts_d+0x34>
    b590:	003fef06 	br	b550 <__fpcmp_parts_d+0x58>
    b594:	11bffa2e 	bgeu	r2,r6,b580 <__fpcmp_parts_d+0x88>
    b598:	403fe426 	beq	r8,zero,b52c <__fpcmp_parts_d+0x34>
    b59c:	003fec06 	br	b550 <__fpcmp_parts_d+0x58>
    b5a0:	28800117 	ldw	r2,4(r5)
    b5a4:	103fe11e 	bne	r2,zero,b52c <__fpcmp_parts_d+0x34>
    b5a8:	003fe906 	br	b550 <__fpcmp_parts_d+0x58>
    b5ac:	11bfdd1e 	bne	r2,r6,b524 <__fpcmp_parts_d+0x2c>
    b5b0:	28c00117 	ldw	r3,4(r5)
    b5b4:	20800117 	ldw	r2,4(r4)
    b5b8:	1885c83a 	sub	r2,r3,r2
    b5bc:	f800283a 	ret

0000b5c0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b5c0:	defff804 	addi	sp,sp,-32
    b5c4:	dfc00715 	stw	ra,28(sp)
    b5c8:	df000615 	stw	fp,24(sp)
    b5cc:	df000604 	addi	fp,sp,24
    b5d0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b5d4:	e0bffc17 	ldw	r2,-16(fp)
    b5d8:	1004803a 	cmplt	r2,r2,zero
    b5dc:	1000091e 	bne	r2,zero,b604 <close+0x44>
    b5e0:	e13ffc17 	ldw	r4,-16(fp)
    b5e4:	01400304 	movi	r5,12
    b5e8:	0001ca00 	call	1ca0 <__mulsi3>
    b5ec:	1007883a 	mov	r3,r2
    b5f0:	00800074 	movhi	r2,1
    b5f4:	10bb5804 	addi	r2,r2,-4768
    b5f8:	1887883a 	add	r3,r3,r2
    b5fc:	e0ffff15 	stw	r3,-4(fp)
    b600:	00000106 	br	b608 <close+0x48>
    b604:	e03fff15 	stw	zero,-4(fp)
    b608:	e0bfff17 	ldw	r2,-4(fp)
    b60c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b610:	e0bffb17 	ldw	r2,-20(fp)
    b614:	1005003a 	cmpeq	r2,r2,zero
    b618:	10001d1e 	bne	r2,zero,b690 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b61c:	e0bffb17 	ldw	r2,-20(fp)
    b620:	10800017 	ldw	r2,0(r2)
    b624:	10800417 	ldw	r2,16(r2)
    b628:	1005003a 	cmpeq	r2,r2,zero
    b62c:	1000071e 	bne	r2,zero,b64c <close+0x8c>
    b630:	e0bffb17 	ldw	r2,-20(fp)
    b634:	10800017 	ldw	r2,0(r2)
    b638:	10800417 	ldw	r2,16(r2)
    b63c:	e13ffb17 	ldw	r4,-20(fp)
    b640:	103ee83a 	callr	r2
    b644:	e0bffe15 	stw	r2,-8(fp)
    b648:	00000106 	br	b650 <close+0x90>
    b64c:	e03ffe15 	stw	zero,-8(fp)
    b650:	e0bffe17 	ldw	r2,-8(fp)
    b654:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b658:	e13ffc17 	ldw	r4,-16(fp)
    b65c:	000c0e40 	call	c0e4 <alt_release_fd>
    if (rval < 0)
    b660:	e0bffa17 	ldw	r2,-24(fp)
    b664:	1004403a 	cmpge	r2,r2,zero
    b668:	1000071e 	bne	r2,zero,b688 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    b66c:	000b6c00 	call	b6c0 <alt_get_errno>
    b670:	e0fffa17 	ldw	r3,-24(fp)
    b674:	00c7c83a 	sub	r3,zero,r3
    b678:	10c00015 	stw	r3,0(r2)
      return -1;
    b67c:	00bfffc4 	movi	r2,-1
    b680:	e0bffd15 	stw	r2,-12(fp)
    b684:	00000806 	br	b6a8 <close+0xe8>
    }
    return 0;
    b688:	e03ffd15 	stw	zero,-12(fp)
    b68c:	00000606 	br	b6a8 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b690:	000b6c00 	call	b6c0 <alt_get_errno>
    b694:	1007883a 	mov	r3,r2
    b698:	00801444 	movi	r2,81
    b69c:	18800015 	stw	r2,0(r3)
    return -1;
    b6a0:	00bfffc4 	movi	r2,-1
    b6a4:	e0bffd15 	stw	r2,-12(fp)
    b6a8:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b6ac:	e037883a 	mov	sp,fp
    b6b0:	dfc00117 	ldw	ra,4(sp)
    b6b4:	df000017 	ldw	fp,0(sp)
    b6b8:	dec00204 	addi	sp,sp,8
    b6bc:	f800283a 	ret

0000b6c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6c0:	defffd04 	addi	sp,sp,-12
    b6c4:	dfc00215 	stw	ra,8(sp)
    b6c8:	df000115 	stw	fp,4(sp)
    b6cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6d0:	00800074 	movhi	r2,1
    b6d4:	10bfdd04 	addi	r2,r2,-140
    b6d8:	10800017 	ldw	r2,0(r2)
    b6dc:	1005003a 	cmpeq	r2,r2,zero
    b6e0:	1000061e 	bne	r2,zero,b6fc <alt_get_errno+0x3c>
    b6e4:	00800074 	movhi	r2,1
    b6e8:	10bfdd04 	addi	r2,r2,-140
    b6ec:	10800017 	ldw	r2,0(r2)
    b6f0:	103ee83a 	callr	r2
    b6f4:	e0bfff15 	stw	r2,-4(fp)
    b6f8:	00000306 	br	b708 <alt_get_errno+0x48>
    b6fc:	00800074 	movhi	r2,1
    b700:	10868404 	addi	r2,r2,6672
    b704:	e0bfff15 	stw	r2,-4(fp)
    b708:	e0bfff17 	ldw	r2,-4(fp)
}
    b70c:	e037883a 	mov	sp,fp
    b710:	dfc00117 	ldw	ra,4(sp)
    b714:	df000017 	ldw	fp,0(sp)
    b718:	dec00204 	addi	sp,sp,8
    b71c:	f800283a 	ret

0000b720 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b720:	defffc04 	addi	sp,sp,-16
    b724:	df000315 	stw	fp,12(sp)
    b728:	df000304 	addi	fp,sp,12
    b72c:	e13ffd15 	stw	r4,-12(fp)
    b730:	e17ffe15 	stw	r5,-8(fp)
    b734:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b738:	e0bfff17 	ldw	r2,-4(fp)
}
    b73c:	e037883a 	mov	sp,fp
    b740:	df000017 	ldw	fp,0(sp)
    b744:	dec00104 	addi	sp,sp,4
    b748:	f800283a 	ret

0000b74c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b74c:	defff904 	addi	sp,sp,-28
    b750:	dfc00615 	stw	ra,24(sp)
    b754:	df000515 	stw	fp,20(sp)
    b758:	df000504 	addi	fp,sp,20
    b75c:	e13ffc15 	stw	r4,-16(fp)
    b760:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b764:	e0bffc17 	ldw	r2,-16(fp)
    b768:	1004803a 	cmplt	r2,r2,zero
    b76c:	1000091e 	bne	r2,zero,b794 <fstat+0x48>
    b770:	e13ffc17 	ldw	r4,-16(fp)
    b774:	01400304 	movi	r5,12
    b778:	0001ca00 	call	1ca0 <__mulsi3>
    b77c:	1007883a 	mov	r3,r2
    b780:	00800074 	movhi	r2,1
    b784:	10bb5804 	addi	r2,r2,-4768
    b788:	1887883a 	add	r3,r3,r2
    b78c:	e0ffff15 	stw	r3,-4(fp)
    b790:	00000106 	br	b798 <fstat+0x4c>
    b794:	e03fff15 	stw	zero,-4(fp)
    b798:	e0bfff17 	ldw	r2,-4(fp)
    b79c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b7a0:	e0bffb17 	ldw	r2,-20(fp)
    b7a4:	1005003a 	cmpeq	r2,r2,zero
    b7a8:	1000121e 	bne	r2,zero,b7f4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b7ac:	e0bffb17 	ldw	r2,-20(fp)
    b7b0:	10800017 	ldw	r2,0(r2)
    b7b4:	10800817 	ldw	r2,32(r2)
    b7b8:	1005003a 	cmpeq	r2,r2,zero
    b7bc:	1000081e 	bne	r2,zero,b7e0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    b7c0:	e0bffb17 	ldw	r2,-20(fp)
    b7c4:	10800017 	ldw	r2,0(r2)
    b7c8:	10800817 	ldw	r2,32(r2)
    b7cc:	e13ffb17 	ldw	r4,-20(fp)
    b7d0:	e17ffd17 	ldw	r5,-12(fp)
    b7d4:	103ee83a 	callr	r2
    b7d8:	e0bffe15 	stw	r2,-8(fp)
    b7dc:	00000b06 	br	b80c <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b7e0:	e0fffd17 	ldw	r3,-12(fp)
    b7e4:	00880004 	movi	r2,8192
    b7e8:	18800115 	stw	r2,4(r3)
      return 0;
    b7ec:	e03ffe15 	stw	zero,-8(fp)
    b7f0:	00000606 	br	b80c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b7f4:	000b8240 	call	b824 <alt_get_errno>
    b7f8:	1007883a 	mov	r3,r2
    b7fc:	00801444 	movi	r2,81
    b800:	18800015 	stw	r2,0(r3)
    return -1;
    b804:	00bfffc4 	movi	r2,-1
    b808:	e0bffe15 	stw	r2,-8(fp)
    b80c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b810:	e037883a 	mov	sp,fp
    b814:	dfc00117 	ldw	ra,4(sp)
    b818:	df000017 	ldw	fp,0(sp)
    b81c:	dec00204 	addi	sp,sp,8
    b820:	f800283a 	ret

0000b824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b824:	defffd04 	addi	sp,sp,-12
    b828:	dfc00215 	stw	ra,8(sp)
    b82c:	df000115 	stw	fp,4(sp)
    b830:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b834:	00800074 	movhi	r2,1
    b838:	10bfdd04 	addi	r2,r2,-140
    b83c:	10800017 	ldw	r2,0(r2)
    b840:	1005003a 	cmpeq	r2,r2,zero
    b844:	1000061e 	bne	r2,zero,b860 <alt_get_errno+0x3c>
    b848:	00800074 	movhi	r2,1
    b84c:	10bfdd04 	addi	r2,r2,-140
    b850:	10800017 	ldw	r2,0(r2)
    b854:	103ee83a 	callr	r2
    b858:	e0bfff15 	stw	r2,-4(fp)
    b85c:	00000306 	br	b86c <alt_get_errno+0x48>
    b860:	00800074 	movhi	r2,1
    b864:	10868404 	addi	r2,r2,6672
    b868:	e0bfff15 	stw	r2,-4(fp)
    b86c:	e0bfff17 	ldw	r2,-4(fp)
}
    b870:	e037883a 	mov	sp,fp
    b874:	dfc00117 	ldw	ra,4(sp)
    b878:	df000017 	ldw	fp,0(sp)
    b87c:	dec00204 	addi	sp,sp,8
    b880:	f800283a 	ret

0000b884 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    b884:	defff904 	addi	sp,sp,-28
    b888:	dfc00615 	stw	ra,24(sp)
    b88c:	df000515 	stw	fp,20(sp)
    b890:	df000504 	addi	fp,sp,20
    b894:	e13ffc15 	stw	r4,-16(fp)
    b898:	e17ffd15 	stw	r5,-12(fp)
    b89c:	e1bffe15 	stw	r6,-8(fp)
    b8a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    b8a4:	e0800217 	ldw	r2,8(fp)
    b8a8:	d8800015 	stw	r2,0(sp)
    b8ac:	e13ffc17 	ldw	r4,-16(fp)
    b8b0:	e17ffd17 	ldw	r5,-12(fp)
    b8b4:	e1bffe17 	ldw	r6,-8(fp)
    b8b8:	e1ffff17 	ldw	r7,-4(fp)
    b8bc:	000ba580 	call	ba58 <alt_iic_isr_register>
}  
    b8c0:	e037883a 	mov	sp,fp
    b8c4:	dfc00117 	ldw	ra,4(sp)
    b8c8:	df000017 	ldw	fp,0(sp)
    b8cc:	dec00204 	addi	sp,sp,8
    b8d0:	f800283a 	ret

0000b8d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    b8d4:	defff904 	addi	sp,sp,-28
    b8d8:	df000615 	stw	fp,24(sp)
    b8dc:	df000604 	addi	fp,sp,24
    b8e0:	e13ffe15 	stw	r4,-8(fp)
    b8e4:	e17fff15 	stw	r5,-4(fp)
    b8e8:	e0bfff17 	ldw	r2,-4(fp)
    b8ec:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b8f0:	0005303a 	rdctl	r2,status
    b8f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b8f8:	e0fffb17 	ldw	r3,-20(fp)
    b8fc:	00bfff84 	movi	r2,-2
    b900:	1884703a 	and	r2,r3,r2
    b904:	1001703a 	wrctl	status,r2
  
  return context;
    b908:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b90c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    b910:	e0fffc17 	ldw	r3,-16(fp)
    b914:	00800044 	movi	r2,1
    b918:	10c4983a 	sll	r2,r2,r3
    b91c:	1007883a 	mov	r3,r2
    b920:	00800074 	movhi	r2,1
    b924:	10868504 	addi	r2,r2,6676
    b928:	10800017 	ldw	r2,0(r2)
    b92c:	1886b03a 	or	r3,r3,r2
    b930:	00800074 	movhi	r2,1
    b934:	10868504 	addi	r2,r2,6676
    b938:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b93c:	00800074 	movhi	r2,1
    b940:	10868504 	addi	r2,r2,6676
    b944:	10800017 	ldw	r2,0(r2)
    b948:	100170fa 	wrctl	ienable,r2
    b94c:	e0bffd17 	ldw	r2,-12(fp)
    b950:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b954:	e0bffa17 	ldw	r2,-24(fp)
    b958:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b95c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    b960:	e037883a 	mov	sp,fp
    b964:	df000017 	ldw	fp,0(sp)
    b968:	dec00104 	addi	sp,sp,4
    b96c:	f800283a 	ret

0000b970 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    b970:	defff904 	addi	sp,sp,-28
    b974:	df000615 	stw	fp,24(sp)
    b978:	df000604 	addi	fp,sp,24
    b97c:	e13ffe15 	stw	r4,-8(fp)
    b980:	e17fff15 	stw	r5,-4(fp)
    b984:	e0bfff17 	ldw	r2,-4(fp)
    b988:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b98c:	0005303a 	rdctl	r2,status
    b990:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b994:	e0fffb17 	ldw	r3,-20(fp)
    b998:	00bfff84 	movi	r2,-2
    b99c:	1884703a 	and	r2,r3,r2
    b9a0:	1001703a 	wrctl	status,r2
  
  return context;
    b9a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    b9a8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    b9ac:	e0fffc17 	ldw	r3,-16(fp)
    b9b0:	00800044 	movi	r2,1
    b9b4:	10c4983a 	sll	r2,r2,r3
    b9b8:	0084303a 	nor	r2,zero,r2
    b9bc:	1007883a 	mov	r3,r2
    b9c0:	00800074 	movhi	r2,1
    b9c4:	10868504 	addi	r2,r2,6676
    b9c8:	10800017 	ldw	r2,0(r2)
    b9cc:	1886703a 	and	r3,r3,r2
    b9d0:	00800074 	movhi	r2,1
    b9d4:	10868504 	addi	r2,r2,6676
    b9d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    b9dc:	00800074 	movhi	r2,1
    b9e0:	10868504 	addi	r2,r2,6676
    b9e4:	10800017 	ldw	r2,0(r2)
    b9e8:	100170fa 	wrctl	ienable,r2
    b9ec:	e0bffd17 	ldw	r2,-12(fp)
    b9f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b9f4:	e0bffa17 	ldw	r2,-24(fp)
    b9f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    b9fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    ba00:	e037883a 	mov	sp,fp
    ba04:	df000017 	ldw	fp,0(sp)
    ba08:	dec00104 	addi	sp,sp,4
    ba0c:	f800283a 	ret

0000ba10 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ba10:	defffc04 	addi	sp,sp,-16
    ba14:	df000315 	stw	fp,12(sp)
    ba18:	df000304 	addi	fp,sp,12
    ba1c:	e13ffe15 	stw	r4,-8(fp)
    ba20:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ba24:	000530fa 	rdctl	r2,ienable
    ba28:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ba2c:	e0ffff17 	ldw	r3,-4(fp)
    ba30:	00800044 	movi	r2,1
    ba34:	10c4983a 	sll	r2,r2,r3
    ba38:	1007883a 	mov	r3,r2
    ba3c:	e0bffd17 	ldw	r2,-12(fp)
    ba40:	1884703a 	and	r2,r3,r2
    ba44:	1004c03a 	cmpne	r2,r2,zero
}
    ba48:	e037883a 	mov	sp,fp
    ba4c:	df000017 	ldw	fp,0(sp)
    ba50:	dec00104 	addi	sp,sp,4
    ba54:	f800283a 	ret

0000ba58 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ba58:	defff404 	addi	sp,sp,-48
    ba5c:	dfc00b15 	stw	ra,44(sp)
    ba60:	df000a15 	stw	fp,40(sp)
    ba64:	df000a04 	addi	fp,sp,40
    ba68:	e13ffb15 	stw	r4,-20(fp)
    ba6c:	e17ffc15 	stw	r5,-16(fp)
    ba70:	e1bffd15 	stw	r6,-12(fp)
    ba74:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    ba78:	00bffa84 	movi	r2,-22
    ba7c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ba80:	e0bffc17 	ldw	r2,-16(fp)
    ba84:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ba88:	e0bff917 	ldw	r2,-28(fp)
    ba8c:	10800808 	cmpgei	r2,r2,32
    ba90:	1000291e 	bne	r2,zero,bb38 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba94:	0005303a 	rdctl	r2,status
    ba98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba9c:	e0fff717 	ldw	r3,-36(fp)
    baa0:	00bfff84 	movi	r2,-2
    baa4:	1884703a 	and	r2,r3,r2
    baa8:	1001703a 	wrctl	status,r2
  
  return context;
    baac:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bab0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    bab4:	e0bff917 	ldw	r2,-28(fp)
    bab8:	00c00274 	movhi	r3,9
    babc:	18c49504 	addi	r3,r3,4692
    bac0:	100490fa 	slli	r2,r2,3
    bac4:	10c7883a 	add	r3,r2,r3
    bac8:	e0bffd17 	ldw	r2,-12(fp)
    bacc:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    bad0:	e0bff917 	ldw	r2,-28(fp)
    bad4:	00c00274 	movhi	r3,9
    bad8:	18c49504 	addi	r3,r3,4692
    badc:	100490fa 	slli	r2,r2,3
    bae0:	10c5883a 	add	r2,r2,r3
    bae4:	10c00104 	addi	r3,r2,4
    bae8:	e0bffe17 	ldw	r2,-8(fp)
    baec:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    baf0:	e0bffd17 	ldw	r2,-12(fp)
    baf4:	1005003a 	cmpeq	r2,r2,zero
    baf8:	1000051e 	bne	r2,zero,bb10 <alt_iic_isr_register+0xb8>
    bafc:	e17ff917 	ldw	r5,-28(fp)
    bb00:	e13ffb17 	ldw	r4,-20(fp)
    bb04:	000b8d40 	call	b8d4 <alt_ic_irq_enable>
    bb08:	e0bfff15 	stw	r2,-4(fp)
    bb0c:	00000406 	br	bb20 <alt_iic_isr_register+0xc8>
    bb10:	e17ff917 	ldw	r5,-28(fp)
    bb14:	e13ffb17 	ldw	r4,-20(fp)
    bb18:	000b9700 	call	b970 <alt_ic_irq_disable>
    bb1c:	e0bfff15 	stw	r2,-4(fp)
    bb20:	e0bfff17 	ldw	r2,-4(fp)
    bb24:	e0bffa15 	stw	r2,-24(fp)
    bb28:	e0bff817 	ldw	r2,-32(fp)
    bb2c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb30:	e0bff617 	ldw	r2,-40(fp)
    bb34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bb38:	e0bffa17 	ldw	r2,-24(fp)
}
    bb3c:	e037883a 	mov	sp,fp
    bb40:	dfc00117 	ldw	ra,4(sp)
    bb44:	df000017 	ldw	fp,0(sp)
    bb48:	dec00204 	addi	sp,sp,8
    bb4c:	f800283a 	ret

0000bb50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    bb50:	deffeb04 	addi	sp,sp,-84
    bb54:	dfc01415 	stw	ra,80(sp)
    bb58:	df001315 	stw	fp,76(sp)
    bb5c:	df001304 	addi	fp,sp,76
    bb60:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bb64:	e0bffd17 	ldw	r2,-12(fp)
    bb68:	1004803a 	cmplt	r2,r2,zero
    bb6c:	1000091e 	bne	r2,zero,bb94 <isatty+0x44>
    bb70:	e13ffd17 	ldw	r4,-12(fp)
    bb74:	01400304 	movi	r5,12
    bb78:	0001ca00 	call	1ca0 <__mulsi3>
    bb7c:	1007883a 	mov	r3,r2
    bb80:	00800074 	movhi	r2,1
    bb84:	10bb5804 	addi	r2,r2,-4768
    bb88:	1887883a 	add	r3,r3,r2
    bb8c:	e0ffff15 	stw	r3,-4(fp)
    bb90:	00000106 	br	bb98 <isatty+0x48>
    bb94:	e03fff15 	stw	zero,-4(fp)
    bb98:	e0bfff17 	ldw	r2,-4(fp)
    bb9c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    bba0:	e0bfed17 	ldw	r2,-76(fp)
    bba4:	1005003a 	cmpeq	r2,r2,zero
    bba8:	10000f1e 	bne	r2,zero,bbe8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    bbac:	e0bfed17 	ldw	r2,-76(fp)
    bbb0:	10800017 	ldw	r2,0(r2)
    bbb4:	10800817 	ldw	r2,32(r2)
    bbb8:	1004c03a 	cmpne	r2,r2,zero
    bbbc:	1000031e 	bne	r2,zero,bbcc <isatty+0x7c>
    {
      return 1;
    bbc0:	00800044 	movi	r2,1
    bbc4:	e0bffe15 	stw	r2,-8(fp)
    bbc8:	00000c06 	br	bbfc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    bbcc:	e17fee04 	addi	r5,fp,-72
    bbd0:	e13ffd17 	ldw	r4,-12(fp)
    bbd4:	000b74c0 	call	b74c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    bbd8:	e0bfef17 	ldw	r2,-68(fp)
    bbdc:	10880020 	cmpeqi	r2,r2,8192
    bbe0:	e0bffe15 	stw	r2,-8(fp)
    bbe4:	00000506 	br	bbfc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    bbe8:	000bc140 	call	bc14 <alt_get_errno>
    bbec:	1007883a 	mov	r3,r2
    bbf0:	00801444 	movi	r2,81
    bbf4:	18800015 	stw	r2,0(r3)
    return 0;
    bbf8:	e03ffe15 	stw	zero,-8(fp)
    bbfc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    bc00:	e037883a 	mov	sp,fp
    bc04:	dfc00117 	ldw	ra,4(sp)
    bc08:	df000017 	ldw	fp,0(sp)
    bc0c:	dec00204 	addi	sp,sp,8
    bc10:	f800283a 	ret

0000bc14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bc14:	defffd04 	addi	sp,sp,-12
    bc18:	dfc00215 	stw	ra,8(sp)
    bc1c:	df000115 	stw	fp,4(sp)
    bc20:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bc24:	00800074 	movhi	r2,1
    bc28:	10bfdd04 	addi	r2,r2,-140
    bc2c:	10800017 	ldw	r2,0(r2)
    bc30:	1005003a 	cmpeq	r2,r2,zero
    bc34:	1000061e 	bne	r2,zero,bc50 <alt_get_errno+0x3c>
    bc38:	00800074 	movhi	r2,1
    bc3c:	10bfdd04 	addi	r2,r2,-140
    bc40:	10800017 	ldw	r2,0(r2)
    bc44:	103ee83a 	callr	r2
    bc48:	e0bfff15 	stw	r2,-4(fp)
    bc4c:	00000306 	br	bc5c <alt_get_errno+0x48>
    bc50:	00800074 	movhi	r2,1
    bc54:	10868404 	addi	r2,r2,6672
    bc58:	e0bfff15 	stw	r2,-4(fp)
    bc5c:	e0bfff17 	ldw	r2,-4(fp)
}
    bc60:	e037883a 	mov	sp,fp
    bc64:	dfc00117 	ldw	ra,4(sp)
    bc68:	df000017 	ldw	fp,0(sp)
    bc6c:	dec00204 	addi	sp,sp,8
    bc70:	f800283a 	ret

0000bc74 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    bc74:	defffe04 	addi	sp,sp,-8
    bc78:	dfc00115 	stw	ra,4(sp)
    bc7c:	df000015 	stw	fp,0(sp)
    bc80:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    bc84:	01000074 	movhi	r4,1
    bc88:	213fe204 	addi	r4,r4,-120
    bc8c:	01400074 	movhi	r5,1
    bc90:	29794904 	addi	r5,r5,-6876
    bc94:	01800074 	movhi	r6,1
    bc98:	31bfe204 	addi	r6,r6,-120
    bc9c:	000bcf40 	call	bcf4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    bca0:	01000034 	movhi	r4,0
    bca4:	21000804 	addi	r4,r4,32
    bca8:	01400034 	movhi	r5,0
    bcac:	29400804 	addi	r5,r5,32
    bcb0:	01800034 	movhi	r6,0
    bcb4:	31806d04 	addi	r6,r6,436
    bcb8:	000bcf40 	call	bcf4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    bcbc:	01000074 	movhi	r4,1
    bcc0:	21381d04 	addi	r4,r4,-8076
    bcc4:	01400074 	movhi	r5,1
    bcc8:	29781d04 	addi	r5,r5,-8076
    bccc:	01800074 	movhi	r6,1
    bcd0:	31b94904 	addi	r6,r6,-6876
    bcd4:	000bcf40 	call	bcf4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    bcd8:	000d1d80 	call	d1d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    bcdc:	000d3d00 	call	d3d0 <alt_icache_flush_all>
}
    bce0:	e037883a 	mov	sp,fp
    bce4:	dfc00117 	ldw	ra,4(sp)
    bce8:	df000017 	ldw	fp,0(sp)
    bcec:	dec00204 	addi	sp,sp,8
    bcf0:	f800283a 	ret

0000bcf4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    bcf4:	defffc04 	addi	sp,sp,-16
    bcf8:	df000315 	stw	fp,12(sp)
    bcfc:	df000304 	addi	fp,sp,12
    bd00:	e13ffd15 	stw	r4,-12(fp)
    bd04:	e17ffe15 	stw	r5,-8(fp)
    bd08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    bd0c:	e0fffe17 	ldw	r3,-8(fp)
    bd10:	e0bffd17 	ldw	r2,-12(fp)
    bd14:	18800e26 	beq	r3,r2,bd50 <alt_load_section+0x5c>
  {
    while( to != end )
    bd18:	00000a06 	br	bd44 <alt_load_section+0x50>
    {
      *to++ = *from++;
    bd1c:	e0bffd17 	ldw	r2,-12(fp)
    bd20:	10c00017 	ldw	r3,0(r2)
    bd24:	e0bffe17 	ldw	r2,-8(fp)
    bd28:	10c00015 	stw	r3,0(r2)
    bd2c:	e0bffe17 	ldw	r2,-8(fp)
    bd30:	10800104 	addi	r2,r2,4
    bd34:	e0bffe15 	stw	r2,-8(fp)
    bd38:	e0bffd17 	ldw	r2,-12(fp)
    bd3c:	10800104 	addi	r2,r2,4
    bd40:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    bd44:	e0fffe17 	ldw	r3,-8(fp)
    bd48:	e0bfff17 	ldw	r2,-4(fp)
    bd4c:	18bff31e 	bne	r3,r2,bd1c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    bd50:	e037883a 	mov	sp,fp
    bd54:	df000017 	ldw	fp,0(sp)
    bd58:	dec00104 	addi	sp,sp,4
    bd5c:	f800283a 	ret

0000bd60 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    bd60:	defff804 	addi	sp,sp,-32
    bd64:	dfc00715 	stw	ra,28(sp)
    bd68:	df000615 	stw	fp,24(sp)
    bd6c:	df000604 	addi	fp,sp,24
    bd70:	e13ffc15 	stw	r4,-16(fp)
    bd74:	e17ffd15 	stw	r5,-12(fp)
    bd78:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    bd7c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bd80:	e0bffc17 	ldw	r2,-16(fp)
    bd84:	1004803a 	cmplt	r2,r2,zero
    bd88:	1000091e 	bne	r2,zero,bdb0 <lseek+0x50>
    bd8c:	e13ffc17 	ldw	r4,-16(fp)
    bd90:	01400304 	movi	r5,12
    bd94:	0001ca00 	call	1ca0 <__mulsi3>
    bd98:	1007883a 	mov	r3,r2
    bd9c:	00800074 	movhi	r2,1
    bda0:	10bb5804 	addi	r2,r2,-4768
    bda4:	1887883a 	add	r3,r3,r2
    bda8:	e0ffff15 	stw	r3,-4(fp)
    bdac:	00000106 	br	bdb4 <lseek+0x54>
    bdb0:	e03fff15 	stw	zero,-4(fp)
    bdb4:	e0bfff17 	ldw	r2,-4(fp)
    bdb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    bdbc:	e0bffb17 	ldw	r2,-20(fp)
    bdc0:	1005003a 	cmpeq	r2,r2,zero
    bdc4:	1000111e 	bne	r2,zero,be0c <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    bdc8:	e0bffb17 	ldw	r2,-20(fp)
    bdcc:	10800017 	ldw	r2,0(r2)
    bdd0:	10800717 	ldw	r2,28(r2)
    bdd4:	1005003a 	cmpeq	r2,r2,zero
    bdd8:	1000091e 	bne	r2,zero,be00 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    bddc:	e0bffb17 	ldw	r2,-20(fp)
    bde0:	10800017 	ldw	r2,0(r2)
    bde4:	10800717 	ldw	r2,28(r2)
    bde8:	e13ffb17 	ldw	r4,-20(fp)
    bdec:	e17ffd17 	ldw	r5,-12(fp)
    bdf0:	e1bffe17 	ldw	r6,-8(fp)
    bdf4:	103ee83a 	callr	r2
    bdf8:	e0bffa15 	stw	r2,-24(fp)
    bdfc:	00000506 	br	be14 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    be00:	00bfde84 	movi	r2,-134
    be04:	e0bffa15 	stw	r2,-24(fp)
    be08:	00000206 	br	be14 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    be0c:	00bfebc4 	movi	r2,-81
    be10:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    be14:	e0bffa17 	ldw	r2,-24(fp)
    be18:	1004403a 	cmpge	r2,r2,zero
    be1c:	1000071e 	bne	r2,zero,be3c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    be20:	000be540 	call	be54 <alt_get_errno>
    be24:	1007883a 	mov	r3,r2
    be28:	e0bffa17 	ldw	r2,-24(fp)
    be2c:	0085c83a 	sub	r2,zero,r2
    be30:	18800015 	stw	r2,0(r3)
    rc = -1;
    be34:	00bfffc4 	movi	r2,-1
    be38:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    be3c:	e0bffa17 	ldw	r2,-24(fp)
}
    be40:	e037883a 	mov	sp,fp
    be44:	dfc00117 	ldw	ra,4(sp)
    be48:	df000017 	ldw	fp,0(sp)
    be4c:	dec00204 	addi	sp,sp,8
    be50:	f800283a 	ret

0000be54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    be54:	defffd04 	addi	sp,sp,-12
    be58:	dfc00215 	stw	ra,8(sp)
    be5c:	df000115 	stw	fp,4(sp)
    be60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    be64:	00800074 	movhi	r2,1
    be68:	10bfdd04 	addi	r2,r2,-140
    be6c:	10800017 	ldw	r2,0(r2)
    be70:	1005003a 	cmpeq	r2,r2,zero
    be74:	1000061e 	bne	r2,zero,be90 <alt_get_errno+0x3c>
    be78:	00800074 	movhi	r2,1
    be7c:	10bfdd04 	addi	r2,r2,-140
    be80:	10800017 	ldw	r2,0(r2)
    be84:	103ee83a 	callr	r2
    be88:	e0bfff15 	stw	r2,-4(fp)
    be8c:	00000306 	br	be9c <alt_get_errno+0x48>
    be90:	00800074 	movhi	r2,1
    be94:	10868404 	addi	r2,r2,6672
    be98:	e0bfff15 	stw	r2,-4(fp)
    be9c:	e0bfff17 	ldw	r2,-4(fp)
}
    bea0:	e037883a 	mov	sp,fp
    bea4:	dfc00117 	ldw	ra,4(sp)
    bea8:	df000017 	ldw	fp,0(sp)
    beac:	dec00204 	addi	sp,sp,8
    beb0:	f800283a 	ret

0000beb4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    beb4:	defffd04 	addi	sp,sp,-12
    beb8:	dfc00215 	stw	ra,8(sp)
    bebc:	df000115 	stw	fp,4(sp)
    bec0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    bec4:	0009883a 	mov	r4,zero
    bec8:	000c3cc0 	call	c3cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    becc:	000c4000 	call	c400 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    bed0:	01000074 	movhi	r4,1
    bed4:	21394104 	addi	r4,r4,-6908
    bed8:	01400074 	movhi	r5,1
    bedc:	29794104 	addi	r5,r5,-6908
    bee0:	01800074 	movhi	r6,1
    bee4:	31b94104 	addi	r6,r6,-6908
    bee8:	000d4c40 	call	d4c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    beec:	000d3080 	call	d308 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    bef0:	01000074 	movhi	r4,1
    bef4:	2134db04 	addi	r4,r4,-11412
    bef8:	000dc680 	call	dc68 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    befc:	d126b617 	ldw	r4,-25896(gp)
    bf00:	d166b717 	ldw	r5,-25892(gp)
    bf04:	d1a6b817 	ldw	r6,-25888(gp)
    bf08:	00009240 	call	924 <main>
    bf0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    bf10:	01000044 	movi	r4,1
    bf14:	000b5c00 	call	b5c0 <close>
  exit (result);
    bf18:	e13fff17 	ldw	r4,-4(fp)
    bf1c:	000dc7c0 	call	dc7c <exit>

0000bf20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    bf20:	defffe04 	addi	sp,sp,-8
    bf24:	df000115 	stw	fp,4(sp)
    bf28:	df000104 	addi	fp,sp,4
    bf2c:	e13fff15 	stw	r4,-4(fp)
}
    bf30:	e037883a 	mov	sp,fp
    bf34:	df000017 	ldw	fp,0(sp)
    bf38:	dec00104 	addi	sp,sp,4
    bf3c:	f800283a 	ret

0000bf40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    bf40:	defffe04 	addi	sp,sp,-8
    bf44:	df000115 	stw	fp,4(sp)
    bf48:	df000104 	addi	fp,sp,4
    bf4c:	e13fff15 	stw	r4,-4(fp)
}
    bf50:	e037883a 	mov	sp,fp
    bf54:	df000017 	ldw	fp,0(sp)
    bf58:	dec00104 	addi	sp,sp,4
    bf5c:	f800283a 	ret

0000bf60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    bf60:	defff704 	addi	sp,sp,-36
    bf64:	dfc00815 	stw	ra,32(sp)
    bf68:	df000715 	stw	fp,28(sp)
    bf6c:	df000704 	addi	fp,sp,28
    bf70:	e13ffb15 	stw	r4,-20(fp)
    bf74:	e17ffc15 	stw	r5,-16(fp)
    bf78:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bf7c:	e0bffb17 	ldw	r2,-20(fp)
    bf80:	1004803a 	cmplt	r2,r2,zero
    bf84:	1000091e 	bne	r2,zero,bfac <read+0x4c>
    bf88:	e13ffb17 	ldw	r4,-20(fp)
    bf8c:	01400304 	movi	r5,12
    bf90:	0001ca00 	call	1ca0 <__mulsi3>
    bf94:	1007883a 	mov	r3,r2
    bf98:	00800074 	movhi	r2,1
    bf9c:	10bb5804 	addi	r2,r2,-4768
    bfa0:	1887883a 	add	r3,r3,r2
    bfa4:	e0ffff15 	stw	r3,-4(fp)
    bfa8:	00000106 	br	bfb0 <read+0x50>
    bfac:	e03fff15 	stw	zero,-4(fp)
    bfb0:	e0bfff17 	ldw	r2,-4(fp)
    bfb4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bfb8:	e0bffa17 	ldw	r2,-24(fp)
    bfbc:	1005003a 	cmpeq	r2,r2,zero
    bfc0:	1000241e 	bne	r2,zero,c054 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    bfc4:	e0bffa17 	ldw	r2,-24(fp)
    bfc8:	10800217 	ldw	r2,8(r2)
    bfcc:	108000cc 	andi	r2,r2,3
    bfd0:	10800060 	cmpeqi	r2,r2,1
    bfd4:	10001a1e 	bne	r2,zero,c040 <read+0xe0>
    bfd8:	e0bffa17 	ldw	r2,-24(fp)
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	10800517 	ldw	r2,20(r2)
    bfe4:	1005003a 	cmpeq	r2,r2,zero
    bfe8:	1000151e 	bne	r2,zero,c040 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    bfec:	e0bffa17 	ldw	r2,-24(fp)
    bff0:	10800017 	ldw	r2,0(r2)
    bff4:	10800517 	ldw	r2,20(r2)
    bff8:	e17ffc17 	ldw	r5,-16(fp)
    bffc:	e1bffd17 	ldw	r6,-12(fp)
    c000:	e13ffa17 	ldw	r4,-24(fp)
    c004:	103ee83a 	callr	r2
    c008:	e0bff915 	stw	r2,-28(fp)
    c00c:	e0bff917 	ldw	r2,-28(fp)
    c010:	1004403a 	cmpge	r2,r2,zero
    c014:	1000071e 	bne	r2,zero,c034 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    c018:	000c0840 	call	c084 <alt_get_errno>
    c01c:	e0fff917 	ldw	r3,-28(fp)
    c020:	00c7c83a 	sub	r3,zero,r3
    c024:	10c00015 	stw	r3,0(r2)
          return -1;
    c028:	00bfffc4 	movi	r2,-1
    c02c:	e0bffe15 	stw	r2,-8(fp)
    c030:	00000e06 	br	c06c <read+0x10c>
        }
        return rval;
    c034:	e0bff917 	ldw	r2,-28(fp)
    c038:	e0bffe15 	stw	r2,-8(fp)
    c03c:	00000b06 	br	c06c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    c040:	000c0840 	call	c084 <alt_get_errno>
    c044:	1007883a 	mov	r3,r2
    c048:	00800344 	movi	r2,13
    c04c:	18800015 	stw	r2,0(r3)
    c050:	00000406 	br	c064 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    c054:	000c0840 	call	c084 <alt_get_errno>
    c058:	1007883a 	mov	r3,r2
    c05c:	00801444 	movi	r2,81
    c060:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c064:	00bfffc4 	movi	r2,-1
    c068:	e0bffe15 	stw	r2,-8(fp)
    c06c:	e0bffe17 	ldw	r2,-8(fp)
}
    c070:	e037883a 	mov	sp,fp
    c074:	dfc00117 	ldw	ra,4(sp)
    c078:	df000017 	ldw	fp,0(sp)
    c07c:	dec00204 	addi	sp,sp,8
    c080:	f800283a 	ret

0000c084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c084:	defffd04 	addi	sp,sp,-12
    c088:	dfc00215 	stw	ra,8(sp)
    c08c:	df000115 	stw	fp,4(sp)
    c090:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c094:	00800074 	movhi	r2,1
    c098:	10bfdd04 	addi	r2,r2,-140
    c09c:	10800017 	ldw	r2,0(r2)
    c0a0:	1005003a 	cmpeq	r2,r2,zero
    c0a4:	1000061e 	bne	r2,zero,c0c0 <alt_get_errno+0x3c>
    c0a8:	00800074 	movhi	r2,1
    c0ac:	10bfdd04 	addi	r2,r2,-140
    c0b0:	10800017 	ldw	r2,0(r2)
    c0b4:	103ee83a 	callr	r2
    c0b8:	e0bfff15 	stw	r2,-4(fp)
    c0bc:	00000306 	br	c0cc <alt_get_errno+0x48>
    c0c0:	00800074 	movhi	r2,1
    c0c4:	10868404 	addi	r2,r2,6672
    c0c8:	e0bfff15 	stw	r2,-4(fp)
    c0cc:	e0bfff17 	ldw	r2,-4(fp)
}
    c0d0:	e037883a 	mov	sp,fp
    c0d4:	dfc00117 	ldw	ra,4(sp)
    c0d8:	df000017 	ldw	fp,0(sp)
    c0dc:	dec00204 	addi	sp,sp,8
    c0e0:	f800283a 	ret

0000c0e4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    c0e4:	defffc04 	addi	sp,sp,-16
    c0e8:	dfc00315 	stw	ra,12(sp)
    c0ec:	df000215 	stw	fp,8(sp)
    c0f0:	dc000115 	stw	r16,4(sp)
    c0f4:	df000104 	addi	fp,sp,4
    c0f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    c0fc:	e0bfff17 	ldw	r2,-4(fp)
    c100:	108000d0 	cmplti	r2,r2,3
    c104:	10000f1e 	bne	r2,zero,c144 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    c108:	e13fff17 	ldw	r4,-4(fp)
    c10c:	04000074 	movhi	r16,1
    c110:	843b5804 	addi	r16,r16,-4768
    c114:	01400304 	movi	r5,12
    c118:	0001ca00 	call	1ca0 <__mulsi3>
    c11c:	1405883a 	add	r2,r2,r16
    c120:	10800204 	addi	r2,r2,8
    c124:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    c128:	e13fff17 	ldw	r4,-4(fp)
    c12c:	04000074 	movhi	r16,1
    c130:	843b5804 	addi	r16,r16,-4768
    c134:	01400304 	movi	r5,12
    c138:	0001ca00 	call	1ca0 <__mulsi3>
    c13c:	1405883a 	add	r2,r2,r16
    c140:	10000015 	stw	zero,0(r2)
  }
}
    c144:	e037883a 	mov	sp,fp
    c148:	dfc00217 	ldw	ra,8(sp)
    c14c:	df000117 	ldw	fp,4(sp)
    c150:	dc000017 	ldw	r16,0(sp)
    c154:	dec00304 	addi	sp,sp,12
    c158:	f800283a 	ret

0000c15c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    c15c:	defff804 	addi	sp,sp,-32
    c160:	df000715 	stw	fp,28(sp)
    c164:	df000704 	addi	fp,sp,28
    c168:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c16c:	0005303a 	rdctl	r2,status
    c170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c174:	e0fffb17 	ldw	r3,-20(fp)
    c178:	00bfff84 	movi	r2,-2
    c17c:	1884703a 	and	r2,r3,r2
    c180:	1001703a 	wrctl	status,r2
  
  return context;
    c184:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    c188:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    c18c:	d0a00f17 	ldw	r2,-32708(gp)
    c190:	10c000c4 	addi	r3,r2,3
    c194:	00bfff04 	movi	r2,-4
    c198:	1884703a 	and	r2,r3,r2
    c19c:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    c1a0:	d0e00f17 	ldw	r3,-32708(gp)
    c1a4:	e0bffe17 	ldw	r2,-8(fp)
    c1a8:	1887883a 	add	r3,r3,r2
    c1ac:	00808034 	movhi	r2,512
    c1b0:	10800004 	addi	r2,r2,0
    c1b4:	10c0072e 	bgeu	r2,r3,c1d4 <sbrk+0x78>
    c1b8:	e0bffd17 	ldw	r2,-12(fp)
    c1bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c1c0:	e0bffa17 	ldw	r2,-24(fp)
    c1c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    c1c8:	00bfffc4 	movi	r2,-1
    c1cc:	e0bfff15 	stw	r2,-4(fp)
    c1d0:	00000c06 	br	c204 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    c1d4:	d0a00f17 	ldw	r2,-32708(gp)
    c1d8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    c1dc:	d0e00f17 	ldw	r3,-32708(gp)
    c1e0:	e0bffe17 	ldw	r2,-8(fp)
    c1e4:	1885883a 	add	r2,r3,r2
    c1e8:	d0a00f15 	stw	r2,-32708(gp)
    c1ec:	e0bffd17 	ldw	r2,-12(fp)
    c1f0:	e0bff915 	stw	r2,-28(fp)
    c1f4:	e0bff917 	ldw	r2,-28(fp)
    c1f8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    c1fc:	e0bffc17 	ldw	r2,-16(fp)
    c200:	e0bfff15 	stw	r2,-4(fp)
    c204:	e0bfff17 	ldw	r2,-4(fp)
} 
    c208:	e037883a 	mov	sp,fp
    c20c:	df000017 	ldw	fp,0(sp)
    c210:	dec00104 	addi	sp,sp,4
    c214:	f800283a 	ret

0000c218 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    c218:	defffd04 	addi	sp,sp,-12
    c21c:	dfc00215 	stw	ra,8(sp)
    c220:	df000115 	stw	fp,4(sp)
    c224:	df000104 	addi	fp,sp,4
    c228:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    c22c:	e13fff17 	ldw	r4,-4(fp)
    c230:	000d07c0 	call	d07c <alt_busy_sleep>
}
    c234:	e037883a 	mov	sp,fp
    c238:	dfc00117 	ldw	ra,4(sp)
    c23c:	df000017 	ldw	fp,0(sp)
    c240:	dec00204 	addi	sp,sp,8
    c244:	f800283a 	ret

0000c248 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    c248:	defff704 	addi	sp,sp,-36
    c24c:	dfc00815 	stw	ra,32(sp)
    c250:	df000715 	stw	fp,28(sp)
    c254:	df000704 	addi	fp,sp,28
    c258:	e13ffb15 	stw	r4,-20(fp)
    c25c:	e17ffc15 	stw	r5,-16(fp)
    c260:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    c264:	e0bffb17 	ldw	r2,-20(fp)
    c268:	1004803a 	cmplt	r2,r2,zero
    c26c:	1000091e 	bne	r2,zero,c294 <write+0x4c>
    c270:	e13ffb17 	ldw	r4,-20(fp)
    c274:	01400304 	movi	r5,12
    c278:	0001ca00 	call	1ca0 <__mulsi3>
    c27c:	1007883a 	mov	r3,r2
    c280:	00800074 	movhi	r2,1
    c284:	10bb5804 	addi	r2,r2,-4768
    c288:	1887883a 	add	r3,r3,r2
    c28c:	e0ffff15 	stw	r3,-4(fp)
    c290:	00000106 	br	c298 <write+0x50>
    c294:	e03fff15 	stw	zero,-4(fp)
    c298:	e0bfff17 	ldw	r2,-4(fp)
    c29c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    c2a0:	e0bffa17 	ldw	r2,-24(fp)
    c2a4:	1005003a 	cmpeq	r2,r2,zero
    c2a8:	1000241e 	bne	r2,zero,c33c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    c2ac:	e0bffa17 	ldw	r2,-24(fp)
    c2b0:	10800217 	ldw	r2,8(r2)
    c2b4:	108000cc 	andi	r2,r2,3
    c2b8:	1005003a 	cmpeq	r2,r2,zero
    c2bc:	10001a1e 	bne	r2,zero,c328 <write+0xe0>
    c2c0:	e0bffa17 	ldw	r2,-24(fp)
    c2c4:	10800017 	ldw	r2,0(r2)
    c2c8:	10800617 	ldw	r2,24(r2)
    c2cc:	1005003a 	cmpeq	r2,r2,zero
    c2d0:	1000151e 	bne	r2,zero,c328 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    c2d4:	e0bffa17 	ldw	r2,-24(fp)
    c2d8:	10800017 	ldw	r2,0(r2)
    c2dc:	10800617 	ldw	r2,24(r2)
    c2e0:	e17ffc17 	ldw	r5,-16(fp)
    c2e4:	e1bffd17 	ldw	r6,-12(fp)
    c2e8:	e13ffa17 	ldw	r4,-24(fp)
    c2ec:	103ee83a 	callr	r2
    c2f0:	e0bff915 	stw	r2,-28(fp)
    c2f4:	e0bff917 	ldw	r2,-28(fp)
    c2f8:	1004403a 	cmpge	r2,r2,zero
    c2fc:	1000071e 	bne	r2,zero,c31c <write+0xd4>
      {
        ALT_ERRNO = -rval;
    c300:	000c36c0 	call	c36c <alt_get_errno>
    c304:	e0fff917 	ldw	r3,-28(fp)
    c308:	00c7c83a 	sub	r3,zero,r3
    c30c:	10c00015 	stw	r3,0(r2)
        return -1;
    c310:	00bfffc4 	movi	r2,-1
    c314:	e0bffe15 	stw	r2,-8(fp)
    c318:	00000e06 	br	c354 <write+0x10c>
      }
      return rval;
    c31c:	e0bff917 	ldw	r2,-28(fp)
    c320:	e0bffe15 	stw	r2,-8(fp)
    c324:	00000b06 	br	c354 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    c328:	000c36c0 	call	c36c <alt_get_errno>
    c32c:	1007883a 	mov	r3,r2
    c330:	00800344 	movi	r2,13
    c334:	18800015 	stw	r2,0(r3)
    c338:	00000406 	br	c34c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    c33c:	000c36c0 	call	c36c <alt_get_errno>
    c340:	1007883a 	mov	r3,r2
    c344:	00801444 	movi	r2,81
    c348:	18800015 	stw	r2,0(r3)
  }
  return -1;
    c34c:	00bfffc4 	movi	r2,-1
    c350:	e0bffe15 	stw	r2,-8(fp)
    c354:	e0bffe17 	ldw	r2,-8(fp)
}
    c358:	e037883a 	mov	sp,fp
    c35c:	dfc00117 	ldw	ra,4(sp)
    c360:	df000017 	ldw	fp,0(sp)
    c364:	dec00204 	addi	sp,sp,8
    c368:	f800283a 	ret

0000c36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c36c:	defffd04 	addi	sp,sp,-12
    c370:	dfc00215 	stw	ra,8(sp)
    c374:	df000115 	stw	fp,4(sp)
    c378:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c37c:	00800074 	movhi	r2,1
    c380:	10bfdd04 	addi	r2,r2,-140
    c384:	10800017 	ldw	r2,0(r2)
    c388:	1005003a 	cmpeq	r2,r2,zero
    c38c:	1000061e 	bne	r2,zero,c3a8 <alt_get_errno+0x3c>
    c390:	00800074 	movhi	r2,1
    c394:	10bfdd04 	addi	r2,r2,-140
    c398:	10800017 	ldw	r2,0(r2)
    c39c:	103ee83a 	callr	r2
    c3a0:	e0bfff15 	stw	r2,-4(fp)
    c3a4:	00000306 	br	c3b4 <alt_get_errno+0x48>
    c3a8:	00800074 	movhi	r2,1
    c3ac:	10868404 	addi	r2,r2,6672
    c3b0:	e0bfff15 	stw	r2,-4(fp)
    c3b4:	e0bfff17 	ldw	r2,-4(fp)
}
    c3b8:	e037883a 	mov	sp,fp
    c3bc:	dfc00117 	ldw	ra,4(sp)
    c3c0:	df000017 	ldw	fp,0(sp)
    c3c4:	dec00204 	addi	sp,sp,8
    c3c8:	f800283a 	ret

0000c3cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    c3cc:	defffd04 	addi	sp,sp,-12
    c3d0:	dfc00215 	stw	ra,8(sp)
    c3d4:	df000115 	stw	fp,4(sp)
    c3d8:	df000104 	addi	fp,sp,4
    c3dc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    c3e0:	000d9c40 	call	d9c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    c3e4:	00800044 	movi	r2,1
    c3e8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    c3ec:	e037883a 	mov	sp,fp
    c3f0:	dfc00117 	ldw	ra,4(sp)
    c3f4:	df000017 	ldw	fp,0(sp)
    c3f8:	dec00204 	addi	sp,sp,8
    c3fc:	f800283a 	ret

0000c400 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    c400:	defffe04 	addi	sp,sp,-8
    c404:	dfc00115 	stw	ra,4(sp)
    c408:	df000015 	stw	fp,0(sp)
    c40c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    c410:	01000074 	movhi	r4,1
    c414:	213bc204 	addi	r4,r4,-4344
    c418:	000b883a 	mov	r5,zero
    c41c:	000d883a 	mov	r6,zero
    c420:	000c5c40 	call	c5c4 <altera_avalon_jtag_uart_init>
    c424:	01000074 	movhi	r4,1
    c428:	213bb804 	addi	r4,r4,-4384
    c42c:	000c4440 	call	c444 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
}
    c430:	e037883a 	mov	sp,fp
    c434:	dfc00117 	ldw	ra,4(sp)
    c438:	df000017 	ldw	fp,0(sp)
    c43c:	dec00204 	addi	sp,sp,8
    c440:	f800283a 	ret

0000c444 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    c444:	defffd04 	addi	sp,sp,-12
    c448:	dfc00215 	stw	ra,8(sp)
    c44c:	df000115 	stw	fp,4(sp)
    c450:	df000104 	addi	fp,sp,4
    c454:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    c458:	e13fff17 	ldw	r4,-4(fp)
    c45c:	01400074 	movhi	r5,1
    c460:	297fda04 	addi	r5,r5,-152
    c464:	000d1f40 	call	d1f4 <alt_dev_llist_insert>
}
    c468:	e037883a 	mov	sp,fp
    c46c:	dfc00117 	ldw	ra,4(sp)
    c470:	df000017 	ldw	fp,0(sp)
    c474:	dec00204 	addi	sp,sp,8
    c478:	f800283a 	ret

0000c47c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    c47c:	defffa04 	addi	sp,sp,-24
    c480:	dfc00515 	stw	ra,20(sp)
    c484:	df000415 	stw	fp,16(sp)
    c488:	df000404 	addi	fp,sp,16
    c48c:	e13ffd15 	stw	r4,-12(fp)
    c490:	e17ffe15 	stw	r5,-8(fp)
    c494:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c498:	e0bffd17 	ldw	r2,-12(fp)
    c49c:	10800017 	ldw	r2,0(r2)
    c4a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    c4a4:	e0bffc17 	ldw	r2,-16(fp)
    c4a8:	11000a04 	addi	r4,r2,40
    c4ac:	e0bffd17 	ldw	r2,-12(fp)
    c4b0:	11c00217 	ldw	r7,8(r2)
    c4b4:	e17ffe17 	ldw	r5,-8(fp)
    c4b8:	e1bfff17 	ldw	r6,-4(fp)
    c4bc:	000cac40 	call	cac4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    c4c0:	e037883a 	mov	sp,fp
    c4c4:	dfc00117 	ldw	ra,4(sp)
    c4c8:	df000017 	ldw	fp,0(sp)
    c4cc:	dec00204 	addi	sp,sp,8
    c4d0:	f800283a 	ret

0000c4d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    c4d4:	defffa04 	addi	sp,sp,-24
    c4d8:	dfc00515 	stw	ra,20(sp)
    c4dc:	df000415 	stw	fp,16(sp)
    c4e0:	df000404 	addi	fp,sp,16
    c4e4:	e13ffd15 	stw	r4,-12(fp)
    c4e8:	e17ffe15 	stw	r5,-8(fp)
    c4ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c4f0:	e0bffd17 	ldw	r2,-12(fp)
    c4f4:	10800017 	ldw	r2,0(r2)
    c4f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    c4fc:	e0bffc17 	ldw	r2,-16(fp)
    c500:	11000a04 	addi	r4,r2,40
    c504:	e0bffd17 	ldw	r2,-12(fp)
    c508:	11c00217 	ldw	r7,8(r2)
    c50c:	e17ffe17 	ldw	r5,-8(fp)
    c510:	e1bfff17 	ldw	r6,-4(fp)
    c514:	000cce80 	call	cce8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    c518:	e037883a 	mov	sp,fp
    c51c:	dfc00117 	ldw	ra,4(sp)
    c520:	df000017 	ldw	fp,0(sp)
    c524:	dec00204 	addi	sp,sp,8
    c528:	f800283a 	ret

0000c52c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    c52c:	defffc04 	addi	sp,sp,-16
    c530:	dfc00315 	stw	ra,12(sp)
    c534:	df000215 	stw	fp,8(sp)
    c538:	df000204 	addi	fp,sp,8
    c53c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    c540:	e0bfff17 	ldw	r2,-4(fp)
    c544:	10800017 	ldw	r2,0(r2)
    c548:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    c54c:	e0bffe17 	ldw	r2,-8(fp)
    c550:	11000a04 	addi	r4,r2,40
    c554:	e0bfff17 	ldw	r2,-4(fp)
    c558:	11400217 	ldw	r5,8(r2)
    c55c:	000c95c0 	call	c95c <altera_avalon_jtag_uart_close>
}
    c560:	e037883a 	mov	sp,fp
    c564:	dfc00117 	ldw	ra,4(sp)
    c568:	df000017 	ldw	fp,0(sp)
    c56c:	dec00204 	addi	sp,sp,8
    c570:	f800283a 	ret

0000c574 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    c574:	defffa04 	addi	sp,sp,-24
    c578:	dfc00515 	stw	ra,20(sp)
    c57c:	df000415 	stw	fp,16(sp)
    c580:	df000404 	addi	fp,sp,16
    c584:	e13ffd15 	stw	r4,-12(fp)
    c588:	e17ffe15 	stw	r5,-8(fp)
    c58c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    c590:	e0bffd17 	ldw	r2,-12(fp)
    c594:	10800017 	ldw	r2,0(r2)
    c598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    c59c:	e0bffc17 	ldw	r2,-16(fp)
    c5a0:	11000a04 	addi	r4,r2,40
    c5a4:	e17ffe17 	ldw	r5,-8(fp)
    c5a8:	e1bfff17 	ldw	r6,-4(fp)
    c5ac:	000c9d00 	call	c9d0 <altera_avalon_jtag_uart_ioctl>
}
    c5b0:	e037883a 	mov	sp,fp
    c5b4:	dfc00117 	ldw	ra,4(sp)
    c5b8:	df000017 	ldw	fp,0(sp)
    c5bc:	dec00204 	addi	sp,sp,8
    c5c0:	f800283a 	ret

0000c5c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c5c4:	defffa04 	addi	sp,sp,-24
    c5c8:	dfc00515 	stw	ra,20(sp)
    c5cc:	df000415 	stw	fp,16(sp)
    c5d0:	df000404 	addi	fp,sp,16
    c5d4:	e13ffd15 	stw	r4,-12(fp)
    c5d8:	e17ffe15 	stw	r5,-8(fp)
    c5dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c5e0:	e0fffd17 	ldw	r3,-12(fp)
    c5e4:	00800044 	movi	r2,1
    c5e8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c5ec:	e0bffd17 	ldw	r2,-12(fp)
    c5f0:	10800017 	ldw	r2,0(r2)
    c5f4:	11000104 	addi	r4,r2,4
    c5f8:	e0bffd17 	ldw	r2,-12(fp)
    c5fc:	10800817 	ldw	r2,32(r2)
    c600:	1007883a 	mov	r3,r2
    c604:	2005883a 	mov	r2,r4
    c608:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c60c:	e13ffe17 	ldw	r4,-8(fp)
    c610:	e17fff17 	ldw	r5,-4(fp)
    c614:	d8000015 	stw	zero,0(sp)
    c618:	01800074 	movhi	r6,1
    c61c:	31b1a104 	addi	r6,r6,-14716
    c620:	e1fffd17 	ldw	r7,-12(fp)
    c624:	000b8840 	call	b884 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c628:	e0bffd17 	ldw	r2,-12(fp)
    c62c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c630:	e0bffd17 	ldw	r2,-12(fp)
    c634:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c638:	00800074 	movhi	r2,1
    c63c:	10868904 	addi	r2,r2,6692
    c640:	10800017 	ldw	r2,0(r2)
    c644:	100b883a 	mov	r5,r2
    c648:	01800074 	movhi	r6,1
    c64c:	31b22b04 	addi	r6,r6,-14164
    c650:	e1fffd17 	ldw	r7,-12(fp)
    c654:	000cf280 	call	cf28 <alt_alarm_start>
    c658:	1004403a 	cmpge	r2,r2,zero
    c65c:	1000041e 	bne	r2,zero,c670 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c660:	e0fffd17 	ldw	r3,-12(fp)
    c664:	00a00034 	movhi	r2,32768
    c668:	10bfffc4 	addi	r2,r2,-1
    c66c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c670:	e037883a 	mov	sp,fp
    c674:	dfc00117 	ldw	ra,4(sp)
    c678:	df000017 	ldw	fp,0(sp)
    c67c:	dec00204 	addi	sp,sp,8
    c680:	f800283a 	ret

0000c684 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c684:	defff804 	addi	sp,sp,-32
    c688:	df000715 	stw	fp,28(sp)
    c68c:	df000704 	addi	fp,sp,28
    c690:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c694:	e0bfff17 	ldw	r2,-4(fp)
    c698:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c69c:	e0bffe17 	ldw	r2,-8(fp)
    c6a0:	10800017 	ldw	r2,0(r2)
    c6a4:	e0bffd15 	stw	r2,-12(fp)
    c6a8:	00000006 	br	c6ac <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c6ac:	e0bffd17 	ldw	r2,-12(fp)
    c6b0:	10800104 	addi	r2,r2,4
    c6b4:	10800037 	ldwio	r2,0(r2)
    c6b8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c6bc:	e0bffc17 	ldw	r2,-16(fp)
    c6c0:	1080c00c 	andi	r2,r2,768
    c6c4:	1005003a 	cmpeq	r2,r2,zero
    c6c8:	1000741e 	bne	r2,zero,c89c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c6cc:	e0bffc17 	ldw	r2,-16(fp)
    c6d0:	1080400c 	andi	r2,r2,256
    c6d4:	1005003a 	cmpeq	r2,r2,zero
    c6d8:	1000351e 	bne	r2,zero,c7b0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c6dc:	00800074 	movhi	r2,1
    c6e0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c6e4:	e0bffe17 	ldw	r2,-8(fp)
    c6e8:	10800a17 	ldw	r2,40(r2)
    c6ec:	10800044 	addi	r2,r2,1
    c6f0:	1081ffcc 	andi	r2,r2,2047
    c6f4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c6f8:	e0bffe17 	ldw	r2,-8(fp)
    c6fc:	10c00b17 	ldw	r3,44(r2)
    c700:	e0bffa17 	ldw	r2,-24(fp)
    c704:	18801626 	beq	r3,r2,c760 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c708:	e0bffd17 	ldw	r2,-12(fp)
    c70c:	10800037 	ldwio	r2,0(r2)
    c710:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c714:	e0bffb17 	ldw	r2,-20(fp)
    c718:	10a0000c 	andi	r2,r2,32768
    c71c:	1005003a 	cmpeq	r2,r2,zero
    c720:	10000f1e 	bne	r2,zero,c760 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c724:	e0bffe17 	ldw	r2,-8(fp)
    c728:	10c00a17 	ldw	r3,40(r2)
    c72c:	e0bffb17 	ldw	r2,-20(fp)
    c730:	1009883a 	mov	r4,r2
    c734:	e0bffe17 	ldw	r2,-8(fp)
    c738:	1885883a 	add	r2,r3,r2
    c73c:	10800e04 	addi	r2,r2,56
    c740:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c744:	e0bffe17 	ldw	r2,-8(fp)
    c748:	10800a17 	ldw	r2,40(r2)
    c74c:	10800044 	addi	r2,r2,1
    c750:	10c1ffcc 	andi	r3,r2,2047
    c754:	e0bffe17 	ldw	r2,-8(fp)
    c758:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c75c:	003fe106 	br	c6e4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c760:	e0bffb17 	ldw	r2,-20(fp)
    c764:	10bfffec 	andhi	r2,r2,65535
    c768:	1005003a 	cmpeq	r2,r2,zero
    c76c:	1000101e 	bne	r2,zero,c7b0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c770:	e0bffe17 	ldw	r2,-8(fp)
    c774:	10c00817 	ldw	r3,32(r2)
    c778:	00bfff84 	movi	r2,-2
    c77c:	1886703a 	and	r3,r3,r2
    c780:	e0bffe17 	ldw	r2,-8(fp)
    c784:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c788:	e0bffd17 	ldw	r2,-12(fp)
    c78c:	11000104 	addi	r4,r2,4
    c790:	e0bffe17 	ldw	r2,-8(fp)
    c794:	10800817 	ldw	r2,32(r2)
    c798:	1007883a 	mov	r3,r2
    c79c:	2005883a 	mov	r2,r4
    c7a0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c7a4:	e0bffd17 	ldw	r2,-12(fp)
    c7a8:	10800104 	addi	r2,r2,4
    c7ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c7b0:	e0bffc17 	ldw	r2,-16(fp)
    c7b4:	1080800c 	andi	r2,r2,512
    c7b8:	1005003a 	cmpeq	r2,r2,zero
    c7bc:	103fbb1e 	bne	r2,zero,c6ac <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c7c0:	e0bffc17 	ldw	r2,-16(fp)
    c7c4:	10bfffec 	andhi	r2,r2,65535
    c7c8:	1004d43a 	srli	r2,r2,16
    c7cc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c7d0:	00001506 	br	c828 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c7d4:	e13ffd17 	ldw	r4,-12(fp)
    c7d8:	e0bffe17 	ldw	r2,-8(fp)
    c7dc:	10c00d17 	ldw	r3,52(r2)
    c7e0:	e0bffe17 	ldw	r2,-8(fp)
    c7e4:	1885883a 	add	r2,r3,r2
    c7e8:	10820e04 	addi	r2,r2,2104
    c7ec:	10800003 	ldbu	r2,0(r2)
    c7f0:	10c03fcc 	andi	r3,r2,255
    c7f4:	18c0201c 	xori	r3,r3,128
    c7f8:	18ffe004 	addi	r3,r3,-128
    c7fc:	2005883a 	mov	r2,r4
    c800:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c804:	e0bffe17 	ldw	r2,-8(fp)
    c808:	10800d17 	ldw	r2,52(r2)
    c80c:	10800044 	addi	r2,r2,1
    c810:	10c1ffcc 	andi	r3,r2,2047
    c814:	e0bffe17 	ldw	r2,-8(fp)
    c818:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c81c:	e0bff917 	ldw	r2,-28(fp)
    c820:	10bfffc4 	addi	r2,r2,-1
    c824:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c828:	e0bff917 	ldw	r2,-28(fp)
    c82c:	1005003a 	cmpeq	r2,r2,zero
    c830:	1000051e 	bne	r2,zero,c848 <altera_avalon_jtag_uart_irq+0x1c4>
    c834:	e0bffe17 	ldw	r2,-8(fp)
    c838:	10c00d17 	ldw	r3,52(r2)
    c83c:	e0bffe17 	ldw	r2,-8(fp)
    c840:	10800c17 	ldw	r2,48(r2)
    c844:	18bfe31e 	bne	r3,r2,c7d4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c848:	e0bff917 	ldw	r2,-28(fp)
    c84c:	1005003a 	cmpeq	r2,r2,zero
    c850:	103f961e 	bne	r2,zero,c6ac <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c854:	e0bffe17 	ldw	r2,-8(fp)
    c858:	10c00817 	ldw	r3,32(r2)
    c85c:	00bfff44 	movi	r2,-3
    c860:	1886703a 	and	r3,r3,r2
    c864:	e0bffe17 	ldw	r2,-8(fp)
    c868:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c86c:	e0bffe17 	ldw	r2,-8(fp)
    c870:	10800017 	ldw	r2,0(r2)
    c874:	11000104 	addi	r4,r2,4
    c878:	e0bffe17 	ldw	r2,-8(fp)
    c87c:	10800817 	ldw	r2,32(r2)
    c880:	1007883a 	mov	r3,r2
    c884:	2005883a 	mov	r2,r4
    c888:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c88c:	e0bffd17 	ldw	r2,-12(fp)
    c890:	10800104 	addi	r2,r2,4
    c894:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c898:	003f8406 	br	c6ac <altera_avalon_jtag_uart_irq+0x28>
}
    c89c:	e037883a 	mov	sp,fp
    c8a0:	df000017 	ldw	fp,0(sp)
    c8a4:	dec00104 	addi	sp,sp,4
    c8a8:	f800283a 	ret

0000c8ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c8ac:	defffc04 	addi	sp,sp,-16
    c8b0:	df000315 	stw	fp,12(sp)
    c8b4:	df000304 	addi	fp,sp,12
    c8b8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c8bc:	e0bfff17 	ldw	r2,-4(fp)
    c8c0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c8c4:	e0bffe17 	ldw	r2,-8(fp)
    c8c8:	10800017 	ldw	r2,0(r2)
    c8cc:	10800104 	addi	r2,r2,4
    c8d0:	10800037 	ldwio	r2,0(r2)
    c8d4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c8d8:	e0bffd17 	ldw	r2,-12(fp)
    c8dc:	1081000c 	andi	r2,r2,1024
    c8e0:	1005003a 	cmpeq	r2,r2,zero
    c8e4:	10000c1e 	bne	r2,zero,c918 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c8e8:	e0bffe17 	ldw	r2,-8(fp)
    c8ec:	10800017 	ldw	r2,0(r2)
    c8f0:	11000104 	addi	r4,r2,4
    c8f4:	e0bffe17 	ldw	r2,-8(fp)
    c8f8:	10800817 	ldw	r2,32(r2)
    c8fc:	10810014 	ori	r2,r2,1024
    c900:	1007883a 	mov	r3,r2
    c904:	2005883a 	mov	r2,r4
    c908:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c90c:	e0bffe17 	ldw	r2,-8(fp)
    c910:	10000915 	stw	zero,36(r2)
    c914:	00000a06 	br	c940 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c918:	e0bffe17 	ldw	r2,-8(fp)
    c91c:	10c00917 	ldw	r3,36(r2)
    c920:	00a00034 	movhi	r2,32768
    c924:	10bfff04 	addi	r2,r2,-4
    c928:	10c00536 	bltu	r2,r3,c940 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c92c:	e0bffe17 	ldw	r2,-8(fp)
    c930:	10800917 	ldw	r2,36(r2)
    c934:	10c00044 	addi	r3,r2,1
    c938:	e0bffe17 	ldw	r2,-8(fp)
    c93c:	10c00915 	stw	r3,36(r2)
    c940:	00800074 	movhi	r2,1
    c944:	10868904 	addi	r2,r2,6692
    c948:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c94c:	e037883a 	mov	sp,fp
    c950:	df000017 	ldw	fp,0(sp)
    c954:	dec00104 	addi	sp,sp,4
    c958:	f800283a 	ret

0000c95c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c95c:	defffc04 	addi	sp,sp,-16
    c960:	df000315 	stw	fp,12(sp)
    c964:	df000304 	addi	fp,sp,12
    c968:	e13ffd15 	stw	r4,-12(fp)
    c96c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c970:	00000706 	br	c990 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c974:	e0bffe17 	ldw	r2,-8(fp)
    c978:	1090000c 	andi	r2,r2,16384
    c97c:	1005003a 	cmpeq	r2,r2,zero
    c980:	1000031e 	bne	r2,zero,c990 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c984:	00bffd44 	movi	r2,-11
    c988:	e0bfff15 	stw	r2,-4(fp)
    c98c:	00000b06 	br	c9bc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c990:	e0bffd17 	ldw	r2,-12(fp)
    c994:	10c00d17 	ldw	r3,52(r2)
    c998:	e0bffd17 	ldw	r2,-12(fp)
    c99c:	10800c17 	ldw	r2,48(r2)
    c9a0:	18800526 	beq	r3,r2,c9b8 <altera_avalon_jtag_uart_close+0x5c>
    c9a4:	e0bffd17 	ldw	r2,-12(fp)
    c9a8:	10c00917 	ldw	r3,36(r2)
    c9ac:	e0bffd17 	ldw	r2,-12(fp)
    c9b0:	10800117 	ldw	r2,4(r2)
    c9b4:	18bfef36 	bltu	r3,r2,c974 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c9b8:	e03fff15 	stw	zero,-4(fp)
    c9bc:	e0bfff17 	ldw	r2,-4(fp)
}
    c9c0:	e037883a 	mov	sp,fp
    c9c4:	df000017 	ldw	fp,0(sp)
    c9c8:	dec00104 	addi	sp,sp,4
    c9cc:	f800283a 	ret

0000c9d0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c9d0:	defff804 	addi	sp,sp,-32
    c9d4:	df000715 	stw	fp,28(sp)
    c9d8:	df000704 	addi	fp,sp,28
    c9dc:	e13ffb15 	stw	r4,-20(fp)
    c9e0:	e17ffc15 	stw	r5,-16(fp)
    c9e4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c9e8:	00bff9c4 	movi	r2,-25
    c9ec:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c9f0:	e0bffc17 	ldw	r2,-16(fp)
    c9f4:	e0bfff15 	stw	r2,-4(fp)
    c9f8:	e0ffff17 	ldw	r3,-4(fp)
    c9fc:	189a8060 	cmpeqi	r2,r3,27137
    ca00:	1000041e 	bne	r2,zero,ca14 <altera_avalon_jtag_uart_ioctl+0x44>
    ca04:	e0ffff17 	ldw	r3,-4(fp)
    ca08:	189a80a0 	cmpeqi	r2,r3,27138
    ca0c:	10001b1e 	bne	r2,zero,ca7c <altera_avalon_jtag_uart_ioctl+0xac>
    ca10:	00002706 	br	cab0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    ca14:	e0bffb17 	ldw	r2,-20(fp)
    ca18:	10c00117 	ldw	r3,4(r2)
    ca1c:	00a00034 	movhi	r2,32768
    ca20:	10bfffc4 	addi	r2,r2,-1
    ca24:	18802226 	beq	r3,r2,cab0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    ca28:	e0bffd17 	ldw	r2,-12(fp)
    ca2c:	10800017 	ldw	r2,0(r2)
    ca30:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    ca34:	e0bff917 	ldw	r2,-28(fp)
    ca38:	10800090 	cmplti	r2,r2,2
    ca3c:	1000071e 	bne	r2,zero,ca5c <altera_avalon_jtag_uart_ioctl+0x8c>
    ca40:	e0fff917 	ldw	r3,-28(fp)
    ca44:	00a00034 	movhi	r2,32768
    ca48:	10bfffc4 	addi	r2,r2,-1
    ca4c:	18800326 	beq	r3,r2,ca5c <altera_avalon_jtag_uart_ioctl+0x8c>
    ca50:	e0bff917 	ldw	r2,-28(fp)
    ca54:	e0bffe15 	stw	r2,-8(fp)
    ca58:	00000306 	br	ca68 <altera_avalon_jtag_uart_ioctl+0x98>
    ca5c:	00e00034 	movhi	r3,32768
    ca60:	18ffff84 	addi	r3,r3,-2
    ca64:	e0fffe15 	stw	r3,-8(fp)
    ca68:	e0bffb17 	ldw	r2,-20(fp)
    ca6c:	e0fffe17 	ldw	r3,-8(fp)
    ca70:	10c00115 	stw	r3,4(r2)
      rc = 0;
    ca74:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    ca78:	00000d06 	br	cab0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    ca7c:	e0bffb17 	ldw	r2,-20(fp)
    ca80:	10c00117 	ldw	r3,4(r2)
    ca84:	00a00034 	movhi	r2,32768
    ca88:	10bfffc4 	addi	r2,r2,-1
    ca8c:	18800826 	beq	r3,r2,cab0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    ca90:	e13ffd17 	ldw	r4,-12(fp)
    ca94:	e0bffb17 	ldw	r2,-20(fp)
    ca98:	10c00917 	ldw	r3,36(r2)
    ca9c:	e0bffb17 	ldw	r2,-20(fp)
    caa0:	10800117 	ldw	r2,4(r2)
    caa4:	1885803a 	cmpltu	r2,r3,r2
    caa8:	20800015 	stw	r2,0(r4)
      rc = 0;
    caac:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    cab0:	e0bffa17 	ldw	r2,-24(fp)
}
    cab4:	e037883a 	mov	sp,fp
    cab8:	df000017 	ldw	fp,0(sp)
    cabc:	dec00104 	addi	sp,sp,4
    cac0:	f800283a 	ret

0000cac4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    cac4:	defff204 	addi	sp,sp,-56
    cac8:	dfc00d15 	stw	ra,52(sp)
    cacc:	df000c15 	stw	fp,48(sp)
    cad0:	df000c04 	addi	fp,sp,48
    cad4:	e13ffb15 	stw	r4,-20(fp)
    cad8:	e17ffc15 	stw	r5,-16(fp)
    cadc:	e1bffd15 	stw	r6,-12(fp)
    cae0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    cae4:	e0bffc17 	ldw	r2,-16(fp)
    cae8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    caec:	00004806 	br	cc10 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    caf0:	e0bffb17 	ldw	r2,-20(fp)
    caf4:	10800a17 	ldw	r2,40(r2)
    caf8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    cafc:	e0bffb17 	ldw	r2,-20(fp)
    cb00:	10800b17 	ldw	r2,44(r2)
    cb04:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    cb08:	e0fff717 	ldw	r3,-36(fp)
    cb0c:	e0bff617 	ldw	r2,-40(fp)
    cb10:	18800536 	bltu	r3,r2,cb28 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    cb14:	e0bff717 	ldw	r2,-36(fp)
    cb18:	e0fff617 	ldw	r3,-40(fp)
    cb1c:	10c5c83a 	sub	r2,r2,r3
    cb20:	e0bff815 	stw	r2,-32(fp)
    cb24:	00000406 	br	cb38 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    cb28:	00820004 	movi	r2,2048
    cb2c:	e0fff617 	ldw	r3,-40(fp)
    cb30:	10c5c83a 	sub	r2,r2,r3
    cb34:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cb38:	e0bff817 	ldw	r2,-32(fp)
    cb3c:	1005003a 	cmpeq	r2,r2,zero
    cb40:	10001f1e 	bne	r2,zero,cbc0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    cb44:	e0fffd17 	ldw	r3,-12(fp)
    cb48:	e0bff817 	ldw	r2,-32(fp)
    cb4c:	1880022e 	bgeu	r3,r2,cb58 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    cb50:	e0bffd17 	ldw	r2,-12(fp)
    cb54:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    cb58:	e0bffb17 	ldw	r2,-20(fp)
    cb5c:	10c00e04 	addi	r3,r2,56
    cb60:	e0bff617 	ldw	r2,-40(fp)
    cb64:	1887883a 	add	r3,r3,r2
    cb68:	e0bffa17 	ldw	r2,-24(fp)
    cb6c:	1009883a 	mov	r4,r2
    cb70:	180b883a 	mov	r5,r3
    cb74:	e1bff817 	ldw	r6,-32(fp)
    cb78:	00070e80 	call	70e8 <memcpy>
      ptr   += n;
    cb7c:	e0fff817 	ldw	r3,-32(fp)
    cb80:	e0bffa17 	ldw	r2,-24(fp)
    cb84:	10c5883a 	add	r2,r2,r3
    cb88:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    cb8c:	e0fffd17 	ldw	r3,-12(fp)
    cb90:	e0bff817 	ldw	r2,-32(fp)
    cb94:	1885c83a 	sub	r2,r3,r2
    cb98:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cb9c:	e0fff617 	ldw	r3,-40(fp)
    cba0:	e0bff817 	ldw	r2,-32(fp)
    cba4:	1885883a 	add	r2,r3,r2
    cba8:	10c1ffcc 	andi	r3,r2,2047
    cbac:	e0bffb17 	ldw	r2,-20(fp)
    cbb0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    cbb4:	e0bffd17 	ldw	r2,-12(fp)
    cbb8:	10800048 	cmpgei	r2,r2,1
    cbbc:	103fcc1e 	bne	r2,zero,caf0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    cbc0:	e0fffa17 	ldw	r3,-24(fp)
    cbc4:	e0bffc17 	ldw	r2,-16(fp)
    cbc8:	1880141e 	bne	r3,r2,cc1c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    cbcc:	e0bffe17 	ldw	r2,-8(fp)
    cbd0:	1090000c 	andi	r2,r2,16384
    cbd4:	1004c03a 	cmpne	r2,r2,zero
    cbd8:	1000101e 	bne	r2,zero,cc1c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    cbdc:	e0bffb17 	ldw	r2,-20(fp)
    cbe0:	10c00a17 	ldw	r3,40(r2)
    cbe4:	e0bff717 	ldw	r2,-36(fp)
    cbe8:	1880051e 	bne	r3,r2,cc00 <altera_avalon_jtag_uart_read+0x13c>
    cbec:	e0bffb17 	ldw	r2,-20(fp)
    cbf0:	10c00917 	ldw	r3,36(r2)
    cbf4:	e0bffb17 	ldw	r2,-20(fp)
    cbf8:	10800117 	ldw	r2,4(r2)
    cbfc:	18bff736 	bltu	r3,r2,cbdc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    cc00:	e0bffb17 	ldw	r2,-20(fp)
    cc04:	10c00a17 	ldw	r3,40(r2)
    cc08:	e0bff717 	ldw	r2,-36(fp)
    cc0c:	18800326 	beq	r3,r2,cc1c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    cc10:	e0bffd17 	ldw	r2,-12(fp)
    cc14:	10800048 	cmpgei	r2,r2,1
    cc18:	103fb51e 	bne	r2,zero,caf0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    cc1c:	e0fffa17 	ldw	r3,-24(fp)
    cc20:	e0bffc17 	ldw	r2,-16(fp)
    cc24:	18801926 	beq	r3,r2,cc8c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cc28:	0005303a 	rdctl	r2,status
    cc2c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cc30:	e0fff517 	ldw	r3,-44(fp)
    cc34:	00bfff84 	movi	r2,-2
    cc38:	1884703a 	and	r2,r3,r2
    cc3c:	1001703a 	wrctl	status,r2
  
  return context;
    cc40:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    cc44:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    cc48:	e0bffb17 	ldw	r2,-20(fp)
    cc4c:	10800817 	ldw	r2,32(r2)
    cc50:	10c00054 	ori	r3,r2,1
    cc54:	e0bffb17 	ldw	r2,-20(fp)
    cc58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    cc5c:	e0bffb17 	ldw	r2,-20(fp)
    cc60:	10800017 	ldw	r2,0(r2)
    cc64:	11000104 	addi	r4,r2,4
    cc68:	e0bffb17 	ldw	r2,-20(fp)
    cc6c:	10800817 	ldw	r2,32(r2)
    cc70:	1007883a 	mov	r3,r2
    cc74:	2005883a 	mov	r2,r4
    cc78:	10c00035 	stwio	r3,0(r2)
    cc7c:	e0bff917 	ldw	r2,-28(fp)
    cc80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cc84:	e0bff417 	ldw	r2,-48(fp)
    cc88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    cc8c:	e0fffa17 	ldw	r3,-24(fp)
    cc90:	e0bffc17 	ldw	r2,-16(fp)
    cc94:	18800526 	beq	r3,r2,ccac <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    cc98:	e0fffa17 	ldw	r3,-24(fp)
    cc9c:	e0bffc17 	ldw	r2,-16(fp)
    cca0:	1887c83a 	sub	r3,r3,r2
    cca4:	e0ffff15 	stw	r3,-4(fp)
    cca8:	00000906 	br	ccd0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    ccac:	e0bffe17 	ldw	r2,-8(fp)
    ccb0:	1090000c 	andi	r2,r2,16384
    ccb4:	1005003a 	cmpeq	r2,r2,zero
    ccb8:	1000031e 	bne	r2,zero,ccc8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ccbc:	00bffd44 	movi	r2,-11
    ccc0:	e0bfff15 	stw	r2,-4(fp)
    ccc4:	00000206 	br	ccd0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    ccc8:	00bffec4 	movi	r2,-5
    cccc:	e0bfff15 	stw	r2,-4(fp)
    ccd0:	e0bfff17 	ldw	r2,-4(fp)
}
    ccd4:	e037883a 	mov	sp,fp
    ccd8:	dfc00117 	ldw	ra,4(sp)
    ccdc:	df000017 	ldw	fp,0(sp)
    cce0:	dec00204 	addi	sp,sp,8
    cce4:	f800283a 	ret

0000cce8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    cce8:	defff204 	addi	sp,sp,-56
    ccec:	dfc00d15 	stw	ra,52(sp)
    ccf0:	df000c15 	stw	fp,48(sp)
    ccf4:	df000c04 	addi	fp,sp,48
    ccf8:	e13ffb15 	stw	r4,-20(fp)
    ccfc:	e17ffc15 	stw	r5,-16(fp)
    cd00:	e1bffd15 	stw	r6,-12(fp)
    cd04:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    cd08:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    cd0c:	e0bffc17 	ldw	r2,-16(fp)
    cd10:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    cd14:	00003a06 	br	ce00 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    cd18:	e0bffb17 	ldw	r2,-20(fp)
    cd1c:	10800c17 	ldw	r2,48(r2)
    cd20:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    cd24:	e0bffb17 	ldw	r2,-20(fp)
    cd28:	10800d17 	ldw	r2,52(r2)
    cd2c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    cd30:	e0fffa17 	ldw	r3,-24(fp)
    cd34:	e0bff917 	ldw	r2,-28(fp)
    cd38:	1880062e 	bgeu	r3,r2,cd54 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    cd3c:	e0fff917 	ldw	r3,-28(fp)
    cd40:	e0bffa17 	ldw	r2,-24(fp)
    cd44:	1885c83a 	sub	r2,r3,r2
    cd48:	10bfffc4 	addi	r2,r2,-1
    cd4c:	e0bff815 	stw	r2,-32(fp)
    cd50:	00000c06 	br	cd84 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    cd54:	e0bff917 	ldw	r2,-28(fp)
    cd58:	1005003a 	cmpeq	r2,r2,zero
    cd5c:	1000051e 	bne	r2,zero,cd74 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    cd60:	00820004 	movi	r2,2048
    cd64:	e0fffa17 	ldw	r3,-24(fp)
    cd68:	10c5c83a 	sub	r2,r2,r3
    cd6c:	e0bff815 	stw	r2,-32(fp)
    cd70:	00000406 	br	cd84 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    cd74:	0081ffc4 	movi	r2,2047
    cd78:	e0fffa17 	ldw	r3,-24(fp)
    cd7c:	10c5c83a 	sub	r2,r2,r3
    cd80:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    cd84:	e0bff817 	ldw	r2,-32(fp)
    cd88:	1005003a 	cmpeq	r2,r2,zero
    cd8c:	10001f1e 	bne	r2,zero,ce0c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    cd90:	e0fffd17 	ldw	r3,-12(fp)
    cd94:	e0bff817 	ldw	r2,-32(fp)
    cd98:	1880022e 	bgeu	r3,r2,cda4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    cd9c:	e0bffd17 	ldw	r2,-12(fp)
    cda0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    cda4:	e0bffb17 	ldw	r2,-20(fp)
    cda8:	10c20e04 	addi	r3,r2,2104
    cdac:	e0bffa17 	ldw	r2,-24(fp)
    cdb0:	1885883a 	add	r2,r3,r2
    cdb4:	e0fffc17 	ldw	r3,-16(fp)
    cdb8:	1009883a 	mov	r4,r2
    cdbc:	180b883a 	mov	r5,r3
    cdc0:	e1bff817 	ldw	r6,-32(fp)
    cdc4:	00070e80 	call	70e8 <memcpy>
      ptr   += n;
    cdc8:	e0fff817 	ldw	r3,-32(fp)
    cdcc:	e0bffc17 	ldw	r2,-16(fp)
    cdd0:	10c5883a 	add	r2,r2,r3
    cdd4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    cdd8:	e0fffd17 	ldw	r3,-12(fp)
    cddc:	e0bff817 	ldw	r2,-32(fp)
    cde0:	1885c83a 	sub	r2,r3,r2
    cde4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    cde8:	e0fffa17 	ldw	r3,-24(fp)
    cdec:	e0bff817 	ldw	r2,-32(fp)
    cdf0:	1885883a 	add	r2,r3,r2
    cdf4:	10c1ffcc 	andi	r3,r2,2047
    cdf8:	e0bffb17 	ldw	r2,-20(fp)
    cdfc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ce00:	e0bffd17 	ldw	r2,-12(fp)
    ce04:	10800048 	cmpgei	r2,r2,1
    ce08:	103fc31e 	bne	r2,zero,cd18 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ce0c:	0005303a 	rdctl	r2,status
    ce10:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ce14:	e0fff517 	ldw	r3,-44(fp)
    ce18:	00bfff84 	movi	r2,-2
    ce1c:	1884703a 	and	r2,r3,r2
    ce20:	1001703a 	wrctl	status,r2
  
  return context;
    ce24:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ce28:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ce2c:	e0bffb17 	ldw	r2,-20(fp)
    ce30:	10800817 	ldw	r2,32(r2)
    ce34:	10c00094 	ori	r3,r2,2
    ce38:	e0bffb17 	ldw	r2,-20(fp)
    ce3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ce40:	e0bffb17 	ldw	r2,-20(fp)
    ce44:	10800017 	ldw	r2,0(r2)
    ce48:	11000104 	addi	r4,r2,4
    ce4c:	e0bffb17 	ldw	r2,-20(fp)
    ce50:	10800817 	ldw	r2,32(r2)
    ce54:	1007883a 	mov	r3,r2
    ce58:	2005883a 	mov	r2,r4
    ce5c:	10c00035 	stwio	r3,0(r2)
    ce60:	e0bff717 	ldw	r2,-36(fp)
    ce64:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ce68:	e0bff417 	ldw	r2,-48(fp)
    ce6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ce70:	e0bffd17 	ldw	r2,-12(fp)
    ce74:	10800050 	cmplti	r2,r2,1
    ce78:	1000111e 	bne	r2,zero,cec0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    ce7c:	e0bffe17 	ldw	r2,-8(fp)
    ce80:	1090000c 	andi	r2,r2,16384
    ce84:	1004c03a 	cmpne	r2,r2,zero
    ce88:	1000101e 	bne	r2,zero,cecc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ce8c:	e0bffb17 	ldw	r2,-20(fp)
    ce90:	10c00d17 	ldw	r3,52(r2)
    ce94:	e0bff917 	ldw	r2,-28(fp)
    ce98:	1880051e 	bne	r3,r2,ceb0 <altera_avalon_jtag_uart_write+0x1c8>
    ce9c:	e0bffb17 	ldw	r2,-20(fp)
    cea0:	10c00917 	ldw	r3,36(r2)
    cea4:	e0bffb17 	ldw	r2,-20(fp)
    cea8:	10800117 	ldw	r2,4(r2)
    ceac:	18bff736 	bltu	r3,r2,ce8c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    ceb0:	e0bffb17 	ldw	r2,-20(fp)
    ceb4:	10c00d17 	ldw	r3,52(r2)
    ceb8:	e0bff917 	ldw	r2,-28(fp)
    cebc:	18800326 	beq	r3,r2,cecc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    cec0:	e0bffd17 	ldw	r2,-12(fp)
    cec4:	10800048 	cmpgei	r2,r2,1
    cec8:	103fcd1e 	bne	r2,zero,ce00 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    cecc:	e0fffc17 	ldw	r3,-16(fp)
    ced0:	e0bff617 	ldw	r2,-40(fp)
    ced4:	18800526 	beq	r3,r2,ceec <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    ced8:	e0fffc17 	ldw	r3,-16(fp)
    cedc:	e0bff617 	ldw	r2,-40(fp)
    cee0:	1887c83a 	sub	r3,r3,r2
    cee4:	e0ffff15 	stw	r3,-4(fp)
    cee8:	00000906 	br	cf10 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    ceec:	e0bffe17 	ldw	r2,-8(fp)
    cef0:	1090000c 	andi	r2,r2,16384
    cef4:	1005003a 	cmpeq	r2,r2,zero
    cef8:	1000031e 	bne	r2,zero,cf08 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    cefc:	00bffd44 	movi	r2,-11
    cf00:	e0bfff15 	stw	r2,-4(fp)
    cf04:	00000206 	br	cf10 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    cf08:	00bffec4 	movi	r2,-5
    cf0c:	e0bfff15 	stw	r2,-4(fp)
    cf10:	e0bfff17 	ldw	r2,-4(fp)
}
    cf14:	e037883a 	mov	sp,fp
    cf18:	dfc00117 	ldw	ra,4(sp)
    cf1c:	df000017 	ldw	fp,0(sp)
    cf20:	dec00204 	addi	sp,sp,8
    cf24:	f800283a 	ret

0000cf28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    cf28:	defff404 	addi	sp,sp,-48
    cf2c:	df000b15 	stw	fp,44(sp)
    cf30:	df000b04 	addi	fp,sp,44
    cf34:	e13ffb15 	stw	r4,-20(fp)
    cf38:	e17ffc15 	stw	r5,-16(fp)
    cf3c:	e1bffd15 	stw	r6,-12(fp)
    cf40:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    cf44:	e03ff915 	stw	zero,-28(fp)
    cf48:	00800074 	movhi	r2,1
    cf4c:	10868904 	addi	r2,r2,6692
    cf50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    cf54:	1005003a 	cmpeq	r2,r2,zero
    cf58:	1000411e 	bne	r2,zero,d060 <alt_alarm_start+0x138>
  {
    if (alarm)
    cf5c:	e0bffb17 	ldw	r2,-20(fp)
    cf60:	1005003a 	cmpeq	r2,r2,zero
    cf64:	10003b1e 	bne	r2,zero,d054 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    cf68:	e0fffb17 	ldw	r3,-20(fp)
    cf6c:	e0bffd17 	ldw	r2,-12(fp)
    cf70:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    cf74:	e0fffb17 	ldw	r3,-20(fp)
    cf78:	e0bffe17 	ldw	r2,-8(fp)
    cf7c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cf80:	0005303a 	rdctl	r2,status
    cf84:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cf88:	e0fff817 	ldw	r3,-32(fp)
    cf8c:	00bfff84 	movi	r2,-2
    cf90:	1884703a 	and	r2,r3,r2
    cf94:	1001703a 	wrctl	status,r2
  
  return context;
    cf98:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    cf9c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    cfa0:	00800074 	movhi	r2,1
    cfa4:	10868a04 	addi	r2,r2,6696
    cfa8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    cfac:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    cfb0:	e0fffc17 	ldw	r3,-16(fp)
    cfb4:	e0bff917 	ldw	r2,-28(fp)
    cfb8:	1885883a 	add	r2,r3,r2
    cfbc:	10c00044 	addi	r3,r2,1
    cfc0:	e0bffb17 	ldw	r2,-20(fp)
    cfc4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    cfc8:	e0bffb17 	ldw	r2,-20(fp)
    cfcc:	10c00217 	ldw	r3,8(r2)
    cfd0:	e0bff917 	ldw	r2,-28(fp)
    cfd4:	1880042e 	bgeu	r3,r2,cfe8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    cfd8:	e0fffb17 	ldw	r3,-20(fp)
    cfdc:	00800044 	movi	r2,1
    cfe0:	18800405 	stb	r2,16(r3)
    cfe4:	00000206 	br	cff0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    cfe8:	e0bffb17 	ldw	r2,-20(fp)
    cfec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    cff0:	e0fffb17 	ldw	r3,-20(fp)
    cff4:	00800074 	movhi	r2,1
    cff8:	10bfe004 	addi	r2,r2,-128
    cffc:	e0bff615 	stw	r2,-40(fp)
    d000:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d004:	e0fff717 	ldw	r3,-36(fp)
    d008:	e0bff617 	ldw	r2,-40(fp)
    d00c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d010:	e0bff617 	ldw	r2,-40(fp)
    d014:	10c00017 	ldw	r3,0(r2)
    d018:	e0bff717 	ldw	r2,-36(fp)
    d01c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d020:	e0bff617 	ldw	r2,-40(fp)
    d024:	10c00017 	ldw	r3,0(r2)
    d028:	e0bff717 	ldw	r2,-36(fp)
    d02c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d030:	e0fff617 	ldw	r3,-40(fp)
    d034:	e0bff717 	ldw	r2,-36(fp)
    d038:	18800015 	stw	r2,0(r3)
    d03c:	e0bffa17 	ldw	r2,-24(fp)
    d040:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d044:	e0bff517 	ldw	r2,-44(fp)
    d048:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    d04c:	e03fff15 	stw	zero,-4(fp)
    d050:	00000506 	br	d068 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    d054:	00bffa84 	movi	r2,-22
    d058:	e0bfff15 	stw	r2,-4(fp)
    d05c:	00000206 	br	d068 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    d060:	00bfde84 	movi	r2,-134
    d064:	e0bfff15 	stw	r2,-4(fp)
    d068:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    d06c:	e037883a 	mov	sp,fp
    d070:	df000017 	ldw	fp,0(sp)
    d074:	dec00104 	addi	sp,sp,4
    d078:	f800283a 	ret

0000d07c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    d07c:	defffa04 	addi	sp,sp,-24
    d080:	dfc00515 	stw	ra,20(sp)
    d084:	df000415 	stw	fp,16(sp)
    d088:	df000404 	addi	fp,sp,16
    d08c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    d090:	00800244 	movi	r2,9
    d094:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    d098:	e13ffc17 	ldw	r4,-16(fp)
    d09c:	014003f4 	movhi	r5,15
    d0a0:	29509004 	addi	r5,r5,16960
    d0a4:	0001ca00 	call	1ca0 <__mulsi3>
    d0a8:	100b883a 	mov	r5,r2
    d0ac:	01017db4 	movhi	r4,1526
    d0b0:	21384004 	addi	r4,r4,-7936
    d0b4:	0001c900 	call	1c90 <__udivsi3>
    d0b8:	100b883a 	mov	r5,r2
    d0bc:	01200034 	movhi	r4,32768
    d0c0:	213fffc4 	addi	r4,r4,-1
    d0c4:	0001c900 	call	1c90 <__udivsi3>
    d0c8:	100b883a 	mov	r5,r2
    d0cc:	e13fff17 	ldw	r4,-4(fp)
    d0d0:	0001c900 	call	1c90 <__udivsi3>
    d0d4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    d0d8:	e0bffd17 	ldw	r2,-12(fp)
    d0dc:	1005003a 	cmpeq	r2,r2,zero
    d0e0:	10002a1e 	bne	r2,zero,d18c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
    d0e4:	e03ffe15 	stw	zero,-8(fp)
    d0e8:	00001706 	br	d148 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    d0ec:	00a00034 	movhi	r2,32768
    d0f0:	10bfffc4 	addi	r2,r2,-1
    d0f4:	10bfffc4 	addi	r2,r2,-1
    d0f8:	103ffe1e 	bne	r2,zero,d0f4 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    d0fc:	e13ffc17 	ldw	r4,-16(fp)
    d100:	014003f4 	movhi	r5,15
    d104:	29509004 	addi	r5,r5,16960
    d108:	0001ca00 	call	1ca0 <__mulsi3>
    d10c:	100b883a 	mov	r5,r2
    d110:	01017db4 	movhi	r4,1526
    d114:	21384004 	addi	r4,r4,-7936
    d118:	0001c900 	call	1c90 <__udivsi3>
    d11c:	100b883a 	mov	r5,r2
    d120:	01200034 	movhi	r4,32768
    d124:	213fffc4 	addi	r4,r4,-1
    d128:	0001c900 	call	1c90 <__udivsi3>
    d12c:	1007883a 	mov	r3,r2
    d130:	e0bfff17 	ldw	r2,-4(fp)
    d134:	10c5c83a 	sub	r2,r2,r3
    d138:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    d13c:	e0bffe17 	ldw	r2,-8(fp)
    d140:	10800044 	addi	r2,r2,1
    d144:	e0bffe15 	stw	r2,-8(fp)
    d148:	e0fffe17 	ldw	r3,-8(fp)
    d14c:	e0bffd17 	ldw	r2,-12(fp)
    d150:	18bfe616 	blt	r3,r2,d0ec <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d154:	e13ffc17 	ldw	r4,-16(fp)
    d158:	014003f4 	movhi	r5,15
    d15c:	29509004 	addi	r5,r5,16960
    d160:	0001ca00 	call	1ca0 <__mulsi3>
    d164:	100b883a 	mov	r5,r2
    d168:	01017db4 	movhi	r4,1526
    d16c:	21384004 	addi	r4,r4,-7936
    d170:	0001c900 	call	1c90 <__udivsi3>
    d174:	1009883a 	mov	r4,r2
    d178:	e17fff17 	ldw	r5,-4(fp)
    d17c:	0001ca00 	call	1ca0 <__mulsi3>
    d180:	10bfffc4 	addi	r2,r2,-1
    d184:	103ffe1e 	bne	r2,zero,d180 <alt_busy_sleep+0x104>
    d188:	00000d06 	br	d1c0 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    d18c:	e13ffc17 	ldw	r4,-16(fp)
    d190:	014003f4 	movhi	r5,15
    d194:	29509004 	addi	r5,r5,16960
    d198:	0001ca00 	call	1ca0 <__mulsi3>
    d19c:	100b883a 	mov	r5,r2
    d1a0:	01017db4 	movhi	r4,1526
    d1a4:	21384004 	addi	r4,r4,-7936
    d1a8:	0001c900 	call	1c90 <__udivsi3>
    d1ac:	1009883a 	mov	r4,r2
    d1b0:	e17fff17 	ldw	r5,-4(fp)
    d1b4:	0001ca00 	call	1ca0 <__mulsi3>
    d1b8:	10bfffc4 	addi	r2,r2,-1
    d1bc:	00bffe16 	blt	zero,r2,d1b8 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    d1c0:	0005883a 	mov	r2,zero
}
    d1c4:	e037883a 	mov	sp,fp
    d1c8:	dfc00117 	ldw	ra,4(sp)
    d1cc:	df000017 	ldw	fp,0(sp)
    d1d0:	dec00204 	addi	sp,sp,8
    d1d4:	f800283a 	ret

0000d1d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    d1d8:	deffff04 	addi	sp,sp,-4
    d1dc:	df000015 	stw	fp,0(sp)
    d1e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    d1e4:	e037883a 	mov	sp,fp
    d1e8:	df000017 	ldw	fp,0(sp)
    d1ec:	dec00104 	addi	sp,sp,4
    d1f0:	f800283a 	ret

0000d1f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    d1f4:	defff904 	addi	sp,sp,-28
    d1f8:	dfc00615 	stw	ra,24(sp)
    d1fc:	df000515 	stw	fp,20(sp)
    d200:	df000504 	addi	fp,sp,20
    d204:	e13ffd15 	stw	r4,-12(fp)
    d208:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    d20c:	e0bffd17 	ldw	r2,-12(fp)
    d210:	1005003a 	cmpeq	r2,r2,zero
    d214:	1000041e 	bne	r2,zero,d228 <alt_dev_llist_insert+0x34>
    d218:	e0bffd17 	ldw	r2,-12(fp)
    d21c:	10800217 	ldw	r2,8(r2)
    d220:	1004c03a 	cmpne	r2,r2,zero
    d224:	1000071e 	bne	r2,zero,d244 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    d228:	000d2a80 	call	d2a8 <alt_get_errno>
    d22c:	1007883a 	mov	r3,r2
    d230:	00800584 	movi	r2,22
    d234:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    d238:	00bffa84 	movi	r2,-22
    d23c:	e0bfff15 	stw	r2,-4(fp)
    d240:	00001306 	br	d290 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    d244:	e0fffd17 	ldw	r3,-12(fp)
    d248:	e0bffe17 	ldw	r2,-8(fp)
    d24c:	e0bffb15 	stw	r2,-20(fp)
    d250:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    d254:	e0fffc17 	ldw	r3,-16(fp)
    d258:	e0bffb17 	ldw	r2,-20(fp)
    d25c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    d260:	e0bffb17 	ldw	r2,-20(fp)
    d264:	10c00017 	ldw	r3,0(r2)
    d268:	e0bffc17 	ldw	r2,-16(fp)
    d26c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    d270:	e0bffb17 	ldw	r2,-20(fp)
    d274:	10c00017 	ldw	r3,0(r2)
    d278:	e0bffc17 	ldw	r2,-16(fp)
    d27c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    d280:	e0fffb17 	ldw	r3,-20(fp)
    d284:	e0bffc17 	ldw	r2,-16(fp)
    d288:	18800015 	stw	r2,0(r3)

  return 0;  
    d28c:	e03fff15 	stw	zero,-4(fp)
    d290:	e0bfff17 	ldw	r2,-4(fp)
}
    d294:	e037883a 	mov	sp,fp
    d298:	dfc00117 	ldw	ra,4(sp)
    d29c:	df000017 	ldw	fp,0(sp)
    d2a0:	dec00204 	addi	sp,sp,8
    d2a4:	f800283a 	ret

0000d2a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2a8:	defffd04 	addi	sp,sp,-12
    d2ac:	dfc00215 	stw	ra,8(sp)
    d2b0:	df000115 	stw	fp,4(sp)
    d2b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d2b8:	00800074 	movhi	r2,1
    d2bc:	10bfdd04 	addi	r2,r2,-140
    d2c0:	10800017 	ldw	r2,0(r2)
    d2c4:	1005003a 	cmpeq	r2,r2,zero
    d2c8:	1000061e 	bne	r2,zero,d2e4 <alt_get_errno+0x3c>
    d2cc:	00800074 	movhi	r2,1
    d2d0:	10bfdd04 	addi	r2,r2,-140
    d2d4:	10800017 	ldw	r2,0(r2)
    d2d8:	103ee83a 	callr	r2
    d2dc:	e0bfff15 	stw	r2,-4(fp)
    d2e0:	00000306 	br	d2f0 <alt_get_errno+0x48>
    d2e4:	00800074 	movhi	r2,1
    d2e8:	10868404 	addi	r2,r2,6672
    d2ec:	e0bfff15 	stw	r2,-4(fp)
    d2f0:	e0bfff17 	ldw	r2,-4(fp)
}
    d2f4:	e037883a 	mov	sp,fp
    d2f8:	dfc00117 	ldw	ra,4(sp)
    d2fc:	df000017 	ldw	fp,0(sp)
    d300:	dec00204 	addi	sp,sp,8
    d304:	f800283a 	ret

0000d308 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    d308:	defffd04 	addi	sp,sp,-12
    d30c:	dfc00215 	stw	ra,8(sp)
    d310:	df000115 	stw	fp,4(sp)
    d314:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d318:	00bfff04 	movi	r2,-4
    d31c:	00c00074 	movhi	r3,1
    d320:	18f81d04 	addi	r3,r3,-8076
    d324:	1885883a 	add	r2,r3,r2
    d328:	e0bfff15 	stw	r2,-4(fp)
    d32c:	00000606 	br	d348 <_do_ctors+0x40>
        (*ctor) (); 
    d330:	e0bfff17 	ldw	r2,-4(fp)
    d334:	10800017 	ldw	r2,0(r2)
    d338:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    d33c:	e0bfff17 	ldw	r2,-4(fp)
    d340:	10bfff04 	addi	r2,r2,-4
    d344:	e0bfff15 	stw	r2,-4(fp)
    d348:	e0ffff17 	ldw	r3,-4(fp)
    d34c:	00800074 	movhi	r2,1
    d350:	10b81c04 	addi	r2,r2,-8080
    d354:	18bff62e 	bgeu	r3,r2,d330 <_do_ctors+0x28>
        (*ctor) (); 
}
    d358:	e037883a 	mov	sp,fp
    d35c:	dfc00117 	ldw	ra,4(sp)
    d360:	df000017 	ldw	fp,0(sp)
    d364:	dec00204 	addi	sp,sp,8
    d368:	f800283a 	ret

0000d36c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    d36c:	defffd04 	addi	sp,sp,-12
    d370:	dfc00215 	stw	ra,8(sp)
    d374:	df000115 	stw	fp,4(sp)
    d378:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d37c:	00bfff04 	movi	r2,-4
    d380:	00c00074 	movhi	r3,1
    d384:	18f81d04 	addi	r3,r3,-8076
    d388:	1885883a 	add	r2,r3,r2
    d38c:	e0bfff15 	stw	r2,-4(fp)
    d390:	00000606 	br	d3ac <_do_dtors+0x40>
        (*dtor) (); 
    d394:	e0bfff17 	ldw	r2,-4(fp)
    d398:	10800017 	ldw	r2,0(r2)
    d39c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    d3a0:	e0bfff17 	ldw	r2,-4(fp)
    d3a4:	10bfff04 	addi	r2,r2,-4
    d3a8:	e0bfff15 	stw	r2,-4(fp)
    d3ac:	e0ffff17 	ldw	r3,-4(fp)
    d3b0:	00800074 	movhi	r2,1
    d3b4:	10b81d04 	addi	r2,r2,-8076
    d3b8:	18bff62e 	bgeu	r3,r2,d394 <_do_dtors+0x28>
        (*dtor) (); 
}
    d3bc:	e037883a 	mov	sp,fp
    d3c0:	dfc00117 	ldw	ra,4(sp)
    d3c4:	df000017 	ldw	fp,0(sp)
    d3c8:	dec00204 	addi	sp,sp,8
    d3cc:	f800283a 	ret

0000d3d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    d3d0:	deffff04 	addi	sp,sp,-4
    d3d4:	df000015 	stw	fp,0(sp)
    d3d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    d3dc:	e037883a 	mov	sp,fp
    d3e0:	df000017 	ldw	fp,0(sp)
    d3e4:	dec00104 	addi	sp,sp,4
    d3e8:	f800283a 	ret

0000d3ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    d3ec:	defff804 	addi	sp,sp,-32
    d3f0:	dfc00715 	stw	ra,28(sp)
    d3f4:	df000615 	stw	fp,24(sp)
    d3f8:	dc000515 	stw	r16,20(sp)
    d3fc:	df000504 	addi	fp,sp,20
    d400:	e13ffc15 	stw	r4,-16(fp)
    d404:	e17ffd15 	stw	r5,-12(fp)
    d408:	e1bffe15 	stw	r6,-8(fp)
    d40c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    d410:	e13ffd17 	ldw	r4,-12(fp)
    d414:	e17ffe17 	ldw	r5,-8(fp)
    d418:	e1bfff17 	ldw	r6,-4(fp)
    d41c:	000d6340 	call	d634 <open>
    d420:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    d424:	e0bffb17 	ldw	r2,-20(fp)
    d428:	1004803a 	cmplt	r2,r2,zero
    d42c:	10001f1e 	bne	r2,zero,d4ac <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    d430:	e13ffb17 	ldw	r4,-20(fp)
    d434:	04000074 	movhi	r16,1
    d438:	843b5804 	addi	r16,r16,-4768
    d43c:	01400304 	movi	r5,12
    d440:	0001ca00 	call	1ca0 <__mulsi3>
    d444:	1405883a 	add	r2,r2,r16
    d448:	10c00017 	ldw	r3,0(r2)
    d44c:	e0bffc17 	ldw	r2,-16(fp)
    d450:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    d454:	e13ffb17 	ldw	r4,-20(fp)
    d458:	04000074 	movhi	r16,1
    d45c:	843b5804 	addi	r16,r16,-4768
    d460:	01400304 	movi	r5,12
    d464:	0001ca00 	call	1ca0 <__mulsi3>
    d468:	1405883a 	add	r2,r2,r16
    d46c:	10800104 	addi	r2,r2,4
    d470:	10c00017 	ldw	r3,0(r2)
    d474:	e0bffc17 	ldw	r2,-16(fp)
    d478:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    d47c:	e13ffb17 	ldw	r4,-20(fp)
    d480:	04000074 	movhi	r16,1
    d484:	843b5804 	addi	r16,r16,-4768
    d488:	01400304 	movi	r5,12
    d48c:	0001ca00 	call	1ca0 <__mulsi3>
    d490:	1405883a 	add	r2,r2,r16
    d494:	10800204 	addi	r2,r2,8
    d498:	10c00017 	ldw	r3,0(r2)
    d49c:	e0bffc17 	ldw	r2,-16(fp)
    d4a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    d4a4:	e13ffb17 	ldw	r4,-20(fp)
    d4a8:	000c0e40 	call	c0e4 <alt_release_fd>
  }
} 
    d4ac:	e037883a 	mov	sp,fp
    d4b0:	dfc00217 	ldw	ra,8(sp)
    d4b4:	df000117 	ldw	fp,4(sp)
    d4b8:	dc000017 	ldw	r16,0(sp)
    d4bc:	dec00304 	addi	sp,sp,12
    d4c0:	f800283a 	ret

0000d4c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    d4c4:	defffb04 	addi	sp,sp,-20
    d4c8:	dfc00415 	stw	ra,16(sp)
    d4cc:	df000315 	stw	fp,12(sp)
    d4d0:	df000304 	addi	fp,sp,12
    d4d4:	e13ffd15 	stw	r4,-12(fp)
    d4d8:	e17ffe15 	stw	r5,-8(fp)
    d4dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    d4e0:	01000074 	movhi	r4,1
    d4e4:	213b5b04 	addi	r4,r4,-4756
    d4e8:	e17ffd17 	ldw	r5,-12(fp)
    d4ec:	01800044 	movi	r6,1
    d4f0:	01c07fc4 	movi	r7,511
    d4f4:	000d3ec0 	call	d3ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    d4f8:	01000074 	movhi	r4,1
    d4fc:	213b5804 	addi	r4,r4,-4768
    d500:	e17ffe17 	ldw	r5,-8(fp)
    d504:	000d883a 	mov	r6,zero
    d508:	01c07fc4 	movi	r7,511
    d50c:	000d3ec0 	call	d3ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    d510:	01000074 	movhi	r4,1
    d514:	213b5e04 	addi	r4,r4,-4744
    d518:	e17fff17 	ldw	r5,-4(fp)
    d51c:	01800044 	movi	r6,1
    d520:	01c07fc4 	movi	r7,511
    d524:	000d3ec0 	call	d3ec <alt_open_fd>
}  
    d528:	e037883a 	mov	sp,fp
    d52c:	dfc00117 	ldw	ra,4(sp)
    d530:	df000017 	ldw	fp,0(sp)
    d534:	dec00204 	addi	sp,sp,8
    d538:	f800283a 	ret

0000d53c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    d53c:	defffa04 	addi	sp,sp,-24
    d540:	dfc00515 	stw	ra,20(sp)
    d544:	df000415 	stw	fp,16(sp)
    d548:	dc000315 	stw	r16,12(sp)
    d54c:	df000304 	addi	fp,sp,12
    d550:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    d554:	e0bffe17 	ldw	r2,-8(fp)
    d558:	10800217 	ldw	r2,8(r2)
    d55c:	10d00034 	orhi	r3,r2,16384
    d560:	e0bffe17 	ldw	r2,-8(fp)
    d564:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d568:	e03ffd15 	stw	zero,-12(fp)
    d56c:	00002306 	br	d5fc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    d570:	e13ffd17 	ldw	r4,-12(fp)
    d574:	04000074 	movhi	r16,1
    d578:	843b5804 	addi	r16,r16,-4768
    d57c:	01400304 	movi	r5,12
    d580:	0001ca00 	call	1ca0 <__mulsi3>
    d584:	1405883a 	add	r2,r2,r16
    d588:	10c00017 	ldw	r3,0(r2)
    d58c:	e0bffe17 	ldw	r2,-8(fp)
    d590:	10800017 	ldw	r2,0(r2)
    d594:	1880161e 	bne	r3,r2,d5f0 <alt_file_locked+0xb4>
    d598:	e13ffd17 	ldw	r4,-12(fp)
    d59c:	04000074 	movhi	r16,1
    d5a0:	843b5804 	addi	r16,r16,-4768
    d5a4:	01400304 	movi	r5,12
    d5a8:	0001ca00 	call	1ca0 <__mulsi3>
    d5ac:	1405883a 	add	r2,r2,r16
    d5b0:	10800204 	addi	r2,r2,8
    d5b4:	10800017 	ldw	r2,0(r2)
    d5b8:	1004403a 	cmpge	r2,r2,zero
    d5bc:	10000c1e 	bne	r2,zero,d5f0 <alt_file_locked+0xb4>
    d5c0:	e13ffd17 	ldw	r4,-12(fp)
    d5c4:	01400304 	movi	r5,12
    d5c8:	0001ca00 	call	1ca0 <__mulsi3>
    d5cc:	1007883a 	mov	r3,r2
    d5d0:	00800074 	movhi	r2,1
    d5d4:	10bb5804 	addi	r2,r2,-4768
    d5d8:	1887883a 	add	r3,r3,r2
    d5dc:	e0bffe17 	ldw	r2,-8(fp)
    d5e0:	18800326 	beq	r3,r2,d5f0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    d5e4:	00bffcc4 	movi	r2,-13
    d5e8:	e0bfff15 	stw	r2,-4(fp)
    d5ec:	00000a06 	br	d618 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    d5f0:	e0bffd17 	ldw	r2,-12(fp)
    d5f4:	10800044 	addi	r2,r2,1
    d5f8:	e0bffd15 	stw	r2,-12(fp)
    d5fc:	00800074 	movhi	r2,1
    d600:	10bfdc04 	addi	r2,r2,-144
    d604:	10800017 	ldw	r2,0(r2)
    d608:	1007883a 	mov	r3,r2
    d60c:	e0bffd17 	ldw	r2,-12(fp)
    d610:	18bfd72e 	bgeu	r3,r2,d570 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    d614:	e03fff15 	stw	zero,-4(fp)
    d618:	e0bfff17 	ldw	r2,-4(fp)
}
    d61c:	e037883a 	mov	sp,fp
    d620:	dfc00217 	ldw	ra,8(sp)
    d624:	df000117 	ldw	fp,4(sp)
    d628:	dc000017 	ldw	r16,0(sp)
    d62c:	dec00304 	addi	sp,sp,12
    d630:	f800283a 	ret

0000d634 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    d634:	defff404 	addi	sp,sp,-48
    d638:	dfc00b15 	stw	ra,44(sp)
    d63c:	df000a15 	stw	fp,40(sp)
    d640:	df000a04 	addi	fp,sp,40
    d644:	e13ffb15 	stw	r4,-20(fp)
    d648:	e17ffc15 	stw	r5,-16(fp)
    d64c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    d650:	00bfffc4 	movi	r2,-1
    d654:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    d658:	00bffb44 	movi	r2,-19
    d65c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    d660:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    d664:	e13ffb17 	ldw	r4,-20(fp)
    d668:	01400074 	movhi	r5,1
    d66c:	297fda04 	addi	r5,r5,-152
    d670:	000d9e40 	call	d9e4 <alt_find_dev>
    d674:	e0bffa15 	stw	r2,-24(fp)
    d678:	e0bffa17 	ldw	r2,-24(fp)
    d67c:	1004c03a 	cmpne	r2,r2,zero
    d680:	1000051e 	bne	r2,zero,d698 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    d684:	e13ffb17 	ldw	r4,-20(fp)
    d688:	000da780 	call	da78 <alt_find_file>
    d68c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    d690:	00800044 	movi	r2,1
    d694:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    d698:	e0bffa17 	ldw	r2,-24(fp)
    d69c:	1005003a 	cmpeq	r2,r2,zero
    d6a0:	1000311e 	bne	r2,zero,d768 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    d6a4:	e13ffa17 	ldw	r4,-24(fp)
    d6a8:	000db980 	call	db98 <alt_get_fd>
    d6ac:	e0bff815 	stw	r2,-32(fp)
    d6b0:	e0bff817 	ldw	r2,-32(fp)
    d6b4:	1004403a 	cmpge	r2,r2,zero
    d6b8:	1000031e 	bne	r2,zero,d6c8 <open+0x94>
    {
      status = index;
    d6bc:	e0bff817 	ldw	r2,-32(fp)
    d6c0:	e0bff715 	stw	r2,-36(fp)
    d6c4:	00002a06 	br	d770 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    d6c8:	e13ff817 	ldw	r4,-32(fp)
    d6cc:	01400304 	movi	r5,12
    d6d0:	0001ca00 	call	1ca0 <__mulsi3>
    d6d4:	1007883a 	mov	r3,r2
    d6d8:	00800074 	movhi	r2,1
    d6dc:	10bb5804 	addi	r2,r2,-4768
    d6e0:	1885883a 	add	r2,r3,r2
    d6e4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    d6e8:	e0fffc17 	ldw	r3,-16(fp)
    d6ec:	00900034 	movhi	r2,16384
    d6f0:	10bfffc4 	addi	r2,r2,-1
    d6f4:	1886703a 	and	r3,r3,r2
    d6f8:	e0bff917 	ldw	r2,-28(fp)
    d6fc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    d700:	e0bff617 	ldw	r2,-40(fp)
    d704:	1004c03a 	cmpne	r2,r2,zero
    d708:	1000061e 	bne	r2,zero,d724 <open+0xf0>
    d70c:	e13ff917 	ldw	r4,-28(fp)
    d710:	000d53c0 	call	d53c <alt_file_locked>
    d714:	e0bff715 	stw	r2,-36(fp)
    d718:	e0bff717 	ldw	r2,-36(fp)
    d71c:	1004803a 	cmplt	r2,r2,zero
    d720:	1000131e 	bne	r2,zero,d770 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    d724:	e0bffa17 	ldw	r2,-24(fp)
    d728:	10800317 	ldw	r2,12(r2)
    d72c:	1005003a 	cmpeq	r2,r2,zero
    d730:	1000091e 	bne	r2,zero,d758 <open+0x124>
    d734:	e0bffa17 	ldw	r2,-24(fp)
    d738:	10800317 	ldw	r2,12(r2)
    d73c:	e13ff917 	ldw	r4,-28(fp)
    d740:	e17ffb17 	ldw	r5,-20(fp)
    d744:	e1bffc17 	ldw	r6,-16(fp)
    d748:	e1fffd17 	ldw	r7,-12(fp)
    d74c:	103ee83a 	callr	r2
    d750:	e0bfff15 	stw	r2,-4(fp)
    d754:	00000106 	br	d75c <open+0x128>
    d758:	e03fff15 	stw	zero,-4(fp)
    d75c:	e0bfff17 	ldw	r2,-4(fp)
    d760:	e0bff715 	stw	r2,-36(fp)
    d764:	00000206 	br	d770 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    d768:	00bffb44 	movi	r2,-19
    d76c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    d770:	e0bff717 	ldw	r2,-36(fp)
    d774:	1004403a 	cmpge	r2,r2,zero
    d778:	1000091e 	bne	r2,zero,d7a0 <open+0x16c>
  {
    alt_release_fd (index);  
    d77c:	e13ff817 	ldw	r4,-32(fp)
    d780:	000c0e40 	call	c0e4 <alt_release_fd>
    ALT_ERRNO = -status;
    d784:	000d7c00 	call	d7c0 <alt_get_errno>
    d788:	e0fff717 	ldw	r3,-36(fp)
    d78c:	00c7c83a 	sub	r3,zero,r3
    d790:	10c00015 	stw	r3,0(r2)
    return -1;
    d794:	00bfffc4 	movi	r2,-1
    d798:	e0bffe15 	stw	r2,-8(fp)
    d79c:	00000206 	br	d7a8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    d7a0:	e0bff817 	ldw	r2,-32(fp)
    d7a4:	e0bffe15 	stw	r2,-8(fp)
    d7a8:	e0bffe17 	ldw	r2,-8(fp)
}
    d7ac:	e037883a 	mov	sp,fp
    d7b0:	dfc00117 	ldw	ra,4(sp)
    d7b4:	df000017 	ldw	fp,0(sp)
    d7b8:	dec00204 	addi	sp,sp,8
    d7bc:	f800283a 	ret

0000d7c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d7c0:	defffd04 	addi	sp,sp,-12
    d7c4:	dfc00215 	stw	ra,8(sp)
    d7c8:	df000115 	stw	fp,4(sp)
    d7cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    d7d0:	00800074 	movhi	r2,1
    d7d4:	10bfdd04 	addi	r2,r2,-140
    d7d8:	10800017 	ldw	r2,0(r2)
    d7dc:	1005003a 	cmpeq	r2,r2,zero
    d7e0:	1000061e 	bne	r2,zero,d7fc <alt_get_errno+0x3c>
    d7e4:	00800074 	movhi	r2,1
    d7e8:	10bfdd04 	addi	r2,r2,-140
    d7ec:	10800017 	ldw	r2,0(r2)
    d7f0:	103ee83a 	callr	r2
    d7f4:	e0bfff15 	stw	r2,-4(fp)
    d7f8:	00000306 	br	d808 <alt_get_errno+0x48>
    d7fc:	00800074 	movhi	r2,1
    d800:	10868404 	addi	r2,r2,6672
    d804:	e0bfff15 	stw	r2,-4(fp)
    d808:	e0bfff17 	ldw	r2,-4(fp)
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    d820:	defffa04 	addi	sp,sp,-24
    d824:	df000515 	stw	fp,20(sp)
    d828:	df000504 	addi	fp,sp,20
    d82c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d830:	0005303a 	rdctl	r2,status
    d834:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d838:	e0fffd17 	ldw	r3,-12(fp)
    d83c:	00bfff84 	movi	r2,-2
    d840:	1884703a 	and	r2,r3,r2
    d844:	1001703a 	wrctl	status,r2
  
  return context;
    d848:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    d84c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    d850:	e0bfff17 	ldw	r2,-4(fp)
    d854:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    d858:	e0bffc17 	ldw	r2,-16(fp)
    d85c:	10c00017 	ldw	r3,0(r2)
    d860:	e0bffc17 	ldw	r2,-16(fp)
    d864:	10800117 	ldw	r2,4(r2)
    d868:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    d86c:	e0bffc17 	ldw	r2,-16(fp)
    d870:	10c00117 	ldw	r3,4(r2)
    d874:	e0bffc17 	ldw	r2,-16(fp)
    d878:	10800017 	ldw	r2,0(r2)
    d87c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    d880:	e0fffc17 	ldw	r3,-16(fp)
    d884:	e0bffc17 	ldw	r2,-16(fp)
    d888:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    d88c:	e0fffc17 	ldw	r3,-16(fp)
    d890:	e0bffc17 	ldw	r2,-16(fp)
    d894:	18800015 	stw	r2,0(r3)
    d898:	e0bffe17 	ldw	r2,-8(fp)
    d89c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8a0:	e0bffb17 	ldw	r2,-20(fp)
    d8a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    d8a8:	e037883a 	mov	sp,fp
    d8ac:	df000017 	ldw	fp,0(sp)
    d8b0:	dec00104 	addi	sp,sp,4
    d8b4:	f800283a 	ret

0000d8b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    d8b8:	defffb04 	addi	sp,sp,-20
    d8bc:	dfc00415 	stw	ra,16(sp)
    d8c0:	df000315 	stw	fp,12(sp)
    d8c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    d8c8:	d0a01017 	ldw	r2,-32704(gp)
    d8cc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    d8d0:	d0a6ba17 	ldw	r2,-25880(gp)
    d8d4:	10800044 	addi	r2,r2,1
    d8d8:	d0a6ba15 	stw	r2,-25880(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d8dc:	00003106 	br	d9a4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    d8e0:	e0bffe17 	ldw	r2,-8(fp)
    d8e4:	10800017 	ldw	r2,0(r2)
    d8e8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    d8ec:	e0bffe17 	ldw	r2,-8(fp)
    d8f0:	10800403 	ldbu	r2,16(r2)
    d8f4:	10803fcc 	andi	r2,r2,255
    d8f8:	1005003a 	cmpeq	r2,r2,zero
    d8fc:	1000051e 	bne	r2,zero,d914 <alt_tick+0x5c>
    d900:	d0a6ba17 	ldw	r2,-25880(gp)
    d904:	1004c03a 	cmpne	r2,r2,zero
    d908:	1000021e 	bne	r2,zero,d914 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    d90c:	e0bffe17 	ldw	r2,-8(fp)
    d910:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    d914:	e0bffe17 	ldw	r2,-8(fp)
    d918:	10c00217 	ldw	r3,8(r2)
    d91c:	d0a6ba17 	ldw	r2,-25880(gp)
    d920:	10c01e36 	bltu	r2,r3,d99c <alt_tick+0xe4>
    d924:	e0bffe17 	ldw	r2,-8(fp)
    d928:	10800403 	ldbu	r2,16(r2)
    d92c:	10803fcc 	andi	r2,r2,255
    d930:	1004c03a 	cmpne	r2,r2,zero
    d934:	1000191e 	bne	r2,zero,d99c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    d938:	e0bffe17 	ldw	r2,-8(fp)
    d93c:	10c00317 	ldw	r3,12(r2)
    d940:	e0bffe17 	ldw	r2,-8(fp)
    d944:	11000517 	ldw	r4,20(r2)
    d948:	183ee83a 	callr	r3
    d94c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    d950:	e0bffd17 	ldw	r2,-12(fp)
    d954:	1004c03a 	cmpne	r2,r2,zero
    d958:	1000031e 	bne	r2,zero,d968 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    d95c:	e13ffe17 	ldw	r4,-8(fp)
    d960:	000d8200 	call	d820 <alt_alarm_stop>
    d964:	00000d06 	br	d99c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    d968:	e0bffe17 	ldw	r2,-8(fp)
    d96c:	10c00217 	ldw	r3,8(r2)
    d970:	e0bffd17 	ldw	r2,-12(fp)
    d974:	1887883a 	add	r3,r3,r2
    d978:	e0bffe17 	ldw	r2,-8(fp)
    d97c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    d980:	e0bffe17 	ldw	r2,-8(fp)
    d984:	10c00217 	ldw	r3,8(r2)
    d988:	d0a6ba17 	ldw	r2,-25880(gp)
    d98c:	1880032e 	bgeu	r3,r2,d99c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    d990:	e0fffe17 	ldw	r3,-8(fp)
    d994:	00800044 	movi	r2,1
    d998:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    d99c:	e0bfff17 	ldw	r2,-4(fp)
    d9a0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    d9a4:	d0e01004 	addi	r3,gp,-32704
    d9a8:	e0bffe17 	ldw	r2,-8(fp)
    d9ac:	10ffcc1e 	bne	r2,r3,d8e0 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    d9b0:	e037883a 	mov	sp,fp
    d9b4:	dfc00117 	ldw	ra,4(sp)
    d9b8:	df000017 	ldw	fp,0(sp)
    d9bc:	dec00204 	addi	sp,sp,8
    d9c0:	f800283a 	ret

0000d9c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    d9c4:	deffff04 	addi	sp,sp,-4
    d9c8:	df000015 	stw	fp,0(sp)
    d9cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    d9d0:	000170fa 	wrctl	ienable,zero
}
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	df000017 	ldw	fp,0(sp)
    d9dc:	dec00104 	addi	sp,sp,4
    d9e0:	f800283a 	ret

0000d9e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    d9e4:	defff904 	addi	sp,sp,-28
    d9e8:	dfc00615 	stw	ra,24(sp)
    d9ec:	df000515 	stw	fp,20(sp)
    d9f0:	df000504 	addi	fp,sp,20
    d9f4:	e13ffd15 	stw	r4,-12(fp)
    d9f8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    d9fc:	e0bffe17 	ldw	r2,-8(fp)
    da00:	10800017 	ldw	r2,0(r2)
    da04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    da08:	e13ffd17 	ldw	r4,-12(fp)
    da0c:	0001e040 	call	1e04 <strlen>
    da10:	10800044 	addi	r2,r2,1
    da14:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da18:	00000d06 	br	da50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    da1c:	e0bffc17 	ldw	r2,-16(fp)
    da20:	11000217 	ldw	r4,8(r2)
    da24:	e1bffb17 	ldw	r6,-20(fp)
    da28:	e17ffd17 	ldw	r5,-12(fp)
    da2c:	000dcb40 	call	dcb4 <memcmp>
    da30:	1004c03a 	cmpne	r2,r2,zero
    da34:	1000031e 	bne	r2,zero,da44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    da38:	e0bffc17 	ldw	r2,-16(fp)
    da3c:	e0bfff15 	stw	r2,-4(fp)
    da40:	00000706 	br	da60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    da44:	e0bffc17 	ldw	r2,-16(fp)
    da48:	10800017 	ldw	r2,0(r2)
    da4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    da50:	e0fffe17 	ldw	r3,-8(fp)
    da54:	e0bffc17 	ldw	r2,-16(fp)
    da58:	10fff01e 	bne	r2,r3,da1c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    da5c:	e03fff15 	stw	zero,-4(fp)
    da60:	e0bfff17 	ldw	r2,-4(fp)
}
    da64:	e037883a 	mov	sp,fp
    da68:	dfc00117 	ldw	ra,4(sp)
    da6c:	df000017 	ldw	fp,0(sp)
    da70:	dec00204 	addi	sp,sp,8
    da74:	f800283a 	ret

0000da78 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    da78:	defffa04 	addi	sp,sp,-24
    da7c:	dfc00515 	stw	ra,20(sp)
    da80:	df000415 	stw	fp,16(sp)
    da84:	df000404 	addi	fp,sp,16
    da88:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    da8c:	00800074 	movhi	r2,1
    da90:	10bfd804 	addi	r2,r2,-160
    da94:	10800017 	ldw	r2,0(r2)
    da98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    da9c:	00003306 	br	db6c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    daa0:	e0bffd17 	ldw	r2,-12(fp)
    daa4:	11000217 	ldw	r4,8(r2)
    daa8:	0001e040 	call	1e04 <strlen>
    daac:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    dab0:	e0bffd17 	ldw	r2,-12(fp)
    dab4:	10c00217 	ldw	r3,8(r2)
    dab8:	e0bffc17 	ldw	r2,-16(fp)
    dabc:	1885883a 	add	r2,r3,r2
    dac0:	10bfffc4 	addi	r2,r2,-1
    dac4:	10800003 	ldbu	r2,0(r2)
    dac8:	10803fcc 	andi	r2,r2,255
    dacc:	1080201c 	xori	r2,r2,128
    dad0:	10bfe004 	addi	r2,r2,-128
    dad4:	10800bd8 	cmpnei	r2,r2,47
    dad8:	1000031e 	bne	r2,zero,dae8 <alt_find_file+0x70>
    {
      len -= 1;
    dadc:	e0bffc17 	ldw	r2,-16(fp)
    dae0:	10bfffc4 	addi	r2,r2,-1
    dae4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    dae8:	e0bffc17 	ldw	r2,-16(fp)
    daec:	1007883a 	mov	r3,r2
    daf0:	e0bffe17 	ldw	r2,-8(fp)
    daf4:	1885883a 	add	r2,r3,r2
    daf8:	10800003 	ldbu	r2,0(r2)
    dafc:	10803fcc 	andi	r2,r2,255
    db00:	1080201c 	xori	r2,r2,128
    db04:	10bfe004 	addi	r2,r2,-128
    db08:	10800be0 	cmpeqi	r2,r2,47
    db0c:	10000a1e 	bne	r2,zero,db38 <alt_find_file+0xc0>
    db10:	e0bffc17 	ldw	r2,-16(fp)
    db14:	1007883a 	mov	r3,r2
    db18:	e0bffe17 	ldw	r2,-8(fp)
    db1c:	1885883a 	add	r2,r3,r2
    db20:	10800003 	ldbu	r2,0(r2)
    db24:	10803fcc 	andi	r2,r2,255
    db28:	1080201c 	xori	r2,r2,128
    db2c:	10bfe004 	addi	r2,r2,-128
    db30:	1004c03a 	cmpne	r2,r2,zero
    db34:	10000a1e 	bne	r2,zero,db60 <alt_find_file+0xe8>
    db38:	e0bffd17 	ldw	r2,-12(fp)
    db3c:	11000217 	ldw	r4,8(r2)
    db40:	e1bffc17 	ldw	r6,-16(fp)
    db44:	e17ffe17 	ldw	r5,-8(fp)
    db48:	000dcb40 	call	dcb4 <memcmp>
    db4c:	1004c03a 	cmpne	r2,r2,zero
    db50:	1000031e 	bne	r2,zero,db60 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    db54:	e0bffd17 	ldw	r2,-12(fp)
    db58:	e0bfff15 	stw	r2,-4(fp)
    db5c:	00000806 	br	db80 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    db60:	e0bffd17 	ldw	r2,-12(fp)
    db64:	10800017 	ldw	r2,0(r2)
    db68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    db6c:	00c00074 	movhi	r3,1
    db70:	18ffd804 	addi	r3,r3,-160
    db74:	e0bffd17 	ldw	r2,-12(fp)
    db78:	10ffc91e 	bne	r2,r3,daa0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    db7c:	e03fff15 	stw	zero,-4(fp)
    db80:	e0bfff17 	ldw	r2,-4(fp)
}
    db84:	e037883a 	mov	sp,fp
    db88:	dfc00117 	ldw	ra,4(sp)
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00204 	addi	sp,sp,8
    db94:	f800283a 	ret

0000db98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    db98:	defffa04 	addi	sp,sp,-24
    db9c:	dfc00515 	stw	ra,20(sp)
    dba0:	df000415 	stw	fp,16(sp)
    dba4:	dc000315 	stw	r16,12(sp)
    dba8:	df000304 	addi	fp,sp,12
    dbac:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    dbb0:	00bffa04 	movi	r2,-24
    dbb4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dbb8:	e03ffe15 	stw	zero,-8(fp)
    dbbc:	00002006 	br	dc40 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    dbc0:	e13ffe17 	ldw	r4,-8(fp)
    dbc4:	04000074 	movhi	r16,1
    dbc8:	843b5804 	addi	r16,r16,-4768
    dbcc:	01400304 	movi	r5,12
    dbd0:	0001ca00 	call	1ca0 <__mulsi3>
    dbd4:	1405883a 	add	r2,r2,r16
    dbd8:	10800017 	ldw	r2,0(r2)
    dbdc:	1004c03a 	cmpne	r2,r2,zero
    dbe0:	1000141e 	bne	r2,zero,dc34 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    dbe4:	e13ffe17 	ldw	r4,-8(fp)
    dbe8:	04000074 	movhi	r16,1
    dbec:	843b5804 	addi	r16,r16,-4768
    dbf0:	01400304 	movi	r5,12
    dbf4:	0001ca00 	call	1ca0 <__mulsi3>
    dbf8:	1407883a 	add	r3,r2,r16
    dbfc:	e0bfff17 	ldw	r2,-4(fp)
    dc00:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    dc04:	00800074 	movhi	r2,1
    dc08:	10bfdc04 	addi	r2,r2,-144
    dc0c:	10c00017 	ldw	r3,0(r2)
    dc10:	e0bffe17 	ldw	r2,-8(fp)
    dc14:	1880040e 	bge	r3,r2,dc28 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    dc18:	00c00074 	movhi	r3,1
    dc1c:	18ffdc04 	addi	r3,r3,-144
    dc20:	e0bffe17 	ldw	r2,-8(fp)
    dc24:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    dc28:	e0bffe17 	ldw	r2,-8(fp)
    dc2c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    dc30:	00000606 	br	dc4c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    dc34:	e0bffe17 	ldw	r2,-8(fp)
    dc38:	10800044 	addi	r2,r2,1
    dc3c:	e0bffe15 	stw	r2,-8(fp)
    dc40:	e0bffe17 	ldw	r2,-8(fp)
    dc44:	10800810 	cmplti	r2,r2,32
    dc48:	103fdd1e 	bne	r2,zero,dbc0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    dc4c:	e0bffd17 	ldw	r2,-12(fp)
}
    dc50:	e037883a 	mov	sp,fp
    dc54:	dfc00217 	ldw	ra,8(sp)
    dc58:	df000117 	ldw	fp,4(sp)
    dc5c:	dc000017 	ldw	r16,0(sp)
    dc60:	dec00304 	addi	sp,sp,12
    dc64:	f800283a 	ret

0000dc68 <atexit>:
    dc68:	200b883a 	mov	r5,r4
    dc6c:	000d883a 	mov	r6,zero
    dc70:	0009883a 	mov	r4,zero
    dc74:	000f883a 	mov	r7,zero
    dc78:	000dd281 	jmpi	dd28 <__register_exitproc>

0000dc7c <exit>:
    dc7c:	defffe04 	addi	sp,sp,-8
    dc80:	000b883a 	mov	r5,zero
    dc84:	dc000015 	stw	r16,0(sp)
    dc88:	dfc00115 	stw	ra,4(sp)
    dc8c:	2021883a 	mov	r16,r4
    dc90:	000de600 	call	de60 <__call_exitprocs>
    dc94:	00800074 	movhi	r2,1
    dc98:	10bfd304 	addi	r2,r2,-180
    dc9c:	11000017 	ldw	r4,0(r2)
    dca0:	20800f17 	ldw	r2,60(r4)
    dca4:	10000126 	beq	r2,zero,dcac <exit+0x30>
    dca8:	103ee83a 	callr	r2
    dcac:	8009883a 	mov	r4,r16
    dcb0:	000e0500 	call	e050 <_exit>

0000dcb4 <memcmp>:
    dcb4:	00c000c4 	movi	r3,3
    dcb8:	1980032e 	bgeu	r3,r6,dcc8 <memcmp+0x14>
    dcbc:	2144b03a 	or	r2,r4,r5
    dcc0:	10c4703a 	and	r2,r2,r3
    dcc4:	10000f26 	beq	r2,zero,dd04 <memcmp+0x50>
    dcc8:	31ffffc4 	addi	r7,r6,-1
    dccc:	3000061e 	bne	r6,zero,dce8 <memcmp+0x34>
    dcd0:	00000a06 	br	dcfc <memcmp+0x48>
    dcd4:	39ffffc4 	addi	r7,r7,-1
    dcd8:	00bfffc4 	movi	r2,-1
    dcdc:	21000044 	addi	r4,r4,1
    dce0:	29400044 	addi	r5,r5,1
    dce4:	38800526 	beq	r7,r2,dcfc <memcmp+0x48>
    dce8:	20c00003 	ldbu	r3,0(r4)
    dcec:	28800003 	ldbu	r2,0(r5)
    dcf0:	18bff826 	beq	r3,r2,dcd4 <memcmp+0x20>
    dcf4:	1885c83a 	sub	r2,r3,r2
    dcf8:	f800283a 	ret
    dcfc:	0005883a 	mov	r2,zero
    dd00:	f800283a 	ret
    dd04:	180f883a 	mov	r7,r3
    dd08:	20c00017 	ldw	r3,0(r4)
    dd0c:	28800017 	ldw	r2,0(r5)
    dd10:	18bfed1e 	bne	r3,r2,dcc8 <memcmp+0x14>
    dd14:	31bfff04 	addi	r6,r6,-4
    dd18:	21000104 	addi	r4,r4,4
    dd1c:	29400104 	addi	r5,r5,4
    dd20:	39bff936 	bltu	r7,r6,dd08 <memcmp+0x54>
    dd24:	003fe806 	br	dcc8 <memcmp+0x14>

0000dd28 <__register_exitproc>:
    dd28:	defffa04 	addi	sp,sp,-24
    dd2c:	00800074 	movhi	r2,1
    dd30:	10bfd304 	addi	r2,r2,-180
    dd34:	dc000015 	stw	r16,0(sp)
    dd38:	14000017 	ldw	r16,0(r2)
    dd3c:	dd000415 	stw	r20,16(sp)
    dd40:	2829883a 	mov	r20,r5
    dd44:	81405217 	ldw	r5,328(r16)
    dd48:	dcc00315 	stw	r19,12(sp)
    dd4c:	dc800215 	stw	r18,8(sp)
    dd50:	dc400115 	stw	r17,4(sp)
    dd54:	dfc00515 	stw	ra,20(sp)
    dd58:	2023883a 	mov	r17,r4
    dd5c:	3027883a 	mov	r19,r6
    dd60:	3825883a 	mov	r18,r7
    dd64:	28002526 	beq	r5,zero,ddfc <__register_exitproc+0xd4>
    dd68:	29000117 	ldw	r4,4(r5)
    dd6c:	008007c4 	movi	r2,31
    dd70:	11002716 	blt	r2,r4,de10 <__register_exitproc+0xe8>
    dd74:	8800101e 	bne	r17,zero,ddb8 <__register_exitproc+0x90>
    dd78:	2105883a 	add	r2,r4,r4
    dd7c:	1085883a 	add	r2,r2,r2
    dd80:	20c00044 	addi	r3,r4,1
    dd84:	1145883a 	add	r2,r2,r5
    dd88:	0009883a 	mov	r4,zero
    dd8c:	15000215 	stw	r20,8(r2)
    dd90:	28c00115 	stw	r3,4(r5)
    dd94:	2005883a 	mov	r2,r4
    dd98:	dfc00517 	ldw	ra,20(sp)
    dd9c:	dd000417 	ldw	r20,16(sp)
    dda0:	dcc00317 	ldw	r19,12(sp)
    dda4:	dc800217 	ldw	r18,8(sp)
    dda8:	dc400117 	ldw	r17,4(sp)
    ddac:	dc000017 	ldw	r16,0(sp)
    ddb0:	dec00604 	addi	sp,sp,24
    ddb4:	f800283a 	ret
    ddb8:	29802204 	addi	r6,r5,136
    ddbc:	00800044 	movi	r2,1
    ddc0:	110e983a 	sll	r7,r2,r4
    ddc4:	30c04017 	ldw	r3,256(r6)
    ddc8:	2105883a 	add	r2,r4,r4
    ddcc:	1085883a 	add	r2,r2,r2
    ddd0:	1185883a 	add	r2,r2,r6
    ddd4:	19c6b03a 	or	r3,r3,r7
    ddd8:	14802015 	stw	r18,128(r2)
    dddc:	14c00015 	stw	r19,0(r2)
    dde0:	00800084 	movi	r2,2
    dde4:	30c04015 	stw	r3,256(r6)
    dde8:	88bfe31e 	bne	r17,r2,dd78 <__register_exitproc+0x50>
    ddec:	30804117 	ldw	r2,260(r6)
    ddf0:	11c4b03a 	or	r2,r2,r7
    ddf4:	30804115 	stw	r2,260(r6)
    ddf8:	003fdf06 	br	dd78 <__register_exitproc+0x50>
    ddfc:	00800274 	movhi	r2,9
    de00:	1084d504 	addi	r2,r2,4948
    de04:	100b883a 	mov	r5,r2
    de08:	80805215 	stw	r2,328(r16)
    de0c:	003fd606 	br	dd68 <__register_exitproc+0x40>
    de10:	00800034 	movhi	r2,0
    de14:	10800004 	addi	r2,r2,0
    de18:	1000021e 	bne	r2,zero,de24 <__register_exitproc+0xfc>
    de1c:	013fffc4 	movi	r4,-1
    de20:	003fdc06 	br	dd94 <__register_exitproc+0x6c>
    de24:	01006404 	movi	r4,400
    de28:	103ee83a 	callr	r2
    de2c:	1007883a 	mov	r3,r2
    de30:	103ffa26 	beq	r2,zero,de1c <__register_exitproc+0xf4>
    de34:	80805217 	ldw	r2,328(r16)
    de38:	180b883a 	mov	r5,r3
    de3c:	18000115 	stw	zero,4(r3)
    de40:	18800015 	stw	r2,0(r3)
    de44:	80c05215 	stw	r3,328(r16)
    de48:	18006215 	stw	zero,392(r3)
    de4c:	18006315 	stw	zero,396(r3)
    de50:	0009883a 	mov	r4,zero
    de54:	883fc826 	beq	r17,zero,dd78 <__register_exitproc+0x50>
    de58:	003fd706 	br	ddb8 <__register_exitproc+0x90>

0000de5c <register_fini>:
    de5c:	f800283a 	ret

0000de60 <__call_exitprocs>:
    de60:	00800074 	movhi	r2,1
    de64:	10bfd304 	addi	r2,r2,-180
    de68:	10800017 	ldw	r2,0(r2)
    de6c:	defff304 	addi	sp,sp,-52
    de70:	df000b15 	stw	fp,44(sp)
    de74:	d8800115 	stw	r2,4(sp)
    de78:	00800034 	movhi	r2,0
    de7c:	10800004 	addi	r2,r2,0
    de80:	1005003a 	cmpeq	r2,r2,zero
    de84:	d8800215 	stw	r2,8(sp)
    de88:	d8800117 	ldw	r2,4(sp)
    de8c:	dd400815 	stw	r21,32(sp)
    de90:	dd000715 	stw	r20,28(sp)
    de94:	10805204 	addi	r2,r2,328
    de98:	dfc00c15 	stw	ra,48(sp)
    de9c:	ddc00a15 	stw	r23,40(sp)
    dea0:	dd800915 	stw	r22,36(sp)
    dea4:	dcc00615 	stw	r19,24(sp)
    dea8:	dc800515 	stw	r18,20(sp)
    deac:	dc400415 	stw	r17,16(sp)
    deb0:	dc000315 	stw	r16,12(sp)
    deb4:	282b883a 	mov	r21,r5
    deb8:	2039883a 	mov	fp,r4
    debc:	d8800015 	stw	r2,0(sp)
    dec0:	2829003a 	cmpeq	r20,r5,zero
    dec4:	d8800117 	ldw	r2,4(sp)
    dec8:	14405217 	ldw	r17,328(r2)
    decc:	88001026 	beq	r17,zero,df10 <__call_exitprocs+0xb0>
    ded0:	ddc00017 	ldw	r23,0(sp)
    ded4:	88800117 	ldw	r2,4(r17)
    ded8:	8c802204 	addi	r18,r17,136
    dedc:	143fffc4 	addi	r16,r2,-1
    dee0:	80000916 	blt	r16,zero,df08 <__call_exitprocs+0xa8>
    dee4:	05bfffc4 	movi	r22,-1
    dee8:	a000151e 	bne	r20,zero,df40 <__call_exitprocs+0xe0>
    deec:	8409883a 	add	r4,r16,r16
    def0:	2105883a 	add	r2,r4,r4
    def4:	1485883a 	add	r2,r2,r18
    def8:	10c02017 	ldw	r3,128(r2)
    defc:	a8c01126 	beq	r21,r3,df44 <__call_exitprocs+0xe4>
    df00:	843fffc4 	addi	r16,r16,-1
    df04:	85bff81e 	bne	r16,r22,dee8 <__call_exitprocs+0x88>
    df08:	d8800217 	ldw	r2,8(sp)
    df0c:	10003126 	beq	r2,zero,dfd4 <__call_exitprocs+0x174>
    df10:	dfc00c17 	ldw	ra,48(sp)
    df14:	df000b17 	ldw	fp,44(sp)
    df18:	ddc00a17 	ldw	r23,40(sp)
    df1c:	dd800917 	ldw	r22,36(sp)
    df20:	dd400817 	ldw	r21,32(sp)
    df24:	dd000717 	ldw	r20,28(sp)
    df28:	dcc00617 	ldw	r19,24(sp)
    df2c:	dc800517 	ldw	r18,20(sp)
    df30:	dc400417 	ldw	r17,16(sp)
    df34:	dc000317 	ldw	r16,12(sp)
    df38:	dec00d04 	addi	sp,sp,52
    df3c:	f800283a 	ret
    df40:	8409883a 	add	r4,r16,r16
    df44:	88c00117 	ldw	r3,4(r17)
    df48:	2105883a 	add	r2,r4,r4
    df4c:	1445883a 	add	r2,r2,r17
    df50:	18ffffc4 	addi	r3,r3,-1
    df54:	11800217 	ldw	r6,8(r2)
    df58:	1c001526 	beq	r3,r16,dfb0 <__call_exitprocs+0x150>
    df5c:	10000215 	stw	zero,8(r2)
    df60:	303fe726 	beq	r6,zero,df00 <__call_exitprocs+0xa0>
    df64:	00c00044 	movi	r3,1
    df68:	1c06983a 	sll	r3,r3,r16
    df6c:	90804017 	ldw	r2,256(r18)
    df70:	8cc00117 	ldw	r19,4(r17)
    df74:	1884703a 	and	r2,r3,r2
    df78:	10001426 	beq	r2,zero,dfcc <__call_exitprocs+0x16c>
    df7c:	90804117 	ldw	r2,260(r18)
    df80:	1884703a 	and	r2,r3,r2
    df84:	10000c1e 	bne	r2,zero,dfb8 <__call_exitprocs+0x158>
    df88:	2105883a 	add	r2,r4,r4
    df8c:	1485883a 	add	r2,r2,r18
    df90:	11400017 	ldw	r5,0(r2)
    df94:	e009883a 	mov	r4,fp
    df98:	303ee83a 	callr	r6
    df9c:	88800117 	ldw	r2,4(r17)
    dfa0:	98bfc81e 	bne	r19,r2,dec4 <__call_exitprocs+0x64>
    dfa4:	b8800017 	ldw	r2,0(r23)
    dfa8:	147fd526 	beq	r2,r17,df00 <__call_exitprocs+0xa0>
    dfac:	003fc506 	br	dec4 <__call_exitprocs+0x64>
    dfb0:	8c000115 	stw	r16,4(r17)
    dfb4:	003fea06 	br	df60 <__call_exitprocs+0x100>
    dfb8:	2105883a 	add	r2,r4,r4
    dfbc:	1485883a 	add	r2,r2,r18
    dfc0:	11000017 	ldw	r4,0(r2)
    dfc4:	303ee83a 	callr	r6
    dfc8:	003ff406 	br	df9c <__call_exitprocs+0x13c>
    dfcc:	303ee83a 	callr	r6
    dfd0:	003ff206 	br	df9c <__call_exitprocs+0x13c>
    dfd4:	88800117 	ldw	r2,4(r17)
    dfd8:	1000081e 	bne	r2,zero,dffc <__call_exitprocs+0x19c>
    dfdc:	89000017 	ldw	r4,0(r17)
    dfe0:	20000726 	beq	r4,zero,e000 <__call_exitprocs+0x1a0>
    dfe4:	b9000015 	stw	r4,0(r23)
    dfe8:	8809883a 	mov	r4,r17
    dfec:	00000000 	call	0 <__alt_mem_sdram>
    dff0:	bc400017 	ldw	r17,0(r23)
    dff4:	883fb71e 	bne	r17,zero,ded4 <__call_exitprocs+0x74>
    dff8:	003fc506 	br	df10 <__call_exitprocs+0xb0>
    dffc:	89000017 	ldw	r4,0(r17)
    e000:	882f883a 	mov	r23,r17
    e004:	2023883a 	mov	r17,r4
    e008:	883fb21e 	bne	r17,zero,ded4 <__call_exitprocs+0x74>
    e00c:	003fc006 	br	df10 <__call_exitprocs+0xb0>

0000e010 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    e010:	defffd04 	addi	sp,sp,-12
    e014:	df000215 	stw	fp,8(sp)
    e018:	df000204 	addi	fp,sp,8
    e01c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    e020:	e0bfff17 	ldw	r2,-4(fp)
    e024:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    e028:	e0bffe17 	ldw	r2,-8(fp)
    e02c:	1005003a 	cmpeq	r2,r2,zero
    e030:	1000021e 	bne	r2,zero,e03c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    e034:	002af070 	cmpltui	zero,zero,43969
    e038:	00000106 	br	e040 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    e03c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    e040:	e037883a 	mov	sp,fp
    e044:	df000017 	ldw	fp,0(sp)
    e048:	dec00104 	addi	sp,sp,4
    e04c:	f800283a 	ret

0000e050 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    e050:	defffd04 	addi	sp,sp,-12
    e054:	dfc00215 	stw	ra,8(sp)
    e058:	df000115 	stw	fp,4(sp)
    e05c:	df000104 	addi	fp,sp,4
    e060:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    e064:	e13fff17 	ldw	r4,-4(fp)
    e068:	000e0100 	call	e010 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    e06c:	003fff06 	br	e06c <_exit+0x1c>
    e070:	0000de5c 	xori	zero,zero,889
